/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, October 3, 2024
Time: 1:18:00 AM
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections.Generic;
using System.Collections;
using TransactionLayer;
using Utility;
using DataLayer;
namespace DomainLayer
{
    public class Setup : DomainBase, IDomain
    {
        public Setup()
        {
            base.SetTransaction(TransactionType.LINQ);
        }
        ~Setup()
        {
            base.RemoveTransaction();
        }
        void IDomain.AddDeleteEntity(IData Entity)
        {
            throw new NotImplementedException();
        }

        void IDomain.AddHASHEntity(string EntityName, Hashtable Entity)
        {
            throw new NotImplementedException();
        }
        public void AddField<T, K>(T Key, K Value)
        {
            base.Field(Key, Value);
        }
        public void AddRecord(string EntityName)
        {
            base.AddEntity(EntityName);
        }
        public void AddAJAXEntity(string EntityName, Hashtable Entity)
        {
            base.AddAJAXRecord(EntityName, Entity);
        }
        public void Submit()
        {
            base.SubmitRecord();
        }
        public void Append()
        {
            base.AppendRecord();
        }
        public void Insert(UseTransaction IsTransaction)
        {
            try
            {
                _TransactionContext.SubmitChanges(Operations.INSERT, IsTransaction);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void Update(UseTransaction IsTransaction)
        {
            try
            {
                _TransactionContext.SubmitChanges(Operations.UPDATE, IsTransaction);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void Delete(UseTransaction IsTransaction)
        {
            try
            {
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void UpdateCurrentContext(UseTransaction IsTransaction)
        {
            try
            {
                _TransactionContext.SubmitChanges(Operations.UPDATE_CURRENT_CONTEXT, IsTransaction);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public IList Load(string EntityName, string Behaviour)
        {
            IData objData;
            try
            {
                objData = GetEntity(EntityName.ConvertString());
                objData.Fill(_Record);
                _Result = _TransactionContext.Load(objData, Behaviour);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objData = null;
                _Record.Clear();
            }
            return _Result;
        }
        public IList DataList
        {
            get
            {
                return _Result;
            }
        }
    }
}
/*****************************************************************************************************************/

