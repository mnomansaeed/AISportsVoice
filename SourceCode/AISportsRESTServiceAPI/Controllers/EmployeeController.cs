/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, November 14, 2024
Time: 6:42:00 PM
TableName: Employee
/*****************************************************************************************************************/
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using DomainLayer;
using DataLayer;
using Utility;
using POCO;
using System.Web.Http;
using System.Web.Http.Description;
using System.Diagnostics;
namespace WebAPI
{
    /// <summary>
    /// Summary description for EmployeeService
    /// </summary>
    [Authorize]
    public class EmployeeController : ApiController
    {
        private EventLog eventLog;
        private DomainContext objContext;
        public EmployeeController()
        {
            eventLog = new EventLog("EmployeeServiceLog", "localhost", "EmployeeService");
        }
        [HttpGet]
        [Route("api/Employee/GetEmployeesByID/{ID}")]
        public POCO.Employee GetEmployeesByID(long ID)
        {
            POCO.Employee items = new POCO.Employee();
            objContext = new DomainContext(new DomainLayer.DomainClass());
            objContext.AddField(EntityMapper.Employee.EMPLOYEEID, ID);
            IList responseList = objContext.Load(EntityMapper.Entities.EMPLOYEE, DomainMapper.GET_EMPLOYEE_BY_ID);
            if (responseList != null)
            { if (responseList.Count > 0) { items = responseList.Cast<POCO.Employee>().ToList()[0]; } }
            return items;
        }
        [HttpGet]
        [Route("api/Employee/GetEmployees")]
        [ResponseType(typeof(POCO.Employee))]
        public POCO.Employee GetEmployees()
        {
            POCO.Employee items = new POCO.Employee();
            objContext = new DomainContext(new DomainLayer.DomainClass());
            IList responseList = objContext.Load(EntityMapper.Entities.EMPLOYEE, DomainMapper.GET_EMPLOYEES);
            if (responseList != null)
            { if (responseList.Count > 0) { items.lstEmployee = responseList.Cast<POCO.Employee>().ToList(); } }
            return items;
        }
        [HttpGet]
        [Route("api/Employee/GetEmployeesByLocationID/{ID}")]
        [ResponseType(typeof(POCO.Employee))]
        public POCO.Employee GetEmployeesByLocationID(long ID)
        {
            POCO.Employee items = new POCO.Employee();
            objContext = new DomainContext(new DomainLayer.DomainClass());
            objContext.AddField(EntityMapper.Employee.LOCATION_ID, ID);
            IList responseList = objContext.Load(EntityMapper.Entities.EMPLOYEE, DomainMapper.GET_EMPLOYEE_BY_LOCATION_ID);
            if (responseList != null)
            { if (responseList.Count > 0) { items.lstEmployee = responseList.Cast<POCO.Employee>().ToList(); } }
            return items;
        }
        [HttpPost]
        [Route("api/Employee/AddEmployee")]
        public long AddEmployee(POCO.Employee entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.Employee.LOCATION_ID, entity.Location_ID);
                objContext.AddField(EntityMapper.Employee.EMPLOYEECODE, entity.EmployeeCode);
                objContext.AddField(EntityMapper.Employee.FIRSTNAME, entity.FirstName);
                objContext.AddField(EntityMapper.Employee.LASTNAME, entity.LastName);
                objContext.AddField(EntityMapper.Employee.MIDDLENAME, entity.MiddleName);
                objContext.AddField(EntityMapper.Employee.DATEOFBIRTH, entity.DateOfBirth);
                objContext.AddField(EntityMapper.Employee.HIREDATE, entity.HireDate);
                objContext.AddField(EntityMapper.Employee.JOBTITLE, entity.JobTitle);
                objContext.AddField(EntityMapper.Employee.SALARY, entity.Salary);
                objContext.AddField(EntityMapper.Employee.GENDER, entity.Gender);
                objContext.AddField(EntityMapper.Employee.PHONENUMBER, entity.PhoneNumber);
                objContext.AddField(EntityMapper.Employee.EMAIL, entity.Email);
                objContext.AddField(EntityMapper.Employee.ADDRESSLINE1, entity.AddressLine1);
                objContext.AddField(EntityMapper.Employee.ADDRESSLINE2, entity.AddressLine2);
                objContext.AddField(EntityMapper.Employee.CITY, entity.City);
                objContext.AddField(EntityMapper.Employee.STATE, entity.State);
                objContext.AddField(EntityMapper.Employee.POSTALCODE, entity.PostalCode);
                objContext.AddField(EntityMapper.Employee.COUNTRY, entity.Country);
                objContext.AddField(EntityMapper.Employee.NOTES, entity.Notes);
                objContext.AddField(EntityMapper.Employee.IS_ACTIVE, entity.Is_Active);
                objContext.AddField(EntityMapper.Employee.CREATED_DATE, entity.Created_Date);
                objContext.AddField(EntityMapper.Employee.CREATED_BY, entity.Created_By);
                objContext.AddField(EntityMapper.Employee.MODIFIED_DATE, entity.Modified_Date);
                objContext.AddField(EntityMapper.Employee.MODIFIED_BY, entity.Modified_By);
                objContext.AddField(EntityMapper.Employee.AUDIT_ID, entity.Audit_Id);
                objContext.AddField(EntityMapper.Employee.USER_IP, entity.User_IP);
                objContext.AddField(EntityMapper.Employee.SITE_ID, entity.Site_Id);
                objContext.AddRecord(EntityMapper.Entities.EMPLOYEE);
                objContext.Submit();
                objContext.Insert(UseTransaction.NO);
                return objContext.BusinessObject.ConvertDomainClass().ID;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
        [HttpPost]
        [Route("api/Employee/UpdateEmployee")]
        public long UpdateEmployee(POCO.Employee entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.Employee.EMPLOYEEID, entity.EmployeeId);
                objContext.AddField(EntityMapper.Employee.LOCATION_ID, entity.Location_ID);
                objContext.AddField(EntityMapper.Employee.EMPLOYEECODE, entity.EmployeeCode);
                objContext.AddField(EntityMapper.Employee.FIRSTNAME, entity.FirstName);
                objContext.AddField(EntityMapper.Employee.LASTNAME, entity.LastName);
                objContext.AddField(EntityMapper.Employee.MIDDLENAME, entity.MiddleName);
                objContext.AddField(EntityMapper.Employee.DATEOFBIRTH, entity.DateOfBirth);
                objContext.AddField(EntityMapper.Employee.HIREDATE, entity.HireDate);
                objContext.AddField(EntityMapper.Employee.JOBTITLE, entity.JobTitle);
                objContext.AddField(EntityMapper.Employee.SALARY, entity.Salary);
                objContext.AddField(EntityMapper.Employee.GENDER, entity.Gender);
                objContext.AddField(EntityMapper.Employee.PHONENUMBER, entity.PhoneNumber);
                objContext.AddField(EntityMapper.Employee.EMAIL, entity.Email);
                objContext.AddField(EntityMapper.Employee.ADDRESSLINE1, entity.AddressLine1);
                objContext.AddField(EntityMapper.Employee.ADDRESSLINE2, entity.AddressLine2);
                objContext.AddField(EntityMapper.Employee.CITY, entity.City);
                objContext.AddField(EntityMapper.Employee.STATE, entity.State);
                objContext.AddField(EntityMapper.Employee.POSTALCODE, entity.PostalCode);
                objContext.AddField(EntityMapper.Employee.COUNTRY, entity.Country);
                objContext.AddField(EntityMapper.Employee.NOTES, entity.Notes);
                objContext.AddField(EntityMapper.Employee.IS_ACTIVE, entity.Is_Active);
                objContext.AddField(EntityMapper.Employee.CREATED_DATE, entity.Created_Date);
                objContext.AddField(EntityMapper.Employee.CREATED_BY, entity.Created_By);
                objContext.AddField(EntityMapper.Employee.MODIFIED_DATE, entity.Modified_Date);
                objContext.AddField(EntityMapper.Employee.MODIFIED_BY, entity.Modified_By);
                objContext.AddField(EntityMapper.Employee.AUDIT_ID, entity.Audit_Id);
                objContext.AddField(EntityMapper.Employee.USER_IP, entity.User_IP);
                objContext.AddField(EntityMapper.Employee.SITE_ID, entity.Site_Id);
                objContext.AddRecord(EntityMapper.Entities.EMPLOYEE);
                objContext.Submit();
                objContext.Update(UseTransaction.NO);
                return objContext.BusinessObject.ConvertDomainClass().ID;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
        [HttpPost]
        [Route("api/Employee/DeleteEmployee")]
        public void DeleteEmployee(POCO.Employee entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.Employee.EMPLOYEEID, entity.EmployeeId);
                objContext.Load(EntityMapper.Entities.EMPLOYEE, DomainMapper.GET_EMPLOYEE_BY_ID_DATA);
                objContext.AddDeleteEntity(objContext.BusinessObject.DataList[0].ConvertEmployee());
                objContext.Delete(UseTransaction.NO);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
    }
}
/*****************************************************************************************************************/

