/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Monday, November 11, 2024
Time: 7:12:00 AM
TableName: Group
/*****************************************************************************************************************/
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using DomainLayer;
using DataLayer;
using Utility;
using POCO;
using System.Web.Http;
using System.Web.Http.Description;
using System.Diagnostics;
namespace WebAPI
{
    /// <summary>
    /// Summary description for GroupService
    /// </summary>
    [Authorize]
    public class GroupController : ApiController
    {
        private EventLog eventLog;
        private DomainContext objContext;
        public GroupController()
        {
            eventLog = new EventLog("GroupServiceLog", "localhost", "GroupService");
        }
        [HttpGet]
        [Route("api/Group/GetGroupsByID/{ID}")]
        public POCO.Group GetGroupsByID(long ID)
        {
            POCO.Group items = new POCO.Group();
            objContext = new DomainContext(new DomainLayer.DomainClass());
            objContext.AddField(EntityMapper.Group.USERGROUPID, ID);
            IList responseList = objContext.Load(EntityMapper.Entities.GROUP, DomainMapper.GET_GROUP_BY_ID);
            if (responseList != null)
            { if (responseList.Count > 0) { items = responseList.Cast<POCO.Group>().ToList()[0]; } }
            return items;
        }
        [HttpGet]
        [Route("api/Group/GetGroups")]
        [ResponseType(typeof(POCO.Group))]
        public POCO.Group GetGroups()
        {
            POCO.Group items = new POCO.Group();
            objContext = new DomainContext(new DomainLayer.DomainClass());
            IList responseList = objContext.Load(EntityMapper.Entities.GROUP, DomainMapper.GET_GROUPS);
            if (responseList != null)
            { if (responseList.Count > 0) { items.lstGroup = responseList.Cast<POCO.Group>().ToList(); } }
            return items;
        }
        [HttpGet]
        [Route("api/Group/GetGroupsByLocationID/{ID}")]
        [ResponseType(typeof(POCO.Group))]
        public POCO.Group GetGroupsByLocationID(long ID)
        {
            POCO.Group items = new POCO.Group();
            objContext = new DomainContext(new DomainLayer.DomainClass());
            objContext.AddField(EntityMapper.Group.LOCATION_ID, ID);
            IList responseList = objContext.Load(EntityMapper.Entities.GROUP, DomainMapper.GET_GROUP_BY_LOCATION_ID);
            if (responseList != null)
            { if (responseList.Count > 0) { items.lstGroup = responseList.Cast<POCO.Group>().ToList(); } }
            return items;
        }
        [HttpPost]
        [Route("api/Group/AddGroup")]
        public long AddGroup(POCO.Group entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.Group.COMPANYID, entity.CompanyId);
                objContext.AddField(EntityMapper.Group.LOCATION_ID, entity.Location_ID);
                objContext.AddField(EntityMapper.Group.GROUPNAME, entity.GroupName);
                objContext.AddField(EntityMapper.Group.DESCRIPTION, entity.Description);
                objContext.AddField(EntityMapper.Group.IS_ACTIVE, entity.Is_Active);
                objContext.AddField(EntityMapper.Group.CREATED_DATE, entity.Created_Date);
                objContext.AddField(EntityMapper.Group.CREATED_BY, entity.Created_By);
                objContext.AddField(EntityMapper.Group.MODIFIED_DATE, entity.Modified_Date);
                objContext.AddField(EntityMapper.Group.MODIFIED_BY, entity.Modified_By);
                objContext.AddField(EntityMapper.Group.AUDIT_ID, entity.Audit_Id);
                objContext.AddField(EntityMapper.Group.USER_IP, entity.User_IP);
                objContext.AddField(EntityMapper.Group.SITE_ID, entity.Site_Id);
                objContext.AddRecord(EntityMapper.Entities.GROUP);
                objContext.Submit();
                objContext.Insert(UseTransaction.NO);
                return objContext.BusinessObject.ConvertDomainClass().ID;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
        [HttpPost]
        [Route("api/Group/UpdateGroup")]
        public long UpdateGroup(POCO.Group entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.Group.USERGROUPID, entity.UserGroupId);
                objContext.AddField(EntityMapper.Group.COMPANYID, entity.CompanyId);
                objContext.AddField(EntityMapper.Group.LOCATION_ID, entity.Location_ID);
                objContext.AddField(EntityMapper.Group.GROUPNAME, entity.GroupName);
                objContext.AddField(EntityMapper.Group.DESCRIPTION, entity.Description);
                objContext.AddField(EntityMapper.Group.IS_ACTIVE, entity.Is_Active);
                objContext.AddField(EntityMapper.Group.CREATED_DATE, entity.Created_Date);
                objContext.AddField(EntityMapper.Group.CREATED_BY, entity.Created_By);
                objContext.AddField(EntityMapper.Group.MODIFIED_DATE, entity.Modified_Date);
                objContext.AddField(EntityMapper.Group.MODIFIED_BY, entity.Modified_By);
                objContext.AddField(EntityMapper.Group.AUDIT_ID, entity.Audit_Id);
                objContext.AddField(EntityMapper.Group.USER_IP, entity.User_IP);
                objContext.AddField(EntityMapper.Group.SITE_ID, entity.Site_Id);
                objContext.AddRecord(EntityMapper.Entities.GROUP);
                objContext.Submit();
                objContext.Update(UseTransaction.NO);
                return objContext.BusinessObject.ConvertDomainClass().ID;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
        [HttpPost]
        [Route("api/Group/DeleteGroup")]
        public void DeleteGroup(POCO.Group entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.Group.USERGROUPID, entity.UserGroupId);
                objContext.Load(EntityMapper.Entities.GROUP, DomainMapper.GET_GROUP_BY_ID_DATA);
                objContext.AddDeleteEntity(objContext.BusinessObject.DataList[0].ConvertGroup());
                objContext.Delete(UseTransaction.NO);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
    }
}
/*****************************************************************************************************************/

