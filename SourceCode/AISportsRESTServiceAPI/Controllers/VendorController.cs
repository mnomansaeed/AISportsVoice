/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Monday, November 11, 2024
Time: 7:12:00 AM
TableName: Vendor
/*****************************************************************************************************************/
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using DomainLayer;
using DataLayer;
using Utility;
using POCO;
using System.Web.Http;
using System.Web.Http.Description;
using System.Diagnostics;
namespace WebAPI
{
/// <summary>
/// Summary description for VendorService
/// </summary>
[Authorize]
public class VendorController : ApiController
{
private EventLog eventLog;
private DomainContext objContext;
public VendorController()
{
eventLog = new EventLog("VendorServiceLog", "localhost", "VendorService");
}
[HttpGet]
[Route("api/Vendor/GetVendorsByID/{ID}")]
public POCO.Vendor GetVendorsByID(long ID)
{
POCO.Vendor items = new POCO.Vendor();
objContext = new DomainContext(new DomainLayer.DomainClass());
objContext.AddField(EntityMapper.Vendor.VENDORID, ID);
IList responseList = objContext.Load(EntityMapper.Entities.VENDOR, DomainMapper.GET_VENDOR_BY_ID);
if (responseList != null)
{ if (responseList.Count > 0) { items = responseList.Cast<POCO.Vendor>().ToList()[0]; }}
return items;
}
[HttpGet]
[Route("api/Vendor/GetVendors")]
[ResponseType(typeof(POCO.Vendor))]
public POCO.Vendor GetVendors()
{
POCO.Vendor items = new POCO.Vendor();
objContext = new DomainContext(new DomainLayer.DomainClass());
IList responseList = objContext.Load(EntityMapper.Entities.VENDOR, DomainMapper.GET_VENDORS);
if (responseList != null)
{ if (responseList.Count > 0) { items.lstVendor = responseList.Cast<POCO.Vendor>().ToList(); }}
return items;
}
[HttpGet]
[Route("api/Vendor/GetVendorsByLocationID/{ID}")]
[ResponseType(typeof(POCO.Vendor))]
public POCO.Vendor GetVendorsByLocationID(long ID)
{
POCO.Vendor items = new POCO.Vendor();
objContext = new DomainContext(new DomainLayer.DomainClass());
objContext.AddField(EntityMapper.Vendor.LOCATION_ID, ID);
IList responseList = objContext.Load(EntityMapper.Entities.VENDOR, DomainMapper.GET_VENDOR_BY_LOCATION_ID);
if (responseList != null)
{ if (responseList.Count > 0) { items.lstVendor = responseList.Cast<POCO.Vendor>().ToList(); }}
return items;
}
[HttpPost]
[Route("api/Vendor/AddVendor")]
public long AddVendor(POCO.Vendor entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.Vendor.LOCATION_ID, entity.Location_ID);
objContext.AddField(EntityMapper.Vendor.VENDORCODE, entity.VendorCode);
objContext.AddField(EntityMapper.Vendor.VENDORNAME, entity.VendorName);
objContext.AddField(EntityMapper.Vendor.VATREGISTRATIONNO, entity.VATRegistrationNo);
objContext.AddField(EntityMapper.Vendor.CONTACTNAME, entity.ContactName);
objContext.AddField(EntityMapper.Vendor.CONTACTTITLE, entity.ContactTitle);
objContext.AddField(EntityMapper.Vendor.PHONENUMBER, entity.PhoneNumber);
objContext.AddField(EntityMapper.Vendor.EMAIL, entity.Email);
objContext.AddField(EntityMapper.Vendor.ADDRESSLINE1, entity.AddressLine1);
objContext.AddField(EntityMapper.Vendor.ADDRESSLINE2, entity.AddressLine2);
objContext.AddField(EntityMapper.Vendor.CITY, entity.City);
objContext.AddField(EntityMapper.Vendor.STATE, entity.State);
objContext.AddField(EntityMapper.Vendor.POSTALCODE, entity.PostalCode);
objContext.AddField(EntityMapper.Vendor.COUNTRY, entity.Country);
objContext.AddField(EntityMapper.Vendor.WEBSITEURL, entity.WebsiteURL);
objContext.AddField(EntityMapper.Vendor.NOTES, entity.Notes);
objContext.AddField(EntityMapper.Vendor.IS_ACTIVE, entity.Is_Active);
objContext.AddField(EntityMapper.Vendor.CREATED_DATE, entity.Created_Date);
objContext.AddField(EntityMapper.Vendor.CREATED_BY, entity.Created_By);
objContext.AddField(EntityMapper.Vendor.MODIFIED_DATE, entity.Modified_Date);
objContext.AddField(EntityMapper.Vendor.MODIFIED_BY, entity.Modified_By);
objContext.AddField(EntityMapper.Vendor.AUDIT_ID, entity.Audit_Id);
objContext.AddField(EntityMapper.Vendor.USER_IP, entity.User_IP);
objContext.AddField(EntityMapper.Vendor.SITE_ID, entity.Site_Id);
objContext.AddRecord(EntityMapper.Entities.VENDOR);
objContext.Submit();
objContext.Insert(UseTransaction.NO);
return objContext.BusinessObject.ConvertDomainClass().ID;
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
[HttpPost]
[Route("api/Vendor/UpdateVendor")]
public long UpdateVendor(POCO.Vendor entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.Vendor.VENDORID, entity.VendorId);
objContext.AddField(EntityMapper.Vendor.LOCATION_ID, entity.Location_ID);
objContext.AddField(EntityMapper.Vendor.VENDORCODE, entity.VendorCode);
objContext.AddField(EntityMapper.Vendor.VENDORNAME, entity.VendorName);
objContext.AddField(EntityMapper.Vendor.VATREGISTRATIONNO, entity.VATRegistrationNo);
objContext.AddField(EntityMapper.Vendor.CONTACTNAME, entity.ContactName);
objContext.AddField(EntityMapper.Vendor.CONTACTTITLE, entity.ContactTitle);
objContext.AddField(EntityMapper.Vendor.PHONENUMBER, entity.PhoneNumber);
objContext.AddField(EntityMapper.Vendor.EMAIL, entity.Email);
objContext.AddField(EntityMapper.Vendor.ADDRESSLINE1, entity.AddressLine1);
objContext.AddField(EntityMapper.Vendor.ADDRESSLINE2, entity.AddressLine2);
objContext.AddField(EntityMapper.Vendor.CITY, entity.City);
objContext.AddField(EntityMapper.Vendor.STATE, entity.State);
objContext.AddField(EntityMapper.Vendor.POSTALCODE, entity.PostalCode);
objContext.AddField(EntityMapper.Vendor.COUNTRY, entity.Country);
objContext.AddField(EntityMapper.Vendor.WEBSITEURL, entity.WebsiteURL);
objContext.AddField(EntityMapper.Vendor.NOTES, entity.Notes);
objContext.AddField(EntityMapper.Vendor.IS_ACTIVE, entity.Is_Active);
objContext.AddField(EntityMapper.Vendor.CREATED_DATE, entity.Created_Date);
objContext.AddField(EntityMapper.Vendor.CREATED_BY, entity.Created_By);
objContext.AddField(EntityMapper.Vendor.MODIFIED_DATE, entity.Modified_Date);
objContext.AddField(EntityMapper.Vendor.MODIFIED_BY, entity.Modified_By);
objContext.AddField(EntityMapper.Vendor.AUDIT_ID, entity.Audit_Id);
objContext.AddField(EntityMapper.Vendor.USER_IP, entity.User_IP);
objContext.AddField(EntityMapper.Vendor.SITE_ID, entity.Site_Id);
objContext.AddRecord(EntityMapper.Entities.VENDOR);
objContext.Submit();
objContext.Update(UseTransaction.NO);
return objContext.BusinessObject.ConvertDomainClass().ID;
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
[HttpPost]
[Route("api/Vendor/DeleteVendor")]
public void DeleteVendor(POCO.Vendor entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.Vendor.VENDORID, entity.VendorId);
objContext.Load(EntityMapper.Entities.VENDOR, DomainMapper.GET_VENDOR_BY_ID_DATA);
objContext.AddDeleteEntity(objContext.BusinessObject.DataList[0].ConvertVendor());
objContext.Delete(UseTransaction.NO);
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
}
}
/*****************************************************************************************************************/

