/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Monday, November 11, 2024
Time: 7:12:00 AM
TableName: Customer
/*****************************************************************************************************************/
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using DomainLayer;
using DataLayer;
using Utility;
using POCO;
using System.Web.Http;
using System.Web.Http.Description;
using System.Diagnostics;
namespace WebAPI
{
/// <summary>
/// Summary description for CustomerService
/// </summary>
[Authorize]
public class CustomerController : ApiController
{
private EventLog eventLog;
private DomainContext objContext;
public CustomerController()
{
eventLog = new EventLog("CustomerServiceLog", "localhost", "CustomerService");
}
[HttpGet]
[Route("api/Customer/GetCustomersByID/{ID}")]
public POCO.Customer GetCustomersByID(long ID)
{
POCO.Customer items = new POCO.Customer();
objContext = new DomainContext(new DomainLayer.DomainClass());
objContext.AddField(EntityMapper.Customer.CUSTOMERID, ID);
IList responseList = objContext.Load(EntityMapper.Entities.CUSTOMER, DomainMapper.GET_CUSTOMER_BY_ID);
if (responseList != null)
{ if (responseList.Count > 0) { items = responseList.Cast<POCO.Customer>().ToList()[0]; }}
return items;
}
[HttpGet]
[Route("api/Customer/GetCustomers")]
[ResponseType(typeof(POCO.Customer))]
public POCO.Customer GetCustomers()
{
POCO.Customer items = new POCO.Customer();
objContext = new DomainContext(new DomainLayer.DomainClass());
IList responseList = objContext.Load(EntityMapper.Entities.CUSTOMER, DomainMapper.GET_CUSTOMERS);
if (responseList != null)
{ if (responseList.Count > 0) { items.lstCustomer = responseList.Cast<POCO.Customer>().ToList(); }}
return items;
}
[HttpGet]
[Route("api/Customer/GetCustomersByLocationID/{ID}")]
[ResponseType(typeof(POCO.Customer))]
public POCO.Customer GetCustomersByLocationID(long ID)
{
POCO.Customer items = new POCO.Customer();
objContext = new DomainContext(new DomainLayer.DomainClass());
objContext.AddField(EntityMapper.Customer.LOCATION_ID, ID);
IList responseList = objContext.Load(EntityMapper.Entities.CUSTOMER, DomainMapper.GET_CUSTOMER_BY_LOCATION_ID);
if (responseList != null)
{ if (responseList.Count > 0) { items.lstCustomer = responseList.Cast<POCO.Customer>().ToList(); }}
return items;
}
[HttpPost]
[Route("api/Customer/AddCustomer")]
public long AddCustomer(POCO.Customer entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.Customer.LOCATION_ID, entity.Location_ID);
objContext.AddField(EntityMapper.Customer.CUSTOMERCODE, entity.CustomerCode);
objContext.AddField(EntityMapper.Customer.CUSTOMERNAME, entity.CustomerName);
objContext.AddField(EntityMapper.Customer.CONTACTNAME, entity.ContactName);
objContext.AddField(EntityMapper.Customer.CONTACTTITLE, entity.ContactTitle);
objContext.AddField(EntityMapper.Customer.DATEOFBIRTH, entity.DateOfBirth);
objContext.AddField(EntityMapper.Customer.GENDER, entity.Gender);
objContext.AddField(EntityMapper.Customer.PHONENUMBER, entity.PhoneNumber);
objContext.AddField(EntityMapper.Customer.EMAIL, entity.Email);
objContext.AddField(EntityMapper.Customer.ADDRESSLINE1, entity.AddressLine1);
objContext.AddField(EntityMapper.Customer.ADDRESSLINE2, entity.AddressLine2);
objContext.AddField(EntityMapper.Customer.CITY, entity.City);
objContext.AddField(EntityMapper.Customer.STATE, entity.State);
objContext.AddField(EntityMapper.Customer.POSTALCODE, entity.PostalCode);
objContext.AddField(EntityMapper.Customer.COUNTRY, entity.Country);
objContext.AddField(EntityMapper.Customer.WEBSITEURL, entity.WebsiteURL);
objContext.AddField(EntityMapper.Customer.CUSTOMERSINCE, entity.CustomerSince);
objContext.AddField(EntityMapper.Customer.ACCOUNTBALANCE, entity.AccountBalance);
objContext.AddField(EntityMapper.Customer.NOTES, entity.Notes);
objContext.AddField(EntityMapper.Customer.IS_ACTIVE, entity.Is_Active);
objContext.AddField(EntityMapper.Customer.CREATED_DATE, entity.Created_Date);
objContext.AddField(EntityMapper.Customer.CREATED_BY, entity.Created_By);
objContext.AddField(EntityMapper.Customer.MODIFIED_DATE, entity.Modified_Date);
objContext.AddField(EntityMapper.Customer.MODIFIED_BY, entity.Modified_By);
objContext.AddField(EntityMapper.Customer.AUDIT_ID, entity.Audit_Id);
objContext.AddField(EntityMapper.Customer.USER_IP, entity.User_IP);
objContext.AddField(EntityMapper.Customer.SITE_ID, entity.Site_Id);
objContext.AddRecord(EntityMapper.Entities.CUSTOMER);
objContext.Submit();
objContext.Insert(UseTransaction.NO);
return objContext.BusinessObject.ConvertDomainClass().ID;
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
[HttpPost]
[Route("api/Customer/UpdateCustomer")]
public long UpdateCustomer(POCO.Customer entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.Customer.CUSTOMERID, entity.CustomerId);
objContext.AddField(EntityMapper.Customer.LOCATION_ID, entity.Location_ID);
objContext.AddField(EntityMapper.Customer.CUSTOMERCODE, entity.CustomerCode);
objContext.AddField(EntityMapper.Customer.CUSTOMERNAME, entity.CustomerName);
objContext.AddField(EntityMapper.Customer.CONTACTNAME, entity.ContactName);
objContext.AddField(EntityMapper.Customer.CONTACTTITLE, entity.ContactTitle);
objContext.AddField(EntityMapper.Customer.DATEOFBIRTH, entity.DateOfBirth);
objContext.AddField(EntityMapper.Customer.GENDER, entity.Gender);
objContext.AddField(EntityMapper.Customer.PHONENUMBER, entity.PhoneNumber);
objContext.AddField(EntityMapper.Customer.EMAIL, entity.Email);
objContext.AddField(EntityMapper.Customer.ADDRESSLINE1, entity.AddressLine1);
objContext.AddField(EntityMapper.Customer.ADDRESSLINE2, entity.AddressLine2);
objContext.AddField(EntityMapper.Customer.CITY, entity.City);
objContext.AddField(EntityMapper.Customer.STATE, entity.State);
objContext.AddField(EntityMapper.Customer.POSTALCODE, entity.PostalCode);
objContext.AddField(EntityMapper.Customer.COUNTRY, entity.Country);
objContext.AddField(EntityMapper.Customer.WEBSITEURL, entity.WebsiteURL);
objContext.AddField(EntityMapper.Customer.CUSTOMERSINCE, entity.CustomerSince);
objContext.AddField(EntityMapper.Customer.ACCOUNTBALANCE, entity.AccountBalance);
objContext.AddField(EntityMapper.Customer.NOTES, entity.Notes);
objContext.AddField(EntityMapper.Customer.IS_ACTIVE, entity.Is_Active);
objContext.AddField(EntityMapper.Customer.CREATED_DATE, entity.Created_Date);
objContext.AddField(EntityMapper.Customer.CREATED_BY, entity.Created_By);
objContext.AddField(EntityMapper.Customer.MODIFIED_DATE, entity.Modified_Date);
objContext.AddField(EntityMapper.Customer.MODIFIED_BY, entity.Modified_By);
objContext.AddField(EntityMapper.Customer.AUDIT_ID, entity.Audit_Id);
objContext.AddField(EntityMapper.Customer.USER_IP, entity.User_IP);
objContext.AddField(EntityMapper.Customer.SITE_ID, entity.Site_Id);
objContext.AddRecord(EntityMapper.Entities.CUSTOMER);
objContext.Submit();
objContext.Update(UseTransaction.NO);
return objContext.BusinessObject.ConvertDomainClass().ID;
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
[HttpPost]
[Route("api/Customer/DeleteCustomer")]
public void DeleteCustomer(POCO.Customer entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.Customer.CUSTOMERID, entity.CustomerId);
objContext.Load(EntityMapper.Entities.CUSTOMER, DomainMapper.GET_CUSTOMER_BY_ID_DATA);
objContext.AddDeleteEntity(objContext.BusinessObject.DataList[0].ConvertCustomer());
objContext.Delete(UseTransaction.NO);
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
}
}
/*****************************************************************************************************************/

