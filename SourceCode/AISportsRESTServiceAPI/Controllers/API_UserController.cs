/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Monday, November 11, 2024
Time: 7:12:00 AM
TableName: API_User
/*****************************************************************************************************************/
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using DomainLayer;
using DataLayer;
using Utility;
using POCO;
using System.Web.Http;
using System.Web.Http.Description;
using System.Diagnostics;
namespace WebAPI
{
/// <summary>
/// Summary description for API_UserService
/// </summary>
[Authorize]
public class API_UserController : ApiController
{
private EventLog eventLog;
private DomainContext objContext;
public API_UserController()
{
eventLog = new EventLog("API_UserServiceLog", "localhost", "API_UserService");
}
[HttpGet]
[Route("api/API_User/GetAPI_UsersByID/{ID}")]
public POCO.API_User GetAPI_UsersByID(long ID)
{
POCO.API_User items = new POCO.API_User();
objContext = new DomainContext(new DomainLayer.DomainClass());
objContext.AddField(EntityMapper.API_User.USERID, ID);
IList responseList = objContext.Load(EntityMapper.Entities.API_USER, DomainMapper.GET_API_USER_BY_ID);
if (responseList != null)
{ if (responseList.Count > 0) { items = responseList.Cast<POCO.API_User>().ToList()[0]; }}
return items;
}
[HttpGet]
[Route("api/API_User/GetAPI_Users")]
[ResponseType(typeof(POCO.API_User))]
public POCO.API_User GetAPI_Users()
{
POCO.API_User items = new POCO.API_User();
objContext = new DomainContext(new DomainLayer.DomainClass());
IList responseList = objContext.Load(EntityMapper.Entities.API_USER, DomainMapper.GET_API_USERS);
if (responseList != null)
{ if (responseList.Count > 0) { items.lstAPI_User = responseList.Cast<POCO.API_User>().ToList(); }}
return items;
}
[HttpGet]
[Route("api/API_User/GetAPI_UsersByLocationID/{ID}")]
[ResponseType(typeof(POCO.API_User))]
public POCO.API_User GetAPI_UsersByLocationID(long ID)
{
POCO.API_User items = new POCO.API_User();
objContext = new DomainContext(new DomainLayer.DomainClass());
objContext.AddField(EntityMapper.API_User.LOCATION_ID, ID);
IList responseList = objContext.Load(EntityMapper.Entities.API_USER, DomainMapper.GET_API_USER_BY_LOCATION_ID);
if (responseList != null)
{ if (responseList.Count > 0) { items.lstAPI_User = responseList.Cast<POCO.API_User>().ToList(); }}
return items;
}
[HttpPost]
[Route("api/API_User/AddAPI_User")]
public long AddAPI_User(POCO.API_User entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.API_User.CLIENTID, entity.ClientId);
objContext.AddField(EntityMapper.API_User.USERNAME, entity.Username);
objContext.AddField(EntityMapper.API_User.PASSWORDHASH, entity.PasswordHash);
objContext.AddField(EntityMapper.API_User.ROLE, entity.Role);
objContext.AddRecord(EntityMapper.Entities.API_USER);
objContext.Submit();
objContext.Insert(UseTransaction.NO);
return objContext.BusinessObject.ConvertDomainClass().ID;
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
[HttpPost]
[Route("api/API_User/UpdateAPI_User")]
public long UpdateAPI_User(POCO.API_User entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.API_User.USERID, entity.UserId);
objContext.AddField(EntityMapper.API_User.CLIENTID, entity.ClientId);
objContext.AddField(EntityMapper.API_User.USERNAME, entity.Username);
objContext.AddField(EntityMapper.API_User.PASSWORDHASH, entity.PasswordHash);
objContext.AddField(EntityMapper.API_User.ROLE, entity.Role);
objContext.AddRecord(EntityMapper.Entities.API_USER);
objContext.Submit();
objContext.Update(UseTransaction.NO);
return objContext.BusinessObject.ConvertDomainClass().ID;
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
[HttpPost]
[Route("api/API_User/DeleteAPI_User")]
public void DeleteAPI_User(POCO.API_User entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.API_User.USERID, entity.UserId);
objContext.Load(EntityMapper.Entities.API_USER, DomainMapper.GET_API_USER_BY_ID_DATA);
objContext.AddDeleteEntity(objContext.BusinessObject.DataList[0].ConvertAPI_User());
objContext.Delete(UseTransaction.NO);
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
}
}
/*****************************************************************************************************************/

