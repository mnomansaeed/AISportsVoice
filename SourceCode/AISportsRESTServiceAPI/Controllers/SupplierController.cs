/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Monday, November 11, 2024
Time: 7:12:00 AM
TableName: Supplier
/*****************************************************************************************************************/
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using DomainLayer;
using DataLayer;
using Utility;
using POCO;
using System.Web.Http;
using System.Web.Http.Description;
using System.Diagnostics;
namespace WebAPI
{
/// <summary>
/// Summary description for SupplierService
/// </summary>
[Authorize]
public class SupplierController : ApiController
{
private EventLog eventLog;
private DomainContext objContext;
public SupplierController()
{
eventLog = new EventLog("SupplierServiceLog", "localhost", "SupplierService");
}
[HttpGet]
[Route("api/Supplier/GetSuppliersByID/{ID}")]
public POCO.Supplier GetSuppliersByID(long ID)
{
POCO.Supplier items = new POCO.Supplier();
objContext = new DomainContext(new DomainLayer.DomainClass());
objContext.AddField(EntityMapper.Supplier.SUPPLIERID, ID);
IList responseList = objContext.Load(EntityMapper.Entities.SUPPLIER, DomainMapper.GET_SUPPLIER_BY_ID);
if (responseList != null)
{ if (responseList.Count > 0) { items = responseList.Cast<POCO.Supplier>().ToList()[0]; }}
return items;
}
[HttpGet]
[Route("api/Supplier/GetSuppliers")]
[ResponseType(typeof(POCO.Supplier))]
public POCO.Supplier GetSuppliers()
{
POCO.Supplier items = new POCO.Supplier();
objContext = new DomainContext(new DomainLayer.DomainClass());
IList responseList = objContext.Load(EntityMapper.Entities.SUPPLIER, DomainMapper.GET_SUPPLIERS);
if (responseList != null)
{ if (responseList.Count > 0) { items.lstSupplier = responseList.Cast<POCO.Supplier>().ToList(); }}
return items;
}
[HttpGet]
[Route("api/Supplier/GetSuppliersByLocationID/{ID}")]
[ResponseType(typeof(POCO.Supplier))]
public POCO.Supplier GetSuppliersByLocationID(long ID)
{
POCO.Supplier items = new POCO.Supplier();
objContext = new DomainContext(new DomainLayer.DomainClass());
objContext.AddField(EntityMapper.Supplier.LOCATION_ID, ID);
IList responseList = objContext.Load(EntityMapper.Entities.SUPPLIER, DomainMapper.GET_SUPPLIER_BY_LOCATION_ID);
if (responseList != null)
{ if (responseList.Count > 0) { items.lstSupplier = responseList.Cast<POCO.Supplier>().ToList(); }}
return items;
}
[HttpPost]
[Route("api/Supplier/AddSupplier")]
public long AddSupplier(POCO.Supplier entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.Supplier.LOCATION_ID, entity.Location_ID);
objContext.AddField(EntityMapper.Supplier.SUPPLIERCODE, entity.SupplierCode);
objContext.AddField(EntityMapper.Supplier.SUPPLIERNAME, entity.SupplierName);
objContext.AddField(EntityMapper.Supplier.CONTACTNAME, entity.ContactName);
objContext.AddField(EntityMapper.Supplier.CONTACTTITLE, entity.ContactTitle);
objContext.AddField(EntityMapper.Supplier.PHONENUMBER, entity.PhoneNumber);
objContext.AddField(EntityMapper.Supplier.EMAIL, entity.Email);
objContext.AddField(EntityMapper.Supplier.ADDRESSLINE1, entity.AddressLine1);
objContext.AddField(EntityMapper.Supplier.ADDRESSLINE2, entity.AddressLine2);
objContext.AddField(EntityMapper.Supplier.CITY, entity.City);
objContext.AddField(EntityMapper.Supplier.STATE, entity.State);
objContext.AddField(EntityMapper.Supplier.POSTALCODE, entity.PostalCode);
objContext.AddField(EntityMapper.Supplier.COUNTRY, entity.Country);
objContext.AddField(EntityMapper.Supplier.WEBSITEURL, entity.WebsiteURL);
objContext.AddField(EntityMapper.Supplier.NOTES, entity.Notes);
objContext.AddField(EntityMapper.Supplier.IS_ACTIVE, entity.Is_Active);
objContext.AddField(EntityMapper.Supplier.CREATED_DATE, entity.Created_Date);
objContext.AddField(EntityMapper.Supplier.CREATED_BY, entity.Created_By);
objContext.AddField(EntityMapper.Supplier.MODIFIED_DATE, entity.Modified_Date);
objContext.AddField(EntityMapper.Supplier.MODIFIED_BY, entity.Modified_By);
objContext.AddField(EntityMapper.Supplier.AUDIT_ID, entity.Audit_Id);
objContext.AddField(EntityMapper.Supplier.USER_IP, entity.User_IP);
objContext.AddField(EntityMapper.Supplier.SITE_ID, entity.Site_Id);
objContext.AddRecord(EntityMapper.Entities.SUPPLIER);
objContext.Submit();
objContext.Insert(UseTransaction.NO);
return objContext.BusinessObject.ConvertDomainClass().ID;
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
[HttpPost]
[Route("api/Supplier/UpdateSupplier")]
public long UpdateSupplier(POCO.Supplier entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.Supplier.SUPPLIERID, entity.SupplierId);
objContext.AddField(EntityMapper.Supplier.LOCATION_ID, entity.Location_ID);
objContext.AddField(EntityMapper.Supplier.SUPPLIERCODE, entity.SupplierCode);
objContext.AddField(EntityMapper.Supplier.SUPPLIERNAME, entity.SupplierName);
objContext.AddField(EntityMapper.Supplier.CONTACTNAME, entity.ContactName);
objContext.AddField(EntityMapper.Supplier.CONTACTTITLE, entity.ContactTitle);
objContext.AddField(EntityMapper.Supplier.PHONENUMBER, entity.PhoneNumber);
objContext.AddField(EntityMapper.Supplier.EMAIL, entity.Email);
objContext.AddField(EntityMapper.Supplier.ADDRESSLINE1, entity.AddressLine1);
objContext.AddField(EntityMapper.Supplier.ADDRESSLINE2, entity.AddressLine2);
objContext.AddField(EntityMapper.Supplier.CITY, entity.City);
objContext.AddField(EntityMapper.Supplier.STATE, entity.State);
objContext.AddField(EntityMapper.Supplier.POSTALCODE, entity.PostalCode);
objContext.AddField(EntityMapper.Supplier.COUNTRY, entity.Country);
objContext.AddField(EntityMapper.Supplier.WEBSITEURL, entity.WebsiteURL);
objContext.AddField(EntityMapper.Supplier.NOTES, entity.Notes);
objContext.AddField(EntityMapper.Supplier.IS_ACTIVE, entity.Is_Active);
objContext.AddField(EntityMapper.Supplier.CREATED_DATE, entity.Created_Date);
objContext.AddField(EntityMapper.Supplier.CREATED_BY, entity.Created_By);
objContext.AddField(EntityMapper.Supplier.MODIFIED_DATE, entity.Modified_Date);
objContext.AddField(EntityMapper.Supplier.MODIFIED_BY, entity.Modified_By);
objContext.AddField(EntityMapper.Supplier.AUDIT_ID, entity.Audit_Id);
objContext.AddField(EntityMapper.Supplier.USER_IP, entity.User_IP);
objContext.AddField(EntityMapper.Supplier.SITE_ID, entity.Site_Id);
objContext.AddRecord(EntityMapper.Entities.SUPPLIER);
objContext.Submit();
objContext.Update(UseTransaction.NO);
return objContext.BusinessObject.ConvertDomainClass().ID;
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
[HttpPost]
[Route("api/Supplier/DeleteSupplier")]
public void DeleteSupplier(POCO.Supplier entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.Supplier.SUPPLIERID, entity.SupplierId);
objContext.Load(EntityMapper.Entities.SUPPLIER, DomainMapper.GET_SUPPLIER_BY_ID_DATA);
objContext.AddDeleteEntity(objContext.BusinessObject.DataList[0].ConvertSupplier());
objContext.Delete(UseTransaction.NO);
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
}
}
/*****************************************************************************************************************/

