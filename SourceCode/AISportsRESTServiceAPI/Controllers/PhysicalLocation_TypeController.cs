/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, November 14, 2024
Time: 10:49:00 AM
TableName: PhysicalLocation_Type
/*****************************************************************************************************************/
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using DomainLayer;
using DataLayer;
using Utility;
using POCO;
using System.Web.Http;
using System.Web.Http.Description;
using System.Diagnostics;
namespace WebAPI
{
    /// <summary>
    /// Summary description for PhysicalLocation_TypeService
    /// </summary>
    [Authorize]
    public class PhysicalLocation_TypeController : ApiController
    {
        private EventLog eventLog;
        private DomainContext objContext;
        public PhysicalLocation_TypeController()
        {
            eventLog = new EventLog("PhysicalLocation_TypeServiceLog", "localhost", "PhysicalLocation_TypeService");
        }
        [HttpGet]
        [Route("api/PhysicalLocation_Type/GetPhysicalLocation_TypesByID/{ID}")]
        public POCO.PhysicalLocation_Type GetPhysicalLocation_TypesByID(long ID)
        {
            POCO.PhysicalLocation_Type items = new POCO.PhysicalLocation_Type();
            objContext = new DomainContext(new DomainLayer.DomainClass());
            objContext.AddField(EntityMapper.PhysicalLocation_Type.PHYSICALLOCATION_TYPE_ID, ID);
            IList responseList = objContext.Load(EntityMapper.Entities.PHYSICALLOCATION_TYPE, DomainMapper.GET_PHYSICALLOCATION_TYPE_BY_ID);
            if (responseList != null)
            { if (responseList.Count > 0) { items = responseList.Cast<POCO.PhysicalLocation_Type>().ToList()[0]; } }
            return items;
        }
        [HttpGet]
        [Route("api/PhysicalLocation_Type/GetPhysicalLocation_Types")]
        [ResponseType(typeof(POCO.PhysicalLocation_Type))]
        public POCO.PhysicalLocation_Type GetPhysicalLocation_Types()
        {
            POCO.PhysicalLocation_Type items = new POCO.PhysicalLocation_Type();
            objContext = new DomainContext(new DomainLayer.DomainClass());
            IList responseList = objContext.Load(EntityMapper.Entities.PHYSICALLOCATION_TYPE, DomainMapper.GET_PHYSICALLOCATION_TYPES);
            if (responseList != null)
            { if (responseList.Count > 0) { items.lstPhysicalLocation_Type = responseList.Cast<POCO.PhysicalLocation_Type>().ToList(); } }
            return items;
        }
        //[HttpGet]
        //[Route("api/PhysicalLocation_Type/GetPhysicalLocation_TypesByLocationID/{ID}")]
        //[ResponseType(typeof(POCO.PhysicalLocation_Type))]
        //public POCO.PhysicalLocation_Type GetPhysicalLocation_TypesByLocationID(long ID)
        //{
        //    POCO.PhysicalLocation_Type items = new POCO.PhysicalLocation_Type();
        //    objContext = new DomainContext(new DomainLayer.DomainClass());
        //    objContext.AddField(EntityMapper.PhysicalLocation_Type.LOCATION_ID, ID);
        //    IList responseList = objContext.Load(EntityMapper.Entities.PHYSICALLOCATION_TYPE, DomainMapper.GET_PHYSICALLOCATION_TYPE_BY_LOCATION_ID);
        //    if (responseList != null)
        //    { if (responseList.Count > 0) { items.lstPhysicalLocation_Type = responseList.Cast<POCO.PhysicalLocation_Type>().ToList(); } }
        //    return items;
        //}
        [HttpPost]
        [Route("api/PhysicalLocation_Type/AddPhysicalLocation_Type")]
        public long AddPhysicalLocation_Type(POCO.PhysicalLocation_Type entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.PhysicalLocation_Type.PHYSICALLOCATIONTYPENAME, entity.PhysicalLocationTypeName);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.DESCRIPTION, entity.Description);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.PARENT_PHYSICALLOCATION_TYPE_ID, entity.Parent_PhysicalLocation_Type_ID);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.IS_ACTIVE, entity.Is_Active);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.CREATED_DATE, entity.Created_Date);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.CREATED_BY, entity.Created_By);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.MODIFIED_DATE, entity.Modified_Date);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.MODIFIED_BY, entity.Modified_By);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.AUDIT_ID, entity.Audit_Id);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.USER_IP, entity.User_IP);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.SITE_ID, entity.Site_Id);
                objContext.AddRecord(EntityMapper.Entities.PHYSICALLOCATION_TYPE);
                objContext.Submit();
                objContext.Insert(UseTransaction.NO);
                return objContext.BusinessObject.ConvertDomainClass().ID;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
        [HttpPost]
        [Route("api/PhysicalLocation_Type/UpdatePhysicalLocation_Type")]
        public long UpdatePhysicalLocation_Type(POCO.PhysicalLocation_Type entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.PhysicalLocation_Type.PHYSICALLOCATION_TYPE_ID, entity.PhysicalLocation_Type_Id);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.PHYSICALLOCATIONTYPENAME, entity.PhysicalLocationTypeName);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.DESCRIPTION, entity.Description);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.PARENT_PHYSICALLOCATION_TYPE_ID, entity.Parent_PhysicalLocation_Type_ID);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.IS_ACTIVE, entity.Is_Active);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.CREATED_DATE, entity.Created_Date);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.CREATED_BY, entity.Created_By);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.MODIFIED_DATE, entity.Modified_Date);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.MODIFIED_BY, entity.Modified_By);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.AUDIT_ID, entity.Audit_Id);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.USER_IP, entity.User_IP);
                objContext.AddField(EntityMapper.PhysicalLocation_Type.SITE_ID, entity.Site_Id);
                objContext.AddRecord(EntityMapper.Entities.PHYSICALLOCATION_TYPE);
                objContext.Submit();
                objContext.Update(UseTransaction.NO);
                return objContext.BusinessObject.ConvertDomainClass().ID;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
        [HttpPost]
        [Route("api/PhysicalLocation_Type/DeletePhysicalLocation_Type")]
        public void DeletePhysicalLocation_Type(POCO.PhysicalLocation_Type entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.PhysicalLocation_Type.PHYSICALLOCATION_TYPE_ID, entity.PhysicalLocation_Type_Id);
                objContext.Load(EntityMapper.Entities.PHYSICALLOCATION_TYPE, DomainMapper.GET_PHYSICALLOCATION_TYPE_BY_ID_DATA);
                objContext.AddDeleteEntity(objContext.BusinessObject.DataList[0].ConvertPhysicalLocation_Type());
                objContext.Delete(UseTransaction.NO);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
    }
}
/*****************************************************************************************************************/

