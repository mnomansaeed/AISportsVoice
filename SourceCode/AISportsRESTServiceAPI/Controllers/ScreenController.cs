/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Monday, November 11, 2024
Time: 7:12:00 AM
TableName: Screen
/*****************************************************************************************************************/
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using DomainLayer;
using DataLayer;
using Utility;
using POCO;
using System.Web.Http;
using System.Web.Http.Description;
using System.Diagnostics;
namespace WebAPI
{
/// <summary>
/// Summary description for ScreenService
/// </summary>
[Authorize]
public class ScreenController : ApiController
{
private EventLog eventLog;
private DomainContext objContext;
public ScreenController()
{
eventLog = new EventLog("ScreenServiceLog", "localhost", "ScreenService");
}
[HttpGet]
[Route("api/Screen/GetScreensByID/{ID}")]
public POCO.Screen GetScreensByID(long ID)
{
POCO.Screen items = new POCO.Screen();
objContext = new DomainContext(new DomainLayer.DomainClass());
objContext.AddField(EntityMapper.Screen.SCREENID, ID);
IList responseList = objContext.Load(EntityMapper.Entities.SCREEN, DomainMapper.GET_SCREEN_BY_ID);
if (responseList != null)
{ if (responseList.Count > 0) { items = responseList.Cast<POCO.Screen>().ToList()[0]; }}
return items;
}
[HttpGet]
[Route("api/Screen/GetScreens")]
[ResponseType(typeof(POCO.Screen))]
public POCO.Screen GetScreens()
{
POCO.Screen items = new POCO.Screen();
objContext = new DomainContext(new DomainLayer.DomainClass());
IList responseList = objContext.Load(EntityMapper.Entities.SCREEN, DomainMapper.GET_SCREENS);
if (responseList != null)
{ if (responseList.Count > 0) { items.lstScreen = responseList.Cast<POCO.Screen>().ToList(); }}
return items;
}
[HttpGet]
[Route("api/Screen/GetScreensByLocationID/{ID}")]
[ResponseType(typeof(POCO.Screen))]
public POCO.Screen GetScreensByLocationID(long ID)
{
POCO.Screen items = new POCO.Screen();
objContext = new DomainContext(new DomainLayer.DomainClass());
objContext.AddField(EntityMapper.Screen.LOCATION_ID, ID);
IList responseList = objContext.Load(EntityMapper.Entities.SCREEN, DomainMapper.GET_SCREEN_BY_LOCATION_ID);
if (responseList != null)
{ if (responseList.Count > 0) { items.lstScreen = responseList.Cast<POCO.Screen>().ToList(); }}
return items;
}
[HttpPost]
[Route("api/Screen/AddScreen")]
public long AddScreen(POCO.Screen entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.Screen.LOCATION_ID, entity.Location_ID);
objContext.AddField(EntityMapper.Screen.SCREENNAME, entity.ScreenName);
objContext.AddField(EntityMapper.Screen.DESCRIPTION, entity.Description);
objContext.AddField(EntityMapper.Screen.IS_ACTIVE, entity.Is_Active);
objContext.AddField(EntityMapper.Screen.CREATED_DATE, entity.Created_Date);
objContext.AddField(EntityMapper.Screen.CREATED_BY, entity.Created_By);
objContext.AddField(EntityMapper.Screen.MODIFIED_DATE, entity.Modified_Date);
objContext.AddField(EntityMapper.Screen.MODIFIED_BY, entity.Modified_By);
objContext.AddField(EntityMapper.Screen.AUDIT_ID, entity.Audit_Id);
objContext.AddField(EntityMapper.Screen.USER_IP, entity.User_IP);
objContext.AddField(EntityMapper.Screen.SITE_ID, entity.Site_Id);
objContext.AddRecord(EntityMapper.Entities.SCREEN);
objContext.Submit();
objContext.Insert(UseTransaction.NO);
return objContext.BusinessObject.ConvertDomainClass().ID;
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
[HttpPost]
[Route("api/Screen/UpdateScreen")]
public long UpdateScreen(POCO.Screen entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.Screen.SCREENID, entity.ScreenId);
objContext.AddField(EntityMapper.Screen.LOCATION_ID, entity.Location_ID);
objContext.AddField(EntityMapper.Screen.SCREENNAME, entity.ScreenName);
objContext.AddField(EntityMapper.Screen.DESCRIPTION, entity.Description);
objContext.AddField(EntityMapper.Screen.IS_ACTIVE, entity.Is_Active);
objContext.AddField(EntityMapper.Screen.CREATED_DATE, entity.Created_Date);
objContext.AddField(EntityMapper.Screen.CREATED_BY, entity.Created_By);
objContext.AddField(EntityMapper.Screen.MODIFIED_DATE, entity.Modified_Date);
objContext.AddField(EntityMapper.Screen.MODIFIED_BY, entity.Modified_By);
objContext.AddField(EntityMapper.Screen.AUDIT_ID, entity.Audit_Id);
objContext.AddField(EntityMapper.Screen.USER_IP, entity.User_IP);
objContext.AddField(EntityMapper.Screen.SITE_ID, entity.Site_Id);
objContext.AddRecord(EntityMapper.Entities.SCREEN);
objContext.Submit();
objContext.Update(UseTransaction.NO);
return objContext.BusinessObject.ConvertDomainClass().ID;
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
[HttpPost]
[Route("api/Screen/DeleteScreen")]
public void DeleteScreen(POCO.Screen entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.Screen.SCREENID, entity.ScreenId);
objContext.Load(EntityMapper.Entities.SCREEN, DomainMapper.GET_SCREEN_BY_ID_DATA);
objContext.AddDeleteEntity(objContext.BusinessObject.DataList[0].ConvertScreen());
objContext.Delete(UseTransaction.NO);
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
}
}
/*****************************************************************************************************************/

