/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Monday, November 11, 2024
Time: 7:12:00 AM
TableName: Subscription
/*****************************************************************************************************************/
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using DomainLayer;
using DataLayer;
using Utility;
using POCO;
using System.Web.Http;
using System.Web.Http.Description;
using System.Diagnostics;
namespace WebAPI
{
    /// <summary>
    /// Summary description for SubscriptionService
    /// </summary>
    [Authorize]
    public class SubscriptionController : ApiController
    {
        private EventLog eventLog;
        private DomainContext objContext;
        public SubscriptionController()
        {
            eventLog = new EventLog("SubscriptionServiceLog", "localhost", "SubscriptionService");
        }
        [HttpGet]
        [Route("api/Subscription/GetSubscriptionsByID/{ID}")]
        public POCO.Subscription GetSubscriptionsByID(long ID)
        {
            POCO.Subscription items = new POCO.Subscription();
            objContext = new DomainContext(new DomainLayer.DomainClass());
            objContext.AddField(EntityMapper.Subscription.SUBSCRIPTIONID, ID);
            IList responseList = objContext.Load(EntityMapper.Entities.SUBSCRIPTION, DomainMapper.GET_SUBSCRIPTION_BY_ID);
            if (responseList != null)
            { if (responseList.Count > 0) { items = responseList.Cast<POCO.Subscription>().ToList()[0]; } }
            return items;
        }
        [HttpGet]
        [Route("api/Subscription/GetSubscriptions")]
        [ResponseType(typeof(POCO.Subscription))]
        public POCO.Subscription GetSubscriptions()
        {
            POCO.Subscription items = new POCO.Subscription();
            objContext = new DomainContext(new DomainLayer.DomainClass());
            IList responseList = objContext.Load(EntityMapper.Entities.SUBSCRIPTION, DomainMapper.GET_SUBSCRIPTIONS);
            if (responseList != null)
            { if (responseList.Count > 0) { items.lstSubscription = responseList.Cast<POCO.Subscription>().ToList(); } }
            return items;
        }
        //[HttpGet]
        //[Route("api/Subscription/GetSubscriptionsByLocationID/{ID}")]
        //[ResponseType(typeof(POCO.Subscription))]
        //public POCO.Subscription GetSubscriptionsByLocationID(long ID)
        //{
        //    POCO.Subscription items = new POCO.Subscription();
        //    objContext = new DomainContext(new DomainLayer.DomainClass());
        //    objContext.AddField(EntityMapper.Subscription.LOCATION_ID, ID);
        //    IList responseList = objContext.Load(EntityMapper.Entities.SUBSCRIPTION, DomainMapper.GET_SUBSCRIPTION_BY_LOCATION_ID);
        //    if (responseList != null)
        //    { if (responseList.Count > 0) { items.lstSubscription = responseList.Cast<POCO.Subscription>().ToList(); } }
        //    return items;
        //}
        [HttpPost]
        [Route("api/Subscription/AddSubscription")]
        public long AddSubscription(POCO.Subscription entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.Subscription.PLANNAME, entity.PlanName);
                objContext.AddField(EntityMapper.Subscription.STATUS, entity.Status);
                objContext.AddField(EntityMapper.Subscription.IS_ACTIVE, entity.Is_Active);
                objContext.AddField(EntityMapper.Subscription.CREATED_DATE, entity.Created_Date);
                objContext.AddField(EntityMapper.Subscription.CREATED_BY, entity.Created_By);
                objContext.AddField(EntityMapper.Subscription.MODIFIED_DATE, entity.Modified_Date);
                objContext.AddField(EntityMapper.Subscription.MODIFIED_BY, entity.Modified_By);
                objContext.AddField(EntityMapper.Subscription.AUDIT_ID, entity.Audit_Id);
                objContext.AddField(EntityMapper.Subscription.USER_IP, entity.User_IP);
                objContext.AddRecord(EntityMapper.Entities.SUBSCRIPTION);
                objContext.Submit();
                objContext.Insert(UseTransaction.NO);
                return objContext.BusinessObject.ConvertDomainClass().ID;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
        [HttpPost]
        [Route("api/Subscription/UpdateSubscription")]
        public long UpdateSubscription(POCO.Subscription entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.Subscription.SUBSCRIPTIONID, entity.SubscriptionId);
                objContext.AddField(EntityMapper.Subscription.PLANNAME, entity.PlanName);
                objContext.AddField(EntityMapper.Subscription.STATUS, entity.Status);
                objContext.AddField(EntityMapper.Subscription.IS_ACTIVE, entity.Is_Active);
                objContext.AddField(EntityMapper.Subscription.CREATED_DATE, entity.Created_Date);
                objContext.AddField(EntityMapper.Subscription.CREATED_BY, entity.Created_By);
                objContext.AddField(EntityMapper.Subscription.MODIFIED_DATE, entity.Modified_Date);
                objContext.AddField(EntityMapper.Subscription.MODIFIED_BY, entity.Modified_By);
                objContext.AddField(EntityMapper.Subscription.AUDIT_ID, entity.Audit_Id);
                objContext.AddField(EntityMapper.Subscription.USER_IP, entity.User_IP);
                objContext.AddRecord(EntityMapper.Entities.SUBSCRIPTION);
                objContext.Submit();
                objContext.Update(UseTransaction.NO);
                return objContext.BusinessObject.ConvertDomainClass().ID;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
        [HttpPost]
        [Route("api/Subscription/DeleteSubscription")]
        public void DeleteSubscription(POCO.Subscription entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.Subscription.SUBSCRIPTIONID, entity.SubscriptionId);
                objContext.Load(EntityMapper.Entities.SUBSCRIPTION, DomainMapper.GET_SUBSCRIPTION_BY_ID_DATA);
                objContext.AddDeleteEntity(objContext.BusinessObject.DataList[0].ConvertSubscription());
                objContext.Delete(UseTransaction.NO);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
    }
}
/*****************************************************************************************************************/

