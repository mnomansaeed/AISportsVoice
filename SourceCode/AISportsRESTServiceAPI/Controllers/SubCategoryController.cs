/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Monday, November 11, 2024
Time: 7:12:00 AM
TableName: SubCategory
/*****************************************************************************************************************/
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using DomainLayer;
using DataLayer;
using Utility;
using POCO;
using System.Web.Http;
using System.Web.Http.Description;
using System.Diagnostics;
namespace WebAPI
{
/// <summary>
/// Summary description for SubCategoryService
/// </summary>
[Authorize]
public class SubCategoryController : ApiController
{
private EventLog eventLog;
private DomainContext objContext;
public SubCategoryController()
{
eventLog = new EventLog("SubCategoryServiceLog", "localhost", "SubCategoryService");
}
[HttpGet]
[Route("api/SubCategory/GetSubCategoriesByID/{ID}")]
public POCO.SubCategory GetSubCategoriesByID(long ID)
{
POCO.SubCategory items = new POCO.SubCategory();
objContext = new DomainContext(new DomainLayer.DomainClass());
objContext.AddField(EntityMapper.SubCategory.SUBCATEGORYID, ID);
IList responseList = objContext.Load(EntityMapper.Entities.SUBCATEGORY, DomainMapper.GET_SUBCATEGORY_BY_ID);
if (responseList != null)
{ if (responseList.Count > 0) { items = responseList.Cast<POCO.SubCategory>().ToList()[0]; }}
return items;
}
[HttpGet]
[Route("api/SubCategory/GetSubCategories")]
[ResponseType(typeof(POCO.SubCategory))]
public POCO.SubCategory GetSubCategories()
{
POCO.SubCategory items = new POCO.SubCategory();
objContext = new DomainContext(new DomainLayer.DomainClass());
IList responseList = objContext.Load(EntityMapper.Entities.SUBCATEGORY, DomainMapper.GET_SUBCATEGORIES);
if (responseList != null)
{ if (responseList.Count > 0) { items.lstSubCategory = responseList.Cast<POCO.SubCategory>().ToList(); }}
return items;
}
[HttpGet]
[Route("api/SubCategory/GetSubCategoriesByLocationID/{ID}")]
[ResponseType(typeof(POCO.SubCategory))]
public POCO.SubCategory GetSubCategoriesByLocationID(long ID)
{
POCO.SubCategory items = new POCO.SubCategory();
objContext = new DomainContext(new DomainLayer.DomainClass());
objContext.AddField(EntityMapper.SubCategory.LOCATION_ID, ID);
IList responseList = objContext.Load(EntityMapper.Entities.SUBCATEGORY, DomainMapper.GET_SUBCATEGORY_BY_LOCATION_ID);
if (responseList != null)
{ if (responseList.Count > 0) { items.lstSubCategory = responseList.Cast<POCO.SubCategory>().ToList(); }}
return items;
}
[HttpPost]
[Route("api/SubCategory/AddSubCategory")]
public long AddSubCategory(POCO.SubCategory entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.SubCategory.LOCATION_ID, entity.Location_ID);
objContext.AddField(EntityMapper.SubCategory.CATEGORYID, entity.CategoryId);
objContext.AddField(EntityMapper.SubCategory.SUBCATEGORYNAME, entity.SubCategoryName);
objContext.AddField(EntityMapper.SubCategory.DESRIPTION, entity.Desription);
objContext.AddField(EntityMapper.SubCategory.NOTES, entity.Notes);
objContext.AddField(EntityMapper.SubCategory.IS_ACTIVE, entity.Is_Active);
objContext.AddField(EntityMapper.SubCategory.CREATED_DATE, entity.Created_Date);
objContext.AddField(EntityMapper.SubCategory.CREATED_BY, entity.Created_By);
objContext.AddField(EntityMapper.SubCategory.MODIFIED_DATE, entity.Modified_Date);
objContext.AddField(EntityMapper.SubCategory.MODIFIED_BY, entity.Modified_By);
objContext.AddField(EntityMapper.SubCategory.AUDIT_ID, entity.Audit_Id);
objContext.AddField(EntityMapper.SubCategory.USER_IP, entity.User_IP);
objContext.AddField(EntityMapper.SubCategory.SITE_ID, entity.Site_Id);
objContext.AddRecord(EntityMapper.Entities.SUBCATEGORY);
objContext.Submit();
objContext.Insert(UseTransaction.NO);
return objContext.BusinessObject.ConvertDomainClass().ID;
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
[HttpPost]
[Route("api/SubCategory/UpdateSubCategory")]
public long UpdateSubCategory(POCO.SubCategory entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.SubCategory.SUBCATEGORYID, entity.SubCategoryId);
objContext.AddField(EntityMapper.SubCategory.LOCATION_ID, entity.Location_ID);
objContext.AddField(EntityMapper.SubCategory.CATEGORYID, entity.CategoryId);
objContext.AddField(EntityMapper.SubCategory.SUBCATEGORYNAME, entity.SubCategoryName);
objContext.AddField(EntityMapper.SubCategory.DESRIPTION, entity.Desription);
objContext.AddField(EntityMapper.SubCategory.NOTES, entity.Notes);
objContext.AddField(EntityMapper.SubCategory.IS_ACTIVE, entity.Is_Active);
objContext.AddField(EntityMapper.SubCategory.CREATED_DATE, entity.Created_Date);
objContext.AddField(EntityMapper.SubCategory.CREATED_BY, entity.Created_By);
objContext.AddField(EntityMapper.SubCategory.MODIFIED_DATE, entity.Modified_Date);
objContext.AddField(EntityMapper.SubCategory.MODIFIED_BY, entity.Modified_By);
objContext.AddField(EntityMapper.SubCategory.AUDIT_ID, entity.Audit_Id);
objContext.AddField(EntityMapper.SubCategory.USER_IP, entity.User_IP);
objContext.AddField(EntityMapper.SubCategory.SITE_ID, entity.Site_Id);
objContext.AddRecord(EntityMapper.Entities.SUBCATEGORY);
objContext.Submit();
objContext.Update(UseTransaction.NO);
return objContext.BusinessObject.ConvertDomainClass().ID;
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
[HttpPost]
[Route("api/SubCategory/DeleteSubCategory")]
public void DeleteSubCategory(POCO.SubCategory entity)
{
objContext = new DomainContext(new DomainLayer.DomainClass());
try
{
objContext.AddField(EntityMapper.SubCategory.SUBCATEGORYID, entity.SubCategoryId);
objContext.Load(EntityMapper.Entities.SUBCATEGORY, DomainMapper.GET_SUBCATEGORY_BY_ID_DATA);
objContext.AddDeleteEntity(objContext.BusinessObject.DataList[0].ConvertSubCategory());
objContext.Delete(UseTransaction.NO);
}
catch (Exception ex)
{
throw ex;
}
finally
{
objContext = null;
}
}
}
}
/*****************************************************************************************************************/

