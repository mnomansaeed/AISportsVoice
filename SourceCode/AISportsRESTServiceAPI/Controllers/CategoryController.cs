/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Monday, November 11, 2024
Time: 7:12:00 AM
TableName: Category
/*****************************************************************************************************************/
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using DomainLayer;
using DataLayer;
using Utility;
using POCO;
using System.Web.Http;
using System.Web.Http.Description;
using System.Diagnostics;
namespace WebAPI
{
    /// <summary>
    /// Summary description for CategoryService
    /// </summary>
    [Authorize]
    public class CategoryController : ApiController
    {
        private EventLog eventLog;
        private DomainContext objContext;
        public CategoryController()
        {
            eventLog = new EventLog("CategoryServiceLog", "localhost", "CategoryService");
        }
        [HttpGet]
        [Route("api/Category/GetCategoriesByID/{ID}")]
        public POCO.Category GetCategoriesByID(long ID)
        {
            POCO.Category items = new POCO.Category();
            objContext = new DomainContext(new DomainLayer.DomainClass());
            objContext.AddField(EntityMapper.Category.CATEGORYID, ID);
            IList responseList = objContext.Load(EntityMapper.Entities.CATEGORY, DomainMapper.GET_CATEGORY_BY_ID);
            if (responseList != null)
            { if (responseList.Count > 0) { items = responseList.Cast<POCO.Category>().ToList()[0]; } }
            return items;
        }
        [HttpGet]
        [Route("api/Category/GetCategories")]
        [ResponseType(typeof(POCO.Category))]
        public POCO.Category GetCategories()
        {
            POCO.Category items = new POCO.Category();
            objContext = new DomainContext(new DomainLayer.DomainClass());
            IList responseList = objContext.Load(EntityMapper.Entities.CATEGORY, DomainMapper.GET_CATEGORIES);
            if (responseList != null)
            { if (responseList.Count > 0) { items.lstCategory = responseList.Cast<POCO.Category>().ToList(); } }
            return items;
        }
        [HttpGet]
        [Route("api/Category/GetCategoriesByLocationID/{ID}")]
        [ResponseType(typeof(POCO.Category))]
        public POCO.Category GetCategoriesByLocationID(long ID)
        {
            POCO.Category items = new POCO.Category();
            objContext = new DomainContext(new DomainLayer.DomainClass());
            objContext.AddField(EntityMapper.Category.LOCATION_ID, ID);
            IList responseList = objContext.Load(EntityMapper.Entities.CATEGORY, DomainMapper.GET_CATEGORY_BY_LOCATION_ID);
            if (responseList != null)
            { if (responseList.Count > 0) { items.lstCategory = responseList.Cast<POCO.Category>().ToList(); } }
            return items;
        }
        [HttpPost]
        [Route("api/Category/AddCategory")]
        public long AddCategory(POCO.Category entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.Category.LOCATION_ID, entity.Location_ID);
                objContext.AddField(EntityMapper.Category.CATEGORYNAME, entity.CategoryName);
                objContext.AddField(EntityMapper.Category.DESCRIPTION, entity.Description);
                objContext.AddField(EntityMapper.Category.LIFE, entity.Life);
                objContext.AddField(EntityMapper.Category.IS_CHECKOUT, entity.Is_Checkout);
                objContext.AddField(EntityMapper.Category.NOTES, entity.Notes);
                objContext.AddField(EntityMapper.Category.IS_ACTIVE, entity.Is_Active);
                objContext.AddField(EntityMapper.Category.CREATED_DATE, entity.Created_Date);
                objContext.AddField(EntityMapper.Category.CREATED_BY, entity.Created_By);
                objContext.AddField(EntityMapper.Category.MODIFIED_DATE, entity.Modified_Date);
                objContext.AddField(EntityMapper.Category.MODIFIED_BY, entity.Modified_By);
                objContext.AddField(EntityMapper.Category.AUDIT_ID, entity.Audit_Id);
                objContext.AddField(EntityMapper.Category.USER_IP, entity.User_IP);
                objContext.AddField(EntityMapper.Category.SITE_ID, entity.Site_Id);
                objContext.AddRecord(EntityMapper.Entities.CATEGORY);
                objContext.Submit();
                objContext.Insert(UseTransaction.NO);
                return objContext.BusinessObject.ConvertDomainClass().ID;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
        [HttpPost]
        [Route("api/Category/UpdateCategory")]
        public long UpdateCategory(POCO.Category entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.Category.CATEGORYID, entity.CategoryId);
                objContext.AddField(EntityMapper.Category.LOCATION_ID, entity.Location_ID);
                objContext.AddField(EntityMapper.Category.CATEGORYNAME, entity.CategoryName);
                objContext.AddField(EntityMapper.Category.DESCRIPTION, entity.Description);
                objContext.AddField(EntityMapper.Category.LIFE, entity.Life);
                objContext.AddField(EntityMapper.Category.IS_CHECKOUT, entity.Is_Checkout);
                objContext.AddField(EntityMapper.Category.NOTES, entity.Notes);
                objContext.AddField(EntityMapper.Category.IS_ACTIVE, entity.Is_Active);
                objContext.AddField(EntityMapper.Category.CREATED_DATE, entity.Created_Date);
                objContext.AddField(EntityMapper.Category.CREATED_BY, entity.Created_By);
                objContext.AddField(EntityMapper.Category.MODIFIED_DATE, entity.Modified_Date);
                objContext.AddField(EntityMapper.Category.MODIFIED_BY, entity.Modified_By);
                objContext.AddField(EntityMapper.Category.AUDIT_ID, entity.Audit_Id);
                objContext.AddField(EntityMapper.Category.USER_IP, entity.User_IP);
                objContext.AddField(EntityMapper.Category.SITE_ID, entity.Site_Id);
                objContext.AddRecord(EntityMapper.Entities.CATEGORY);
                objContext.Submit();
                objContext.Update(UseTransaction.NO);
                return objContext.BusinessObject.ConvertDomainClass().ID;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
        [HttpPost]
        [Route("api/Category/DeleteCategory")]
        public void DeleteCategory(POCO.Category entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.Category.CATEGORYID, entity.CategoryId);
                objContext.Load(EntityMapper.Entities.CATEGORY, DomainMapper.GET_CATEGORY_BY_ID_DATA);
                objContext.AddDeleteEntity(objContext.BusinessObject.DataList[0].ConvertCategory());
                objContext.Delete(UseTransaction.NO);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
    }
}
/*****************************************************************************************************************/

