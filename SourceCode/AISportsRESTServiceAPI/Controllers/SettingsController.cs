/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Monday, November 11, 2024
Time: 7:12:00 AM
TableName: Settings
/*****************************************************************************************************************/
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using DomainLayer;
using DataLayer;
using Utility;
using POCO;
using System.Web.Http;
using System.Web.Http.Description;
using System.Diagnostics;
namespace WebAPI
{
    /// <summary>
    /// Summary description for SettingsService
    /// </summary>
    [Authorize]
    public class SettingsController : ApiController
    {
        private EventLog eventLog;
        private DomainContext objContext;
        public SettingsController()
        {
            eventLog = new EventLog("SettingsServiceLog", "localhost", "SettingsService");
        }
        [HttpGet]
        [Route("api/Settings/GetSettingsByID/{ID}")]
        public POCO.Settings GetSettingsByID(long ID)
        {
            POCO.Settings items = new POCO.Settings();
            objContext = new DomainContext(new DomainLayer.DomainClass());
            objContext.AddField(EntityMapper.Settings.SETTINGID, ID);
            IList responseList = objContext.Load(EntityMapper.Entities.SETTINGS, DomainMapper.GET_SETTING_BY_ID);
            if (responseList != null)
            { if (responseList.Count > 0) { items = responseList.Cast<POCO.Settings>().ToList()[0]; } }
            return items;
        }
        [HttpGet]
        [Route("api/Settings/GetSettings")]
        [ResponseType(typeof(POCO.Settings))]
        public POCO.Settings GetSettings()
        {
            POCO.Settings items = new POCO.Settings();
            objContext = new DomainContext(new DomainLayer.DomainClass());
            IList responseList = objContext.Load(EntityMapper.Entities.SETTINGS, DomainMapper.GET_SETTINGS);
            if (responseList != null)
            { if (responseList.Count > 0) { items.lstSettings = responseList.Cast<POCO.Settings>().ToList(); } }
            return items;
        }
        //[HttpGet]
        //[Route("api/Settings/GetSettingsByLocationID/{ID}")]
        //[ResponseType(typeof(POCO.Settings))]
        //public POCO.Settings GetSettingsByLocationID(long ID)
        //{
        //    POCO.Settings items = new POCO.Settings();
        //    objContext = new DomainContext(new DomainLayer.DomainClass());
        //    objContext.AddField(EntityMapper.Settings.LOCATION_ID, ID);
        //    IList responseList = objContext.Load(EntityMapper.Entities.SETTINGS, DomainMapper.GET_SETTING_BY_LOCATION_ID);
        //    if (responseList != null)
        //    { if (responseList.Count > 0) { items.lstSettings = responseList.Cast<POCO.Settings>().ToList(); } }
        //    return items;
        //}
        [HttpPost]
        [Route("api/Settings/AddSettings")]
        public long AddSettings(POCO.Settings entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.Settings.SETTINGKEY, entity.SettingKey);
                objContext.AddField(EntityMapper.Settings.SETTINGVALUE, entity.SettingValue);
                objContext.AddField(EntityMapper.Settings.DESCRIPTION, entity.Description);
                objContext.AddField(EntityMapper.Settings.MODULE, entity.Module);
                objContext.AddField(EntityMapper.Settings.DATATYPE, entity.DataType);
                objContext.AddField(EntityMapper.Settings.IS_ACTIVE, entity.Is_Active);
                objContext.AddField(EntityMapper.Settings.CREATED_DATE, entity.Created_Date);
                objContext.AddField(EntityMapper.Settings.CREATED_BY, entity.Created_By);
                objContext.AddField(EntityMapper.Settings.MODIFIED_DATE, entity.Modified_Date);
                objContext.AddField(EntityMapper.Settings.MODIFIED_BY, entity.Modified_By);
                objContext.AddField(EntityMapper.Settings.AUDIT_ID, entity.Audit_Id);
                objContext.AddField(EntityMapper.Settings.USER_IP, entity.User_IP);
                objContext.AddField(EntityMapper.Settings.SITE_ID, entity.Site_Id);
                objContext.AddRecord(EntityMapper.Entities.SETTINGS);
                objContext.Submit();
                objContext.Insert(UseTransaction.NO);
                return objContext.BusinessObject.ConvertDomainClass().ID;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
        [HttpPost]
        [Route("api/Settings/UpdateSettings")]
        public long UpdateSettings(POCO.Settings entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.Settings.SETTINGID, entity.SettingId);
                objContext.AddField(EntityMapper.Settings.SETTINGKEY, entity.SettingKey);
                objContext.AddField(EntityMapper.Settings.SETTINGVALUE, entity.SettingValue);
                objContext.AddField(EntityMapper.Settings.DESCRIPTION, entity.Description);
                objContext.AddField(EntityMapper.Settings.MODULE, entity.Module);
                objContext.AddField(EntityMapper.Settings.DATATYPE, entity.DataType);
                objContext.AddField(EntityMapper.Settings.IS_ACTIVE, entity.Is_Active);
                objContext.AddField(EntityMapper.Settings.CREATED_DATE, entity.Created_Date);
                objContext.AddField(EntityMapper.Settings.CREATED_BY, entity.Created_By);
                objContext.AddField(EntityMapper.Settings.MODIFIED_DATE, entity.Modified_Date);
                objContext.AddField(EntityMapper.Settings.MODIFIED_BY, entity.Modified_By);
                objContext.AddField(EntityMapper.Settings.AUDIT_ID, entity.Audit_Id);
                objContext.AddField(EntityMapper.Settings.USER_IP, entity.User_IP);
                objContext.AddField(EntityMapper.Settings.SITE_ID, entity.Site_Id);
                objContext.AddRecord(EntityMapper.Entities.SETTINGS);
                objContext.Submit();
                objContext.Update(UseTransaction.NO);
                return objContext.BusinessObject.ConvertDomainClass().ID;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
        [HttpPost]
        [Route("api/Settings/DeleteSettings")]
        public void DeleteSettings(POCO.Settings entity)
        {
            objContext = new DomainContext(new DomainLayer.DomainClass());
            try
            {
                objContext.AddField(EntityMapper.Settings.SETTINGID, entity.SettingId);
                objContext.Load(EntityMapper.Entities.SETTINGS, DomainMapper.GET_SETTING_BY_ID_DATA);
                objContext.AddDeleteEntity(objContext.BusinessObject.DataList[0].ConvertSetting());
                objContext.Delete(UseTransaction.NO);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objContext = null;
            }
        }
    }
}
/*****************************************************************************************************************/

