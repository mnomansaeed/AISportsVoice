/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Retraining_Feedback
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Retraining_Feedback: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Feedback_Id=Entity[EntityMapper.Retraining_Feedback.FEEDBACK_ID].ConvertLong();
Location_ID=Entity[EntityMapper.Retraining_Feedback.LOCATION_ID].ConvertInteger();
Commentary_Segment_Id=Entity[EntityMapper.Retraining_Feedback.COMMENTARY_SEGMENT_ID].ConvertLong();
Flag_Type=Entity[EntityMapper.Retraining_Feedback.FLAG_TYPE].ConvertString();
Comments=Entity[EntityMapper.Retraining_Feedback.COMMENTS].ConvertString();
Annotated_By=Entity[EntityMapper.Retraining_Feedback.ANNOTATED_BY].ConvertInteger();
Reviewed=Entity[EntityMapper.Retraining_Feedback.REVIEWED].ConvertDateTime();
Notes=Entity[EntityMapper.Retraining_Feedback.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Retraining_Feedback.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Retraining_Feedback.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Retraining_Feedback.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Retraining_Feedback.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Retraining_Feedback.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Retraining_Feedback.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Retraining_Feedback.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Retraining_Feedback.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Retraining_Feedback.Add(Entity.ConvertRetraining_Feedback());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Retraining_Feedback objEntity = Entity.ConvertRetraining_Feedback();
objDataContext.Retraining_Feedback.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_RETRAINING_FEEDBACKS_DATA:
  var _Result2 = objDataContext.Retraining_Feedback.Select(j =>
new {Feedback_Id = j.Feedback_Id,
Location_ID = j.Location_ID,
Commentary_Segment_Id = j.Commentary_Segment_Id,
Flag_Type = j.Flag_Type,
Comments = j.Comments,
Annotated_By = j.Annotated_By,
Reviewed = j.Reviewed,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_RETRAINING_FEEDBACKS:
  var _Result = objDataContext.Retraining_Feedback.Select(j =>
new POCO.Retraining_Feedback{Feedback_Id = j.Feedback_Id,
Location_ID = j.Location_ID,
Commentary_Segment_Id = j.Commentary_Segment_Id,
Flag_Type = j.Flag_Type,
Comments = j.Comments,
Annotated_By = j.Annotated_By,
Reviewed = j.Reviewed,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_RETRAINING_FEEDBACK_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Retraining_Feedback
where oD.Location_ID==Location_ID
orderby oD.Feedback_Id descending
select new POCO.Retraining_Feedback{Feedback_Id = oD.Feedback_Id,
Location_ID = oD.Location_ID,
Commentary_Segment_Id = oD.Commentary_Segment_Id,
Flag_Type = oD.Flag_Type,
Comments = oD.Comments,
Annotated_By = oD.Annotated_By,
Reviewed = oD.Reviewed,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_RETRAINING_FEEDBACK_BY_ID:
 var _Result1 = (from oD in objDataContext.Retraining_Feedback
where oD.Feedback_Id==Feedback_Id
orderby oD.Feedback_Id descending
select new POCO.Retraining_Feedback{Feedback_Id = oD.Feedback_Id,
Location_ID = oD.Location_ID,
Commentary_Segment_Id = oD.Commentary_Segment_Id,
Flag_Type = oD.Flag_Type,
Comments = oD.Comments,
Annotated_By = oD.Annotated_By,
Reviewed = oD.Reviewed,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_RETRAINING_FEEDBACK_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Retraining_Feedback
where oD.Feedback_Id==Feedback_Id
orderby oD.Feedback_Id descending
select new {oD.Feedback_Id,oD.Location_ID,oD.Commentary_Segment_Id,oD.Flag_Type,oD.Comments,oD.Annotated_By,oD.Reviewed,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Retraining_Feedback objRetraining_Feedback;
foreach (var objRet1 in _Result3)
 {
objRetraining_Feedback = new Retraining_Feedback();
objRetraining_Feedback.Feedback_Id = objRet1.Feedback_Id;
objRetraining_Feedback.Location_ID = objRet1.Location_ID;
objRetraining_Feedback.Commentary_Segment_Id = objRet1.Commentary_Segment_Id;
objRetraining_Feedback.Flag_Type = objRet1.Flag_Type;
objRetraining_Feedback.Comments = objRet1.Comments;
objRetraining_Feedback.Annotated_By = objRet1.Annotated_By;
objRetraining_Feedback.Reviewed = objRet1.Reviewed;
objRetraining_Feedback.Notes = objRet1.Notes;
objRetraining_Feedback.Is_Active = objRet1.Is_Active;
objRetraining_Feedback.Created_Date = objRet1.Created_Date;
objRetraining_Feedback.Created_By = objRet1.Created_By;
objRetraining_Feedback.Modified_Date = objRet1.Modified_Date;
objRetraining_Feedback.Modified_By = objRet1.Modified_By;
objRetraining_Feedback.Audit_Id = objRet1.Audit_Id;
objRetraining_Feedback.User_IP = objRet1.User_IP;
objRetraining_Feedback.Site_Id = objRet1.Site_Id;
objList.Add(objRetraining_Feedback);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Retraining_Feedback objEntity = Entity.ConvertRetraining_Feedback();
objDataContext.Retraining_Feedback.Attach(objEntity);
objDataContext.Retraining_Feedback.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

