/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Customer
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Customer: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
CustomerId=Entity[EntityMapper.Customer.CUSTOMERID].ConvertInteger();
Location_ID=Entity[EntityMapper.Customer.LOCATION_ID].ConvertInteger();
CustomerCode=Entity[EntityMapper.Customer.CUSTOMERCODE].ConvertString();
CustomerName=Entity[EntityMapper.Customer.CUSTOMERNAME].ConvertString();
ContactName=Entity[EntityMapper.Customer.CONTACTNAME].ConvertString();
ContactTitle=Entity[EntityMapper.Customer.CONTACTTITLE].ConvertString();
DateOfBirth=Entity[EntityMapper.Customer.DATEOFBIRTH].ConvertDateTime();
Gender=Entity[EntityMapper.Customer.GENDER].ConvertString();
PhoneNumber=Entity[EntityMapper.Customer.PHONENUMBER].ConvertString();
Email=Entity[EntityMapper.Customer.EMAIL].ConvertString();
AddressLine1=Entity[EntityMapper.Customer.ADDRESSLINE1].ConvertString();
AddressLine2=Entity[EntityMapper.Customer.ADDRESSLINE2].ConvertString();
City=Entity[EntityMapper.Customer.CITY].ConvertString();
State=Entity[EntityMapper.Customer.STATE].ConvertString();
PostalCode=Entity[EntityMapper.Customer.POSTALCODE].ConvertString();
Country=Entity[EntityMapper.Customer.COUNTRY].ConvertString();
WebsiteURL=Entity[EntityMapper.Customer.WEBSITEURL].ConvertString();
CustomerSince=Entity[EntityMapper.Customer.CUSTOMERSINCE].ConvertDateTime();
AccountBalance=Entity[EntityMapper.Customer.ACCOUNTBALANCE].ConvertDecimal();
Notes=Entity[EntityMapper.Customer.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Customer.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Customer.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Customer.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Customer.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Customer.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Customer.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Customer.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Customer.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Customer.Add(Entity.ConvertCustomer());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Customer objEntity = Entity.ConvertCustomer();
objDataContext.Customer.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_CUSTOMERS_DATA:
  var _Result2 = objDataContext.Customer.Select(j =>
new {CustomerId = j.CustomerId,
Location_ID = j.Location_ID,
CustomerCode = j.CustomerCode,
CustomerName = j.CustomerName,
ContactName = j.ContactName,
ContactTitle = j.ContactTitle,
DateOfBirth = j.DateOfBirth,
Gender = j.Gender,
PhoneNumber = j.PhoneNumber,
Email = j.Email,
AddressLine1 = j.AddressLine1,
AddressLine2 = j.AddressLine2,
City = j.City,
State = j.State,
PostalCode = j.PostalCode,
Country = j.Country,
WebsiteURL = j.WebsiteURL,
CustomerSince = j.CustomerSince,
AccountBalance = j.AccountBalance,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_CUSTOMERS:
  var _Result = objDataContext.Customer.Select(j =>
new POCO.Customer{CustomerId = j.CustomerId,
Location_ID = j.Location_ID,
CustomerCode = j.CustomerCode,
CustomerName = j.CustomerName,
ContactName = j.ContactName,
ContactTitle = j.ContactTitle,
DateOfBirth = j.DateOfBirth,
Gender = j.Gender,
PhoneNumber = j.PhoneNumber,
Email = j.Email,
AddressLine1 = j.AddressLine1,
AddressLine2 = j.AddressLine2,
City = j.City,
State = j.State,
PostalCode = j.PostalCode,
Country = j.Country,
WebsiteURL = j.WebsiteURL,
CustomerSince = j.CustomerSince,
AccountBalance = j.AccountBalance,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_CUSTOMER_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Customer
where oD.Location_ID==Location_ID
orderby oD.CustomerId descending
select new POCO.Customer{CustomerId = oD.CustomerId,
Location_ID = oD.Location_ID,
CustomerCode = oD.CustomerCode,
CustomerName = oD.CustomerName,
ContactName = oD.ContactName,
ContactTitle = oD.ContactTitle,
DateOfBirth = oD.DateOfBirth,
Gender = oD.Gender,
PhoneNumber = oD.PhoneNumber,
Email = oD.Email,
AddressLine1 = oD.AddressLine1,
AddressLine2 = oD.AddressLine2,
City = oD.City,
State = oD.State,
PostalCode = oD.PostalCode,
Country = oD.Country,
WebsiteURL = oD.WebsiteURL,
CustomerSince = oD.CustomerSince,
AccountBalance = oD.AccountBalance,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_CUSTOMER_BY_ID:
 var _Result1 = (from oD in objDataContext.Customer
where oD.CustomerId==CustomerId
orderby oD.CustomerId descending
select new POCO.Customer{CustomerId = oD.CustomerId,
Location_ID = oD.Location_ID,
CustomerCode = oD.CustomerCode,
CustomerName = oD.CustomerName,
ContactName = oD.ContactName,
ContactTitle = oD.ContactTitle,
DateOfBirth = oD.DateOfBirth,
Gender = oD.Gender,
PhoneNumber = oD.PhoneNumber,
Email = oD.Email,
AddressLine1 = oD.AddressLine1,
AddressLine2 = oD.AddressLine2,
City = oD.City,
State = oD.State,
PostalCode = oD.PostalCode,
Country = oD.Country,
WebsiteURL = oD.WebsiteURL,
CustomerSince = oD.CustomerSince,
AccountBalance = oD.AccountBalance,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_CUSTOMER_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Customer
where oD.CustomerId==CustomerId
orderby oD.CustomerId descending
select new {oD.CustomerId,oD.Location_ID,oD.CustomerCode,oD.CustomerName,oD.ContactName,oD.ContactTitle,oD.DateOfBirth,oD.Gender,oD.PhoneNumber,oD.Email,oD.AddressLine1,oD.AddressLine2,oD.City,oD.State,oD.PostalCode,oD.Country,oD.WebsiteURL,oD.CustomerSince,oD.AccountBalance,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Customer objCustomer;
foreach (var objCus1 in _Result3)
 {
objCustomer = new Customer();
objCustomer.CustomerId = objCus1.CustomerId;
objCustomer.Location_ID = objCus1.Location_ID;
objCustomer.CustomerCode = objCus1.CustomerCode;
objCustomer.CustomerName = objCus1.CustomerName;
objCustomer.ContactName = objCus1.ContactName;
objCustomer.ContactTitle = objCus1.ContactTitle;
objCustomer.DateOfBirth = objCus1.DateOfBirth;
objCustomer.Gender = objCus1.Gender;
objCustomer.PhoneNumber = objCus1.PhoneNumber;
objCustomer.Email = objCus1.Email;
objCustomer.AddressLine1 = objCus1.AddressLine1;
objCustomer.AddressLine2 = objCus1.AddressLine2;
objCustomer.City = objCus1.City;
objCustomer.State = objCus1.State;
objCustomer.PostalCode = objCus1.PostalCode;
objCustomer.Country = objCus1.Country;
objCustomer.WebsiteURL = objCus1.WebsiteURL;
objCustomer.CustomerSince = objCus1.CustomerSince;
objCustomer.AccountBalance = objCus1.AccountBalance;
objCustomer.Notes = objCus1.Notes;
objCustomer.Is_Active = objCus1.Is_Active;
objCustomer.Created_Date = objCus1.Created_Date;
objCustomer.Created_By = objCus1.Created_By;
objCustomer.Modified_Date = objCus1.Modified_Date;
objCustomer.Modified_By = objCus1.Modified_By;
objCustomer.Audit_Id = objCus1.Audit_Id;
objCustomer.User_IP = objCus1.User_IP;
objCustomer.Site_Id = objCus1.Site_Id;
objList.Add(objCustomer);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Customer objEntity = Entity.ConvertCustomer();
objDataContext.Customer.Attach(objEntity);
objDataContext.Customer.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

