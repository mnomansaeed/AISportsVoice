/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Custom_Audience_Segment
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Custom_Audience_Segment: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Segment_Id=Entity[EntityMapper.Custom_Audience_Segment.SEGMENT_ID].ConvertInteger();
Location_ID=Entity[EntityMapper.Custom_Audience_Segment.LOCATION_ID].ConvertInteger();
Segment_Name=Entity[EntityMapper.Custom_Audience_Segment.SEGMENT_NAME].ConvertString();
Filter_Logic=Entity[EntityMapper.Custom_Audience_Segment.FILTER_LOGIC].ConvertString();
Language_Preference=Entity[EntityMapper.Custom_Audience_Segment.LANGUAGE_PREFERENCE].ConvertString();
Commentary_Mode=Entity[EntityMapper.Custom_Audience_Segment.COMMENTARY_MODE].ConvertString();
Voice_Id=Entity[EntityMapper.Custom_Audience_Segment.VOICE_ID].ConvertInteger();
Notes=Entity[EntityMapper.Custom_Audience_Segment.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Custom_Audience_Segment.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Custom_Audience_Segment.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Custom_Audience_Segment.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Custom_Audience_Segment.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Custom_Audience_Segment.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Custom_Audience_Segment.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Custom_Audience_Segment.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Custom_Audience_Segment.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Custom_Audience_Segment.Add(Entity.ConvertCustom_Audience_Segment());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Custom_Audience_Segment objEntity = Entity.ConvertCustom_Audience_Segment();
objDataContext.Custom_Audience_Segment.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_CUSTOM_AUDIENCE_SEGMENTS_DATA:
  var _Result2 = objDataContext.Custom_Audience_Segment.Select(j =>
new {Segment_Id = j.Segment_Id,
Location_ID = j.Location_ID,
Segment_Name = j.Segment_Name,
Filter_Logic = j.Filter_Logic,
Language_Preference = j.Language_Preference,
Commentary_Mode = j.Commentary_Mode,
Voice_Id = j.Voice_Id,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_CUSTOM_AUDIENCE_SEGMENTS:
  var _Result = objDataContext.Custom_Audience_Segment.Select(j =>
new POCO.Custom_Audience_Segment{Segment_Id = j.Segment_Id,
Location_ID = j.Location_ID,
Segment_Name = j.Segment_Name,
Filter_Logic = j.Filter_Logic,
Language_Preference = j.Language_Preference,
Commentary_Mode = j.Commentary_Mode,
Voice_Id = j.Voice_Id,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_CUSTOM_AUDIENCE_SEGMENT_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Custom_Audience_Segment
where oD.Location_ID==Location_ID
orderby oD.Segment_Id descending
select new POCO.Custom_Audience_Segment{Segment_Id = oD.Segment_Id,
Location_ID = oD.Location_ID,
Segment_Name = oD.Segment_Name,
Filter_Logic = oD.Filter_Logic,
Language_Preference = oD.Language_Preference,
Commentary_Mode = oD.Commentary_Mode,
Voice_Id = oD.Voice_Id,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_CUSTOM_AUDIENCE_SEGMENT_BY_ID:
 var _Result1 = (from oD in objDataContext.Custom_Audience_Segment
where oD.Segment_Id==Segment_Id
orderby oD.Segment_Id descending
select new POCO.Custom_Audience_Segment{Segment_Id = oD.Segment_Id,
Location_ID = oD.Location_ID,
Segment_Name = oD.Segment_Name,
Filter_Logic = oD.Filter_Logic,
Language_Preference = oD.Language_Preference,
Commentary_Mode = oD.Commentary_Mode,
Voice_Id = oD.Voice_Id,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_CUSTOM_AUDIENCE_SEGMENT_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Custom_Audience_Segment
where oD.Segment_Id==Segment_Id
orderby oD.Segment_Id descending
select new {oD.Segment_Id,oD.Location_ID,oD.Segment_Name,oD.Filter_Logic,oD.Language_Preference,oD.Commentary_Mode,oD.Voice_Id,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Custom_Audience_Segment objCustom_Audience_Segment;
foreach (var objCus1 in _Result3)
 {
objCustom_Audience_Segment = new Custom_Audience_Segment();
objCustom_Audience_Segment.Segment_Id = objCus1.Segment_Id;
objCustom_Audience_Segment.Location_ID = objCus1.Location_ID;
objCustom_Audience_Segment.Segment_Name = objCus1.Segment_Name;
objCustom_Audience_Segment.Filter_Logic = objCus1.Filter_Logic;
objCustom_Audience_Segment.Language_Preference = objCus1.Language_Preference;
objCustom_Audience_Segment.Commentary_Mode = objCus1.Commentary_Mode;
objCustom_Audience_Segment.Voice_Id = objCus1.Voice_Id;
objCustom_Audience_Segment.Notes = objCus1.Notes;
objCustom_Audience_Segment.Is_Active = objCus1.Is_Active;
objCustom_Audience_Segment.Created_Date = objCus1.Created_Date;
objCustom_Audience_Segment.Created_By = objCus1.Created_By;
objCustom_Audience_Segment.Modified_Date = objCus1.Modified_Date;
objCustom_Audience_Segment.Modified_By = objCus1.Modified_By;
objCustom_Audience_Segment.Audit_Id = objCus1.Audit_Id;
objCustom_Audience_Segment.User_IP = objCus1.User_IP;
objCustom_Audience_Segment.Site_Id = objCus1.Site_Id;
objList.Add(objCustom_Audience_Segment);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Custom_Audience_Segment objEntity = Entity.ConvertCustom_Audience_Segment();
objDataContext.Custom_Audience_Segment.Attach(objEntity);
objDataContext.Custom_Audience_Segment.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

