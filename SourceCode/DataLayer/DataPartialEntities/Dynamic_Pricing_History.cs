/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Dynamic_Pricing_History
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Dynamic_Pricing_History: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Pricing_Id=Entity[EntityMapper.Dynamic_Pricing_History.PRICING_ID].ConvertLong();
Location_ID=Entity[EntityMapper.Dynamic_Pricing_History.LOCATION_ID].ConvertInteger();
Language_Code=Entity[EntityMapper.Dynamic_Pricing_History.LANGUAGE_CODE].ConvertString();
Match_Id=Entity[EntityMapper.Dynamic_Pricing_History.MATCH_ID].ConvertInteger();
Stream_Type=Entity[EntityMapper.Dynamic_Pricing_History.STREAM_TYPE].ConvertString();
Price_Per_Minute=Entity[EntityMapper.Dynamic_Pricing_History.PRICE_PER_MINUTE].ConvertDecimal();
Applied_At=Entity[EntityMapper.Dynamic_Pricing_History.APPLIED_AT].ConvertDateTime();
Notes=Entity[EntityMapper.Dynamic_Pricing_History.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Dynamic_Pricing_History.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Dynamic_Pricing_History.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Dynamic_Pricing_History.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Dynamic_Pricing_History.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Dynamic_Pricing_History.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Dynamic_Pricing_History.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Dynamic_Pricing_History.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Dynamic_Pricing_History.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Dynamic_Pricing_History.Add(Entity.ConvertDynamic_Pricing_History());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Dynamic_Pricing_History objEntity = Entity.ConvertDynamic_Pricing_History();
objDataContext.Dynamic_Pricing_History.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_DYNAMIC_PRICING_HISTORIES_DATA:
  var _Result2 = objDataContext.Dynamic_Pricing_History.Select(j =>
new {Pricing_Id = j.Pricing_Id,
Location_ID = j.Location_ID,
Language_Code = j.Language_Code,
Match_Id = j.Match_Id,
Stream_Type = j.Stream_Type,
Price_Per_Minute = j.Price_Per_Minute,
Applied_At = j.Applied_At,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_DYNAMIC_PRICING_HISTORIES:
  var _Result = objDataContext.Dynamic_Pricing_History.Select(j =>
new POCO.Dynamic_Pricing_History{Pricing_Id = j.Pricing_Id,
Location_ID = j.Location_ID,
Language_Code = j.Language_Code,
Match_Id = j.Match_Id,
Stream_Type = j.Stream_Type,
Price_Per_Minute = j.Price_Per_Minute,
Applied_At = j.Applied_At,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_DYNAMIC_PRICING_HISTORY_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Dynamic_Pricing_History
where oD.Location_ID==Location_ID
orderby oD.Pricing_Id descending
select new POCO.Dynamic_Pricing_History{Pricing_Id = oD.Pricing_Id,
Location_ID = oD.Location_ID,
Language_Code = oD.Language_Code,
Match_Id = oD.Match_Id,
Stream_Type = oD.Stream_Type,
Price_Per_Minute = oD.Price_Per_Minute,
Applied_At = oD.Applied_At,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_DYNAMIC_PRICING_HISTORY_BY_ID:
 var _Result1 = (from oD in objDataContext.Dynamic_Pricing_History
where oD.Pricing_Id==Pricing_Id
orderby oD.Pricing_Id descending
select new POCO.Dynamic_Pricing_History{Pricing_Id = oD.Pricing_Id,
Location_ID = oD.Location_ID,
Language_Code = oD.Language_Code,
Match_Id = oD.Match_Id,
Stream_Type = oD.Stream_Type,
Price_Per_Minute = oD.Price_Per_Minute,
Applied_At = oD.Applied_At,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_DYNAMIC_PRICING_HISTORY_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Dynamic_Pricing_History
where oD.Pricing_Id==Pricing_Id
orderby oD.Pricing_Id descending
select new {oD.Pricing_Id,oD.Location_ID,oD.Language_Code,oD.Match_Id,oD.Stream_Type,oD.Price_Per_Minute,oD.Applied_At,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Dynamic_Pricing_History objDynamic_Pricing_History;
foreach (var objDyn1 in _Result3)
 {
objDynamic_Pricing_History = new Dynamic_Pricing_History();
objDynamic_Pricing_History.Pricing_Id = objDyn1.Pricing_Id;
objDynamic_Pricing_History.Location_ID = objDyn1.Location_ID;
objDynamic_Pricing_History.Language_Code = objDyn1.Language_Code;
objDynamic_Pricing_History.Match_Id = objDyn1.Match_Id;
objDynamic_Pricing_History.Stream_Type = objDyn1.Stream_Type;
objDynamic_Pricing_History.Price_Per_Minute = objDyn1.Price_Per_Minute;
objDynamic_Pricing_History.Applied_At = objDyn1.Applied_At;
objDynamic_Pricing_History.Notes = objDyn1.Notes;
objDynamic_Pricing_History.Is_Active = objDyn1.Is_Active;
objDynamic_Pricing_History.Created_Date = objDyn1.Created_Date;
objDynamic_Pricing_History.Created_By = objDyn1.Created_By;
objDynamic_Pricing_History.Modified_Date = objDyn1.Modified_Date;
objDynamic_Pricing_History.Modified_By = objDyn1.Modified_By;
objDynamic_Pricing_History.Audit_Id = objDyn1.Audit_Id;
objDynamic_Pricing_History.User_IP = objDyn1.User_IP;
objDynamic_Pricing_History.Site_Id = objDyn1.Site_Id;
objList.Add(objDynamic_Pricing_History);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Dynamic_Pricing_History objEntity = Entity.ConvertDynamic_Pricing_History();
objDataContext.Dynamic_Pricing_History.Attach(objEntity);
objDataContext.Dynamic_Pricing_History.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

