/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Model_Training_Job
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Model_Training_Job: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Job_Id=Entity[EntityMapper.Model_Training_Job.JOB_ID].ConvertLong();
Location_ID=Entity[EntityMapper.Model_Training_Job.LOCATION_ID].ConvertInteger();
Model_Id=Entity[EntityMapper.Model_Training_Job.MODEL_ID].ConvertInteger();
Start_Time=Entity[EntityMapper.Model_Training_Job.START_TIME].ConvertDateTime();
End_Time=Entity[EntityMapper.Model_Training_Job.END_TIME].ConvertDateTime();
Status=Entity[EntityMapper.Model_Training_Job.STATUS].ConvertString();
Triggered_By=Entity[EntityMapper.Model_Training_Job.TRIGGERED_BY].ConvertInteger();
Notes=Entity[EntityMapper.Model_Training_Job.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Model_Training_Job.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Model_Training_Job.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Model_Training_Job.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Model_Training_Job.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Model_Training_Job.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Model_Training_Job.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Model_Training_Job.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Model_Training_Job.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Model_Training_Job.Add(Entity.ConvertModel_Training_Job());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Model_Training_Job objEntity = Entity.ConvertModel_Training_Job();
objDataContext.Model_Training_Job.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_MODEL_TRAINING_JOBS_DATA:
  var _Result2 = objDataContext.Model_Training_Job.Select(j =>
new {Job_Id = j.Job_Id,
Location_ID = j.Location_ID,
Model_Id = j.Model_Id,
Start_Time = j.Start_Time,
End_Time = j.End_Time,
Status = j.Status,
Triggered_By = j.Triggered_By,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_MODEL_TRAINING_JOBS:
  var _Result = objDataContext.Model_Training_Job.Select(j =>
new POCO.Model_Training_Job{Job_Id = j.Job_Id,
Location_ID = j.Location_ID,
Model_Id = j.Model_Id,
Start_Time = j.Start_Time,
End_Time = j.End_Time,
Status = j.Status,
Triggered_By = j.Triggered_By,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_MODEL_TRAINING_JOB_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Model_Training_Job
where oD.Location_ID==Location_ID
orderby oD.Job_Id descending
select new POCO.Model_Training_Job{Job_Id = oD.Job_Id,
Location_ID = oD.Location_ID,
Model_Id = oD.Model_Id,
Start_Time = oD.Start_Time,
End_Time = oD.End_Time,
Status = oD.Status,
Triggered_By = oD.Triggered_By,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_MODEL_TRAINING_JOB_BY_ID:
 var _Result1 = (from oD in objDataContext.Model_Training_Job
where oD.Job_Id==Job_Id
orderby oD.Job_Id descending
select new POCO.Model_Training_Job{Job_Id = oD.Job_Id,
Location_ID = oD.Location_ID,
Model_Id = oD.Model_Id,
Start_Time = oD.Start_Time,
End_Time = oD.End_Time,
Status = oD.Status,
Triggered_By = oD.Triggered_By,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_MODEL_TRAINING_JOB_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Model_Training_Job
where oD.Job_Id==Job_Id
orderby oD.Job_Id descending
select new {oD.Job_Id,oD.Location_ID,oD.Model_Id,oD.Start_Time,oD.End_Time,oD.Status,oD.Triggered_By,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Model_Training_Job objModel_Training_Job;
foreach (var objMod1 in _Result3)
 {
objModel_Training_Job = new Model_Training_Job();
objModel_Training_Job.Job_Id = objMod1.Job_Id;
objModel_Training_Job.Location_ID = objMod1.Location_ID;
objModel_Training_Job.Model_Id = objMod1.Model_Id;
objModel_Training_Job.Start_Time = objMod1.Start_Time;
objModel_Training_Job.End_Time = objMod1.End_Time;
objModel_Training_Job.Status = objMod1.Status;
objModel_Training_Job.Triggered_By = objMod1.Triggered_By;
objModel_Training_Job.Notes = objMod1.Notes;
objModel_Training_Job.Is_Active = objMod1.Is_Active;
objModel_Training_Job.Created_Date = objMod1.Created_Date;
objModel_Training_Job.Created_By = objMod1.Created_By;
objModel_Training_Job.Modified_Date = objMod1.Modified_Date;
objModel_Training_Job.Modified_By = objMod1.Modified_By;
objModel_Training_Job.Audit_Id = objMod1.Audit_Id;
objModel_Training_Job.User_IP = objMod1.User_IP;
objModel_Training_Job.Site_Id = objMod1.Site_Id;
objList.Add(objModel_Training_Job);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Model_Training_Job objEntity = Entity.ConvertModel_Training_Job();
objDataContext.Model_Training_Job.Attach(objEntity);
objDataContext.Model_Training_Job.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

