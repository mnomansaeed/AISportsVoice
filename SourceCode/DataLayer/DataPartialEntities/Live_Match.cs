/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Live_Match
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Live_Match: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Match_Id=Entity[EntityMapper.Live_Match.MATCH_ID].ConvertInteger();
Location_ID=Entity[EntityMapper.Live_Match.LOCATION_ID].ConvertInteger();
Sport_Type=Entity[EntityMapper.Live_Match.SPORT_TYPE].ConvertString();
Home_Team=Entity[EntityMapper.Live_Match.HOME_TEAM].ConvertString();
Away_Team=Entity[EntityMapper.Live_Match.AWAY_TEAM].ConvertString();
Match_Date=Entity[EntityMapper.Live_Match.MATCH_DATE].ConvertDateTime();
Broadcast_URL=Entity[EntityMapper.Live_Match.BROADCAST_URL].ConvertString();
Notes=Entity[EntityMapper.Live_Match.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Live_Match.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Live_Match.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Live_Match.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Live_Match.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Live_Match.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Live_Match.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Live_Match.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Live_Match.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Live_Match.Add(Entity.ConvertLive_Match());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Live_Match objEntity = Entity.ConvertLive_Match();
objDataContext.Live_Match.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_LIVE_MATCHES_DATA:
  var _Result2 = objDataContext.Live_Match.Select(j =>
new {Match_Id = j.Match_Id,
Location_ID = j.Location_ID,
Sport_Type = j.Sport_Type,
Home_Team = j.Home_Team,
Away_Team = j.Away_Team,
Match_Date = j.Match_Date,
Broadcast_URL = j.Broadcast_URL,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_LIVE_MATCHES:
  var _Result = objDataContext.Live_Match.Select(j =>
new POCO.Live_Match{Match_Id = j.Match_Id,
Location_ID = j.Location_ID,
Sport_Type = j.Sport_Type,
Home_Team = j.Home_Team,
Away_Team = j.Away_Team,
Match_Date = j.Match_Date,
Broadcast_URL = j.Broadcast_URL,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_LIVE_MATCH_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Live_Match
where oD.Location_ID==Location_ID
orderby oD.Match_Id descending
select new POCO.Live_Match{Match_Id = oD.Match_Id,
Location_ID = oD.Location_ID,
Sport_Type = oD.Sport_Type,
Home_Team = oD.Home_Team,
Away_Team = oD.Away_Team,
Match_Date = oD.Match_Date,
Broadcast_URL = oD.Broadcast_URL,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_LIVE_MATCH_BY_ID:
 var _Result1 = (from oD in objDataContext.Live_Match
where oD.Match_Id==Match_Id
orderby oD.Match_Id descending
select new POCO.Live_Match{Match_Id = oD.Match_Id,
Location_ID = oD.Location_ID,
Sport_Type = oD.Sport_Type,
Home_Team = oD.Home_Team,
Away_Team = oD.Away_Team,
Match_Date = oD.Match_Date,
Broadcast_URL = oD.Broadcast_URL,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_LIVE_MATCH_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Live_Match
where oD.Match_Id==Match_Id
orderby oD.Match_Id descending
select new {oD.Match_Id,oD.Location_ID,oD.Sport_Type,oD.Home_Team,oD.Away_Team,oD.Match_Date,oD.Broadcast_URL,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Live_Match objLive_Match;
foreach (var objLiv1 in _Result3)
 {
objLive_Match = new Live_Match();
objLive_Match.Match_Id = objLiv1.Match_Id;
objLive_Match.Location_ID = objLiv1.Location_ID;
objLive_Match.Sport_Type = objLiv1.Sport_Type;
objLive_Match.Home_Team = objLiv1.Home_Team;
objLive_Match.Away_Team = objLiv1.Away_Team;
objLive_Match.Match_Date = objLiv1.Match_Date;
objLive_Match.Broadcast_URL = objLiv1.Broadcast_URL;
objLive_Match.Notes = objLiv1.Notes;
objLive_Match.Is_Active = objLiv1.Is_Active;
objLive_Match.Created_Date = objLiv1.Created_Date;
objLive_Match.Created_By = objLiv1.Created_By;
objLive_Match.Modified_Date = objLiv1.Modified_Date;
objLive_Match.Modified_By = objLiv1.Modified_By;
objLive_Match.Audit_Id = objLiv1.Audit_Id;
objLive_Match.User_IP = objLiv1.User_IP;
objLive_Match.Site_Id = objLiv1.Site_Id;
objList.Add(objLive_Match);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Live_Match objEntity = Entity.ConvertLive_Match();
objDataContext.Live_Match.Attach(objEntity);
objDataContext.Live_Match.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

