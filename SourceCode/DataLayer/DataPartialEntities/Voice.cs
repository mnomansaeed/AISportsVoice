/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Voice
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Voice: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Voice_Id=Entity[EntityMapper.Voice.VOICE_ID].ConvertInteger();
Location_ID=Entity[EntityMapper.Voice.LOCATION_ID].ConvertInteger();
Language_Code=Entity[EntityMapper.Voice.LANGUAGE_CODE].ConvertString();
Voice_Name=Entity[EntityMapper.Voice.VOICE_NAME].ConvertString();
Gender=Entity[EntityMapper.Voice.GENDER].ConvertString();
Emotion_Support=Entity[EntityMapper.Voice.EMOTION_SUPPORT].ConvertBoolean();
TTS_Engine=Entity[EntityMapper.Voice.TTS_ENGINE].ConvertString();
Is_Beta=Entity[EntityMapper.Voice.IS_BETA].ConvertBoolean();
Notes=Entity[EntityMapper.Voice.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Voice.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Voice.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Voice.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Voice.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Voice.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Voice.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Voice.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Voice.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Voice.Add(Entity.ConvertVoice());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Voice objEntity = Entity.ConvertVoice();
objDataContext.Voice.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_VOICES_DATA:
  var _Result2 = objDataContext.Voice.Select(j =>
new {Voice_Id = j.Voice_Id,
Location_ID = j.Location_ID,
Language_Code = j.Language_Code,
Voice_Name = j.Voice_Name,
Gender = j.Gender,
Emotion_Support = j.Emotion_Support,
TTS_Engine = j.TTS_Engine,
Is_Beta = j.Is_Beta,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_VOICES:
  var _Result = objDataContext.Voice.Select(j =>
new POCO.Voice{Voice_Id = j.Voice_Id,
Location_ID = j.Location_ID,
Language_Code = j.Language_Code,
Voice_Name = j.Voice_Name,
Gender = j.Gender,
Emotion_Support = j.Emotion_Support,
TTS_Engine = j.TTS_Engine,
Is_Beta = j.Is_Beta,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_VOICE_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Voice
where oD.Location_ID==Location_ID
orderby oD.Voice_Id descending
select new POCO.Voice{Voice_Id = oD.Voice_Id,
Location_ID = oD.Location_ID,
Language_Code = oD.Language_Code,
Voice_Name = oD.Voice_Name,
Gender = oD.Gender,
Emotion_Support = oD.Emotion_Support,
TTS_Engine = oD.TTS_Engine,
Is_Beta = oD.Is_Beta,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_VOICE_BY_ID:
 var _Result1 = (from oD in objDataContext.Voice
where oD.Voice_Id==Voice_Id
orderby oD.Voice_Id descending
select new POCO.Voice{Voice_Id = oD.Voice_Id,
Location_ID = oD.Location_ID,
Language_Code = oD.Language_Code,
Voice_Name = oD.Voice_Name,
Gender = oD.Gender,
Emotion_Support = oD.Emotion_Support,
TTS_Engine = oD.TTS_Engine,
Is_Beta = oD.Is_Beta,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_VOICE_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Voice
where oD.Voice_Id==Voice_Id
orderby oD.Voice_Id descending
select new {oD.Voice_Id,oD.Location_ID,oD.Language_Code,oD.Voice_Name,oD.Gender,oD.Emotion_Support,oD.TTS_Engine,oD.Is_Beta,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Voice objVoice;
foreach (var objVoi1 in _Result3)
 {
objVoice = new Voice();
objVoice.Voice_Id = objVoi1.Voice_Id;
objVoice.Location_ID = objVoi1.Location_ID;
objVoice.Language_Code = objVoi1.Language_Code;
objVoice.Voice_Name = objVoi1.Voice_Name;
objVoice.Gender = objVoi1.Gender;
objVoice.Emotion_Support = objVoi1.Emotion_Support;
objVoice.TTS_Engine = objVoi1.TTS_Engine;
objVoice.Is_Beta = objVoi1.Is_Beta;
objVoice.Notes = objVoi1.Notes;
objVoice.Is_Active = objVoi1.Is_Active;
objVoice.Created_Date = objVoi1.Created_Date;
objVoice.Created_By = objVoi1.Created_By;
objVoice.Modified_Date = objVoi1.Modified_Date;
objVoice.Modified_By = objVoi1.Modified_By;
objVoice.Audit_Id = objVoi1.Audit_Id;
objVoice.User_IP = objVoi1.User_IP;
objVoice.Site_Id = objVoi1.Site_Id;
objList.Add(objVoice);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Voice objEntity = Entity.ConvertVoice();
objDataContext.Voice.Attach(objEntity);
objDataContext.Voice.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

