/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: SubCategory
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class SubCategory: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
SubCategoryId=Entity[EntityMapper.SubCategory.SUBCATEGORYID].ConvertInteger();
Location_ID=Entity[EntityMapper.SubCategory.LOCATION_ID].ConvertInteger();
CategoryId=Entity[EntityMapper.SubCategory.CATEGORYID].ConvertInteger();
SubCategoryName=Entity[EntityMapper.SubCategory.SUBCATEGORYNAME].ConvertString();
Desription=Entity[EntityMapper.SubCategory.DESRIPTION].ConvertString();
Notes=Entity[EntityMapper.SubCategory.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.SubCategory.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.SubCategory.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.SubCategory.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.SubCategory.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.SubCategory.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.SubCategory.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.SubCategory.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.SubCategory.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.SubCategory.Add(Entity.ConvertSubCategory());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
SubCategory objEntity = Entity.ConvertSubCategory();
objDataContext.SubCategory.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_SUBCATEGORIES_DATA:
  var _Result2 = objDataContext.SubCategory.Select(j =>
new {SubCategoryId = j.SubCategoryId,
Location_ID = j.Location_ID,
CategoryId = j.CategoryId,
SubCategoryName = j.SubCategoryName,
Desription = j.Desription,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_SUBCATEGORIES:
  var _Result = objDataContext.SubCategory.Select(j =>
new POCO.SubCategory{SubCategoryId = j.SubCategoryId,
Location_ID = j.Location_ID,
CategoryId = j.CategoryId,
SubCategoryName = j.SubCategoryName,
Desription = j.Desription,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_SUBCATEGORY_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.SubCategory
where oD.Location_ID==Location_ID
orderby oD.SubCategoryId descending
select new POCO.SubCategory{SubCategoryId = oD.SubCategoryId,
Location_ID = oD.Location_ID,
CategoryId = oD.CategoryId,
SubCategoryName = oD.SubCategoryName,
Desription = oD.Desription,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_SUBCATEGORY_BY_ID:
 var _Result1 = (from oD in objDataContext.SubCategory
where oD.SubCategoryId==SubCategoryId
orderby oD.SubCategoryId descending
select new POCO.SubCategory{SubCategoryId = oD.SubCategoryId,
Location_ID = oD.Location_ID,
CategoryId = oD.CategoryId,
SubCategoryName = oD.SubCategoryName,
Desription = oD.Desription,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_SUBCATEGORY_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.SubCategory
where oD.SubCategoryId==SubCategoryId
orderby oD.SubCategoryId descending
select new {oD.SubCategoryId,oD.Location_ID,oD.CategoryId,oD.SubCategoryName,oD.Desription,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
SubCategory objSubCategory;
foreach (var objSub1 in _Result3)
 {
objSubCategory = new SubCategory();
objSubCategory.SubCategoryId = objSub1.SubCategoryId;
objSubCategory.Location_ID = objSub1.Location_ID;
objSubCategory.CategoryId = objSub1.CategoryId;
objSubCategory.SubCategoryName = objSub1.SubCategoryName;
objSubCategory.Desription = objSub1.Desription;
objSubCategory.Notes = objSub1.Notes;
objSubCategory.Is_Active = objSub1.Is_Active;
objSubCategory.Created_Date = objSub1.Created_Date;
objSubCategory.Created_By = objSub1.Created_By;
objSubCategory.Modified_Date = objSub1.Modified_Date;
objSubCategory.Modified_By = objSub1.Modified_By;
objSubCategory.Audit_Id = objSub1.Audit_Id;
objSubCategory.User_IP = objSub1.User_IP;
objSubCategory.Site_Id = objSub1.Site_Id;
objList.Add(objSubCategory);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
SubCategory objEntity = Entity.ConvertSubCategory();
objDataContext.SubCategory.Attach(objEntity);
objDataContext.SubCategory.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

