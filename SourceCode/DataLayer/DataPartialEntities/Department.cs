/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Department
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Department: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
DepartmentId=Entity[EntityMapper.Department.DEPARTMENTID].ConvertInteger();
Location_ID=Entity[EntityMapper.Department.LOCATION_ID].ConvertInteger();
DepartmentName=Entity[EntityMapper.Department.DEPARTMENTNAME].ConvertString();
DepartmentCode=Entity[EntityMapper.Department.DEPARTMENTCODE].ConvertString();
ParentID=Entity[EntityMapper.Department.PARENTID].ConvertInteger();
ManagerID=Entity[EntityMapper.Department.MANAGERID].ConvertInteger();
PhoneNumber=Entity[EntityMapper.Department.PHONENUMBER].ConvertString();
Email=Entity[EntityMapper.Department.EMAIL].ConvertString();
Budget=Entity[EntityMapper.Department.BUDGET].ConvertDecimal();
EstablishedDate=Entity[EntityMapper.Department.ESTABLISHEDDATE].ConvertDateTime();
Status=Entity[EntityMapper.Department.STATUS].ConvertString();
CreatedAt=Entity[EntityMapper.Department.CREATEDAT].ConvertDateTime();
CreatedBy=Entity[EntityMapper.Department.CREATEDBY].ConvertString();
ModifiedAt=Entity[EntityMapper.Department.MODIFIEDAT].ConvertDateTime();
ModifiedBy=Entity[EntityMapper.Department.MODIFIEDBY].ConvertString();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Department.Add(Entity.ConvertDepartment());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Department objEntity = Entity.ConvertDepartment();
objDataContext.Department.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_DEPARTMENTS_DATA:
  var _Result2 = objDataContext.Department.Select(j =>
new {DepartmentId = j.DepartmentId,
Location_ID = j.Location_ID,
DepartmentName = j.DepartmentName,
DepartmentCode = j.DepartmentCode,
ParentID = j.ParentID,
ManagerID = j.ManagerID,
PhoneNumber = j.PhoneNumber,
Email = j.Email,
Budget = j.Budget,
EstablishedDate = j.EstablishedDate,
Status = j.Status,
CreatedAt = j.CreatedAt,
CreatedBy = j.CreatedBy,
ModifiedAt = j.ModifiedAt,
ModifiedBy = j.ModifiedBy
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_DEPARTMENTS:
  var _Result = objDataContext.Department.Select(j =>
new POCO.Department{DepartmentId = j.DepartmentId,
Location_ID = j.Location_ID,
DepartmentName = j.DepartmentName,
DepartmentCode = j.DepartmentCode,
ParentID = j.ParentID,
ManagerID = j.ManagerID,
PhoneNumber = j.PhoneNumber,
Email = j.Email,
Budget = j.Budget,
EstablishedDate = j.EstablishedDate,
Status = j.Status,
CreatedAt = j.CreatedAt,
CreatedBy = j.CreatedBy,
ModifiedAt = j.ModifiedAt,
ModifiedBy = j.ModifiedBy
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_DEPARTMENT_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Department
where oD.Location_ID==Location_ID
orderby oD.DepartmentId descending
select new POCO.Department{DepartmentId = oD.DepartmentId,
Location_ID = oD.Location_ID,
DepartmentName = oD.DepartmentName,
DepartmentCode = oD.DepartmentCode,
ParentID = oD.ParentID,
ManagerID = oD.ManagerID,
PhoneNumber = oD.PhoneNumber,
Email = oD.Email,
Budget = oD.Budget,
EstablishedDate = oD.EstablishedDate,
Status = oD.Status,
CreatedAt = oD.CreatedAt,
CreatedBy = oD.CreatedBy,
ModifiedAt = oD.ModifiedAt,
ModifiedBy = oD.ModifiedBy
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_DEPARTMENT_BY_ID:
 var _Result1 = (from oD in objDataContext.Department
where oD.DepartmentId==DepartmentId
orderby oD.DepartmentId descending
select new POCO.Department{DepartmentId = oD.DepartmentId,
Location_ID = oD.Location_ID,
DepartmentName = oD.DepartmentName,
DepartmentCode = oD.DepartmentCode,
ParentID = oD.ParentID,
ManagerID = oD.ManagerID,
PhoneNumber = oD.PhoneNumber,
Email = oD.Email,
Budget = oD.Budget,
EstablishedDate = oD.EstablishedDate,
Status = oD.Status,
CreatedAt = oD.CreatedAt,
CreatedBy = oD.CreatedBy,
ModifiedAt = oD.ModifiedAt,
ModifiedBy = oD.ModifiedBy
}).ToList();
return _Result1;
case DomainMapper.GET_DEPARTMENT_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Department
where oD.DepartmentId==DepartmentId
orderby oD.DepartmentId descending
select new {oD.DepartmentId,oD.Location_ID,oD.DepartmentName,oD.DepartmentCode,oD.ParentID,oD.ManagerID,oD.PhoneNumber,oD.Email,oD.Budget,oD.EstablishedDate,oD.Status,oD.CreatedAt,oD.CreatedBy,oD.ModifiedAt,oD.ModifiedBy };
ArrayList objList = new ArrayList();
Department objDepartment;
foreach (var objDep1 in _Result3)
 {
objDepartment = new Department();
objDepartment.DepartmentId = objDep1.DepartmentId;
objDepartment.Location_ID = objDep1.Location_ID;
objDepartment.DepartmentName = objDep1.DepartmentName;
objDepartment.DepartmentCode = objDep1.DepartmentCode;
objDepartment.ParentID = objDep1.ParentID;
objDepartment.ManagerID = objDep1.ManagerID;
objDepartment.PhoneNumber = objDep1.PhoneNumber;
objDepartment.Email = objDep1.Email;
objDepartment.Budget = objDep1.Budget;
objDepartment.EstablishedDate = objDep1.EstablishedDate;
objDepartment.Status = objDep1.Status;
objDepartment.CreatedAt = objDep1.CreatedAt;
objDepartment.CreatedBy = objDep1.CreatedBy;
objDepartment.ModifiedAt = objDep1.ModifiedAt;
objDepartment.ModifiedBy = objDep1.ModifiedBy;
objList.Add(objDepartment);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Department objEntity = Entity.ConvertDepartment();
objDataContext.Department.Attach(objEntity);
objDataContext.Department.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

