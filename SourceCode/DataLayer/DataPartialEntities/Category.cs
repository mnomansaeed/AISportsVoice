/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Category
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Category: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
CategoryId=Entity[EntityMapper.Category.CATEGORYID].ConvertInteger();
Location_ID=Entity[EntityMapper.Category.LOCATION_ID].ConvertInteger();
CategoryName=Entity[EntityMapper.Category.CATEGORYNAME].ConvertString();
Description=Entity[EntityMapper.Category.DESCRIPTION].ConvertString();
Life=Entity[EntityMapper.Category.LIFE].ConvertInteger();
Is_Checkout=Entity[EntityMapper.Category.IS_CHECKOUT].ConvertString();
Notes=Entity[EntityMapper.Category.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Category.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Category.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Category.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Category.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Category.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Category.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Category.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Category.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Category.Add(Entity.ConvertCategory());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Category objEntity = Entity.ConvertCategory();
objDataContext.Category.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_CATEGORIES_DATA:
  var _Result2 = objDataContext.Category.Select(j =>
new {CategoryId = j.CategoryId,
Location_ID = j.Location_ID,
CategoryName = j.CategoryName,
Description = j.Description,
Life = j.Life,
Is_Checkout = j.Is_Checkout,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_CATEGORIES:
  var _Result = objDataContext.Category.Select(j =>
new POCO.Category{CategoryId = j.CategoryId,
Location_ID = j.Location_ID,
CategoryName = j.CategoryName,
Description = j.Description,
Life = j.Life,
Is_Checkout = j.Is_Checkout,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_CATEGORY_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Category
where oD.Location_ID==Location_ID
orderby oD.CategoryId descending
select new POCO.Category{CategoryId = oD.CategoryId,
Location_ID = oD.Location_ID,
CategoryName = oD.CategoryName,
Description = oD.Description,
Life = oD.Life,
Is_Checkout = oD.Is_Checkout,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_CATEGORY_BY_ID:
 var _Result1 = (from oD in objDataContext.Category
where oD.CategoryId==CategoryId
orderby oD.CategoryId descending
select new POCO.Category{CategoryId = oD.CategoryId,
Location_ID = oD.Location_ID,
CategoryName = oD.CategoryName,
Description = oD.Description,
Life = oD.Life,
Is_Checkout = oD.Is_Checkout,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_CATEGORY_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Category
where oD.CategoryId==CategoryId
orderby oD.CategoryId descending
select new {oD.CategoryId,oD.Location_ID,oD.CategoryName,oD.Description,oD.Life,oD.Is_Checkout,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Category objCategory;
foreach (var objCat1 in _Result3)
 {
objCategory = new Category();
objCategory.CategoryId = objCat1.CategoryId;
objCategory.Location_ID = objCat1.Location_ID;
objCategory.CategoryName = objCat1.CategoryName;
objCategory.Description = objCat1.Description;
objCategory.Life = objCat1.Life;
objCategory.Is_Checkout = objCat1.Is_Checkout;
objCategory.Notes = objCat1.Notes;
objCategory.Is_Active = objCat1.Is_Active;
objCategory.Created_Date = objCat1.Created_Date;
objCategory.Created_By = objCat1.Created_By;
objCategory.Modified_Date = objCat1.Modified_Date;
objCategory.Modified_By = objCat1.Modified_By;
objCategory.Audit_Id = objCat1.Audit_Id;
objCategory.User_IP = objCat1.User_IP;
objCategory.Site_Id = objCat1.Site_Id;
objList.Add(objCategory);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Category objEntity = Entity.ConvertCategory();
objDataContext.Category.Attach(objEntity);
objDataContext.Category.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

