/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Manufacturer
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Manufacturer: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
ManufacturerId=Entity[EntityMapper.Manufacturer.MANUFACTURERID].ConvertInteger();
Location_ID=Entity[EntityMapper.Manufacturer.LOCATION_ID].ConvertInteger();
ManufacturerCode=Entity[EntityMapper.Manufacturer.MANUFACTURERCODE].ConvertString();
ManufacturerName=Entity[EntityMapper.Manufacturer.MANUFACTURERNAME].ConvertString();
ContactName=Entity[EntityMapper.Manufacturer.CONTACTNAME].ConvertString();
ContactTitle=Entity[EntityMapper.Manufacturer.CONTACTTITLE].ConvertString();
PhoneNumber=Entity[EntityMapper.Manufacturer.PHONENUMBER].ConvertString();
Email=Entity[EntityMapper.Manufacturer.EMAIL].ConvertString();
AddressLine1=Entity[EntityMapper.Manufacturer.ADDRESSLINE1].ConvertString();
AddressLine2=Entity[EntityMapper.Manufacturer.ADDRESSLINE2].ConvertString();
City=Entity[EntityMapper.Manufacturer.CITY].ConvertString();
State=Entity[EntityMapper.Manufacturer.STATE].ConvertString();
PostalCode=Entity[EntityMapper.Manufacturer.POSTALCODE].ConvertString();
Country=Entity[EntityMapper.Manufacturer.COUNTRY].ConvertString();
WebsiteURL=Entity[EntityMapper.Manufacturer.WEBSITEURL].ConvertString();
Notes=Entity[EntityMapper.Manufacturer.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Manufacturer.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Manufacturer.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Manufacturer.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Manufacturer.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Manufacturer.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Manufacturer.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Manufacturer.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Manufacturer.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Manufacturer.Add(Entity.ConvertManufacturer());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Manufacturer objEntity = Entity.ConvertManufacturer();
objDataContext.Manufacturer.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_MANUFACTURERS_DATA:
  var _Result2 = objDataContext.Manufacturer.Select(j =>
new {ManufacturerId = j.ManufacturerId,
Location_ID = j.Location_ID,
ManufacturerCode = j.ManufacturerCode,
ManufacturerName = j.ManufacturerName,
ContactName = j.ContactName,
ContactTitle = j.ContactTitle,
PhoneNumber = j.PhoneNumber,
Email = j.Email,
AddressLine1 = j.AddressLine1,
AddressLine2 = j.AddressLine2,
City = j.City,
State = j.State,
PostalCode = j.PostalCode,
Country = j.Country,
WebsiteURL = j.WebsiteURL,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_MANUFACTURERS:
  var _Result = objDataContext.Manufacturer.Select(j =>
new POCO.Manufacturer{ManufacturerId = j.ManufacturerId,
Location_ID = j.Location_ID,
ManufacturerCode = j.ManufacturerCode,
ManufacturerName = j.ManufacturerName,
ContactName = j.ContactName,
ContactTitle = j.ContactTitle,
PhoneNumber = j.PhoneNumber,
Email = j.Email,
AddressLine1 = j.AddressLine1,
AddressLine2 = j.AddressLine2,
City = j.City,
State = j.State,
PostalCode = j.PostalCode,
Country = j.Country,
WebsiteURL = j.WebsiteURL,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_MANUFACTURER_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Manufacturer
where oD.Location_ID==Location_ID
orderby oD.ManufacturerId descending
select new POCO.Manufacturer{ManufacturerId = oD.ManufacturerId,
Location_ID = oD.Location_ID,
ManufacturerCode = oD.ManufacturerCode,
ManufacturerName = oD.ManufacturerName,
ContactName = oD.ContactName,
ContactTitle = oD.ContactTitle,
PhoneNumber = oD.PhoneNumber,
Email = oD.Email,
AddressLine1 = oD.AddressLine1,
AddressLine2 = oD.AddressLine2,
City = oD.City,
State = oD.State,
PostalCode = oD.PostalCode,
Country = oD.Country,
WebsiteURL = oD.WebsiteURL,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_MANUFACTURER_BY_ID:
 var _Result1 = (from oD in objDataContext.Manufacturer
where oD.ManufacturerId==ManufacturerId
orderby oD.ManufacturerId descending
select new POCO.Manufacturer{ManufacturerId = oD.ManufacturerId,
Location_ID = oD.Location_ID,
ManufacturerCode = oD.ManufacturerCode,
ManufacturerName = oD.ManufacturerName,
ContactName = oD.ContactName,
ContactTitle = oD.ContactTitle,
PhoneNumber = oD.PhoneNumber,
Email = oD.Email,
AddressLine1 = oD.AddressLine1,
AddressLine2 = oD.AddressLine2,
City = oD.City,
State = oD.State,
PostalCode = oD.PostalCode,
Country = oD.Country,
WebsiteURL = oD.WebsiteURL,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_MANUFACTURER_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Manufacturer
where oD.ManufacturerId==ManufacturerId
orderby oD.ManufacturerId descending
select new {oD.ManufacturerId,oD.Location_ID,oD.ManufacturerCode,oD.ManufacturerName,oD.ContactName,oD.ContactTitle,oD.PhoneNumber,oD.Email,oD.AddressLine1,oD.AddressLine2,oD.City,oD.State,oD.PostalCode,oD.Country,oD.WebsiteURL,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Manufacturer objManufacturer;
foreach (var objMan1 in _Result3)
 {
objManufacturer = new Manufacturer();
objManufacturer.ManufacturerId = objMan1.ManufacturerId;
objManufacturer.Location_ID = objMan1.Location_ID;
objManufacturer.ManufacturerCode = objMan1.ManufacturerCode;
objManufacturer.ManufacturerName = objMan1.ManufacturerName;
objManufacturer.ContactName = objMan1.ContactName;
objManufacturer.ContactTitle = objMan1.ContactTitle;
objManufacturer.PhoneNumber = objMan1.PhoneNumber;
objManufacturer.Email = objMan1.Email;
objManufacturer.AddressLine1 = objMan1.AddressLine1;
objManufacturer.AddressLine2 = objMan1.AddressLine2;
objManufacturer.City = objMan1.City;
objManufacturer.State = objMan1.State;
objManufacturer.PostalCode = objMan1.PostalCode;
objManufacturer.Country = objMan1.Country;
objManufacturer.WebsiteURL = objMan1.WebsiteURL;
objManufacturer.Notes = objMan1.Notes;
objManufacturer.Is_Active = objMan1.Is_Active;
objManufacturer.Created_Date = objMan1.Created_Date;
objManufacturer.Created_By = objMan1.Created_By;
objManufacturer.Modified_Date = objMan1.Modified_Date;
objManufacturer.Modified_By = objMan1.Modified_By;
objManufacturer.Audit_Id = objMan1.Audit_Id;
objManufacturer.User_IP = objMan1.User_IP;
objManufacturer.Site_Id = objMan1.Site_Id;
objList.Add(objManufacturer);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Manufacturer objEntity = Entity.ConvertManufacturer();
objDataContext.Manufacturer.Attach(objEntity);
objDataContext.Manufacturer.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

