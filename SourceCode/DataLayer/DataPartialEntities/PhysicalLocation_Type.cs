/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: PhysicalLocation_Type
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class PhysicalLocation_Type: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
PhysicalLocation_Type_Id=Entity[EntityMapper.PhysicalLocation_Type.PHYSICALLOCATION_TYPE_ID].ConvertInteger();
PhysicalLocationTypeName=Entity[EntityMapper.PhysicalLocation_Type.PHYSICALLOCATIONTYPENAME].ConvertString();
Description=Entity[EntityMapper.PhysicalLocation_Type.DESCRIPTION].ConvertString();
Parent_PhysicalLocation_Type_ID=Entity[EntityMapper.PhysicalLocation_Type.PARENT_PHYSICALLOCATION_TYPE_ID].ConvertInteger();
Is_Active=Entity[EntityMapper.PhysicalLocation_Type.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.PhysicalLocation_Type.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.PhysicalLocation_Type.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.PhysicalLocation_Type.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.PhysicalLocation_Type.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.PhysicalLocation_Type.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.PhysicalLocation_Type.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.PhysicalLocation_Type.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.PhysicalLocation_Type.Add(Entity.ConvertPhysicalLocation_Type());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
PhysicalLocation_Type objEntity = Entity.ConvertPhysicalLocation_Type();
objDataContext.PhysicalLocation_Type.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_PHYSICALLOCATION_TYPES_DATA:
  var _Result2 = objDataContext.PhysicalLocation_Type.Select(j =>
new {PhysicalLocation_Type_Id = j.PhysicalLocation_Type_Id,
PhysicalLocationTypeName = j.PhysicalLocationTypeName,
Description = j.Description,
Parent_PhysicalLocation_Type_ID = j.Parent_PhysicalLocation_Type_ID,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_PHYSICALLOCATION_TYPES:
  var _Result = objDataContext.PhysicalLocation_Type.Select(j =>
new POCO.PhysicalLocation_Type{PhysicalLocation_Type_Id = j.PhysicalLocation_Type_Id,
PhysicalLocationTypeName = j.PhysicalLocationTypeName,
Description = j.Description,
Parent_PhysicalLocation_Type_ID = j.Parent_PhysicalLocation_Type_ID,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_PHYSICALLOCATION_TYPE_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.PhysicalLocation_Type
where oD.Location_ID==Location_ID
orderby oD.PhysicalLocation_Type_Id descending
select new POCO.PhysicalLocation_Type{PhysicalLocation_Type_Id = oD.PhysicalLocation_Type_Id,
PhysicalLocationTypeName = oD.PhysicalLocationTypeName,
Description = oD.Description,
Parent_PhysicalLocation_Type_ID = oD.Parent_PhysicalLocation_Type_ID,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_PHYSICALLOCATION_TYPE_BY_ID:
 var _Result1 = (from oD in objDataContext.PhysicalLocation_Type
where oD.PhysicalLocation_Type_Id==PhysicalLocation_Type_Id
orderby oD.PhysicalLocation_Type_Id descending
select new POCO.PhysicalLocation_Type{PhysicalLocation_Type_Id = oD.PhysicalLocation_Type_Id,
PhysicalLocationTypeName = oD.PhysicalLocationTypeName,
Description = oD.Description,
Parent_PhysicalLocation_Type_ID = oD.Parent_PhysicalLocation_Type_ID,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_PHYSICALLOCATION_TYPE_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.PhysicalLocation_Type
where oD.PhysicalLocation_Type_Id==PhysicalLocation_Type_Id
orderby oD.PhysicalLocation_Type_Id descending
select new {oD.PhysicalLocation_Type_Id,oD.PhysicalLocationTypeName,oD.Description,oD.Parent_PhysicalLocation_Type_ID,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
PhysicalLocation_Type objPhysicalLocation_Type;
foreach (var objPhy1 in _Result3)
 {
objPhysicalLocation_Type = new PhysicalLocation_Type();
objPhysicalLocation_Type.PhysicalLocation_Type_Id = objPhy1.PhysicalLocation_Type_Id;
objPhysicalLocation_Type.PhysicalLocationTypeName = objPhy1.PhysicalLocationTypeName;
objPhysicalLocation_Type.Description = objPhy1.Description;
objPhysicalLocation_Type.Parent_PhysicalLocation_Type_ID = objPhy1.Parent_PhysicalLocation_Type_ID;
objPhysicalLocation_Type.Is_Active = objPhy1.Is_Active;
objPhysicalLocation_Type.Created_Date = objPhy1.Created_Date;
objPhysicalLocation_Type.Created_By = objPhy1.Created_By;
objPhysicalLocation_Type.Modified_Date = objPhy1.Modified_Date;
objPhysicalLocation_Type.Modified_By = objPhy1.Modified_By;
objPhysicalLocation_Type.Audit_Id = objPhy1.Audit_Id;
objPhysicalLocation_Type.User_IP = objPhy1.User_IP;
objPhysicalLocation_Type.Site_Id = objPhy1.Site_Id;
objList.Add(objPhysicalLocation_Type);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
PhysicalLocation_Type objEntity = Entity.ConvertPhysicalLocation_Type();
objDataContext.PhysicalLocation_Type.Attach(objEntity);
objDataContext.PhysicalLocation_Type.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

