/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Commentary_Log
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Commentary_Log: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Log_Id=Entity[EntityMapper.Commentary_Log.LOG_ID].ConvertLong();
Location_ID=Entity[EntityMapper.Commentary_Log.LOCATION_ID].ConvertInteger();
Feed_Id=Entity[EntityMapper.Commentary_Log.FEED_ID].ConvertLong();
Engagement_Score=Entity[EntityMapper.Commentary_Log.ENGAGEMENT_SCORE].ConvertDecimal();
Latency_Millis=Entity[EntityMapper.Commentary_Log.LATENCY_MILLIS].ConvertInteger();
Sentiment_Score=Entity[EntityMapper.Commentary_Log.SENTIMENT_SCORE].ConvertDecimal();
Feedback_Text=Entity[EntityMapper.Commentary_Log.FEEDBACK_TEXT].ConvertString();
Is_Active=Entity[EntityMapper.Commentary_Log.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Commentary_Log.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Commentary_Log.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Commentary_Log.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Commentary_Log.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Commentary_Log.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Commentary_Log.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Commentary_Log.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Commentary_Log.Add(Entity.ConvertCommentary_Log());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Commentary_Log objEntity = Entity.ConvertCommentary_Log();
objDataContext.Commentary_Log.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_COMMENTARY_LOGS_DATA:
  var _Result2 = objDataContext.Commentary_Log.Select(j =>
new {Log_Id = j.Log_Id,
Location_ID = j.Location_ID,
Feed_Id = j.Feed_Id,
Engagement_Score = j.Engagement_Score,
Latency_Millis = j.Latency_Millis,
Sentiment_Score = j.Sentiment_Score,
Feedback_Text = j.Feedback_Text,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_COMMENTARY_LOGS:
  var _Result = objDataContext.Commentary_Log.Select(j =>
new POCO.Commentary_Log{Log_Id = j.Log_Id,
Location_ID = j.Location_ID,
Feed_Id = j.Feed_Id,
Engagement_Score = j.Engagement_Score,
Latency_Millis = j.Latency_Millis,
Sentiment_Score = j.Sentiment_Score,
Feedback_Text = j.Feedback_Text,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_COMMENTARY_LOG_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Commentary_Log
where oD.Location_ID==Location_ID
orderby oD.Log_Id descending
select new POCO.Commentary_Log{Log_Id = oD.Log_Id,
Location_ID = oD.Location_ID,
Feed_Id = oD.Feed_Id,
Engagement_Score = oD.Engagement_Score,
Latency_Millis = oD.Latency_Millis,
Sentiment_Score = oD.Sentiment_Score,
Feedback_Text = oD.Feedback_Text,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_COMMENTARY_LOG_BY_ID:
 var _Result1 = (from oD in objDataContext.Commentary_Log
where oD.Log_Id==Log_Id
orderby oD.Log_Id descending
select new POCO.Commentary_Log{Log_Id = oD.Log_Id,
Location_ID = oD.Location_ID,
Feed_Id = oD.Feed_Id,
Engagement_Score = oD.Engagement_Score,
Latency_Millis = oD.Latency_Millis,
Sentiment_Score = oD.Sentiment_Score,
Feedback_Text = oD.Feedback_Text,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_COMMENTARY_LOG_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Commentary_Log
where oD.Log_Id==Log_Id
orderby oD.Log_Id descending
select new {oD.Log_Id,oD.Location_ID,oD.Feed_Id,oD.Engagement_Score,oD.Latency_Millis,oD.Sentiment_Score,oD.Feedback_Text,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Commentary_Log objCommentary_Log;
foreach (var objCom1 in _Result3)
 {
objCommentary_Log = new Commentary_Log();
objCommentary_Log.Log_Id = objCom1.Log_Id;
objCommentary_Log.Location_ID = objCom1.Location_ID;
objCommentary_Log.Feed_Id = objCom1.Feed_Id;
objCommentary_Log.Engagement_Score = objCom1.Engagement_Score;
objCommentary_Log.Latency_Millis = objCom1.Latency_Millis;
objCommentary_Log.Sentiment_Score = objCom1.Sentiment_Score;
objCommentary_Log.Feedback_Text = objCom1.Feedback_Text;
objCommentary_Log.Is_Active = objCom1.Is_Active;
objCommentary_Log.Created_Date = objCom1.Created_Date;
objCommentary_Log.Created_By = objCom1.Created_By;
objCommentary_Log.Modified_Date = objCom1.Modified_Date;
objCommentary_Log.Modified_By = objCom1.Modified_By;
objCommentary_Log.Audit_Id = objCom1.Audit_Id;
objCommentary_Log.User_IP = objCom1.User_IP;
objCommentary_Log.Site_Id = objCom1.Site_Id;
objList.Add(objCommentary_Log);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Commentary_Log objEntity = Entity.ConvertCommentary_Log();
objDataContext.Commentary_Log.Attach(objEntity);
objDataContext.Commentary_Log.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

