/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Vendor
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Vendor: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
VendorId=Entity[EntityMapper.Vendor.VENDORID].ConvertInteger();
Location_ID=Entity[EntityMapper.Vendor.LOCATION_ID].ConvertInteger();
VendorCode=Entity[EntityMapper.Vendor.VENDORCODE].ConvertString();
VendorName=Entity[EntityMapper.Vendor.VENDORNAME].ConvertString();
VATRegistrationNo=Entity[EntityMapper.Vendor.VATREGISTRATIONNO].ConvertString();
ContactName=Entity[EntityMapper.Vendor.CONTACTNAME].ConvertString();
ContactTitle=Entity[EntityMapper.Vendor.CONTACTTITLE].ConvertString();
PhoneNumber=Entity[EntityMapper.Vendor.PHONENUMBER].ConvertString();
Email=Entity[EntityMapper.Vendor.EMAIL].ConvertString();
AddressLine1=Entity[EntityMapper.Vendor.ADDRESSLINE1].ConvertString();
AddressLine2=Entity[EntityMapper.Vendor.ADDRESSLINE2].ConvertString();
City=Entity[EntityMapper.Vendor.CITY].ConvertString();
State=Entity[EntityMapper.Vendor.STATE].ConvertString();
PostalCode=Entity[EntityMapper.Vendor.POSTALCODE].ConvertString();
Country=Entity[EntityMapper.Vendor.COUNTRY].ConvertString();
WebsiteURL=Entity[EntityMapper.Vendor.WEBSITEURL].ConvertString();
Notes=Entity[EntityMapper.Vendor.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Vendor.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Vendor.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Vendor.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Vendor.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Vendor.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Vendor.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Vendor.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Vendor.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Vendor.Add(Entity.ConvertVendor());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Vendor objEntity = Entity.ConvertVendor();
objDataContext.Vendor.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_VENDORS_DATA:
  var _Result2 = objDataContext.Vendor.Select(j =>
new {VendorId = j.VendorId,
Location_ID = j.Location_ID,
VendorCode = j.VendorCode,
VendorName = j.VendorName,
VATRegistrationNo = j.VATRegistrationNo,
ContactName = j.ContactName,
ContactTitle = j.ContactTitle,
PhoneNumber = j.PhoneNumber,
Email = j.Email,
AddressLine1 = j.AddressLine1,
AddressLine2 = j.AddressLine2,
City = j.City,
State = j.State,
PostalCode = j.PostalCode,
Country = j.Country,
WebsiteURL = j.WebsiteURL,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_VENDORS:
  var _Result = objDataContext.Vendor.Select(j =>
new POCO.Vendor{VendorId = j.VendorId,
Location_ID = j.Location_ID,
VendorCode = j.VendorCode,
VendorName = j.VendorName,
VATRegistrationNo = j.VATRegistrationNo,
ContactName = j.ContactName,
ContactTitle = j.ContactTitle,
PhoneNumber = j.PhoneNumber,
Email = j.Email,
AddressLine1 = j.AddressLine1,
AddressLine2 = j.AddressLine2,
City = j.City,
State = j.State,
PostalCode = j.PostalCode,
Country = j.Country,
WebsiteURL = j.WebsiteURL,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_VENDOR_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Vendor
where oD.Location_ID==Location_ID
orderby oD.VendorId descending
select new POCO.Vendor{VendorId = oD.VendorId,
Location_ID = oD.Location_ID,
VendorCode = oD.VendorCode,
VendorName = oD.VendorName,
VATRegistrationNo = oD.VATRegistrationNo,
ContactName = oD.ContactName,
ContactTitle = oD.ContactTitle,
PhoneNumber = oD.PhoneNumber,
Email = oD.Email,
AddressLine1 = oD.AddressLine1,
AddressLine2 = oD.AddressLine2,
City = oD.City,
State = oD.State,
PostalCode = oD.PostalCode,
Country = oD.Country,
WebsiteURL = oD.WebsiteURL,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_VENDOR_BY_ID:
 var _Result1 = (from oD in objDataContext.Vendor
where oD.VendorId==VendorId
orderby oD.VendorId descending
select new POCO.Vendor{VendorId = oD.VendorId,
Location_ID = oD.Location_ID,
VendorCode = oD.VendorCode,
VendorName = oD.VendorName,
VATRegistrationNo = oD.VATRegistrationNo,
ContactName = oD.ContactName,
ContactTitle = oD.ContactTitle,
PhoneNumber = oD.PhoneNumber,
Email = oD.Email,
AddressLine1 = oD.AddressLine1,
AddressLine2 = oD.AddressLine2,
City = oD.City,
State = oD.State,
PostalCode = oD.PostalCode,
Country = oD.Country,
WebsiteURL = oD.WebsiteURL,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_VENDOR_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Vendor
where oD.VendorId==VendorId
orderby oD.VendorId descending
select new {oD.VendorId,oD.Location_ID,oD.VendorCode,oD.VendorName,oD.VATRegistrationNo,oD.ContactName,oD.ContactTitle,oD.PhoneNumber,oD.Email,oD.AddressLine1,oD.AddressLine2,oD.City,oD.State,oD.PostalCode,oD.Country,oD.WebsiteURL,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Vendor objVendor;
foreach (var objVen1 in _Result3)
 {
objVendor = new Vendor();
objVendor.VendorId = objVen1.VendorId;
objVendor.Location_ID = objVen1.Location_ID;
objVendor.VendorCode = objVen1.VendorCode;
objVendor.VendorName = objVen1.VendorName;
objVendor.VATRegistrationNo = objVen1.VATRegistrationNo;
objVendor.ContactName = objVen1.ContactName;
objVendor.ContactTitle = objVen1.ContactTitle;
objVendor.PhoneNumber = objVen1.PhoneNumber;
objVendor.Email = objVen1.Email;
objVendor.AddressLine1 = objVen1.AddressLine1;
objVendor.AddressLine2 = objVen1.AddressLine2;
objVendor.City = objVen1.City;
objVendor.State = objVen1.State;
objVendor.PostalCode = objVen1.PostalCode;
objVendor.Country = objVen1.Country;
objVendor.WebsiteURL = objVen1.WebsiteURL;
objVendor.Notes = objVen1.Notes;
objVendor.Is_Active = objVen1.Is_Active;
objVendor.Created_Date = objVen1.Created_Date;
objVendor.Created_By = objVen1.Created_By;
objVendor.Modified_Date = objVen1.Modified_Date;
objVendor.Modified_By = objVen1.Modified_By;
objVendor.Audit_Id = objVen1.Audit_Id;
objVendor.User_IP = objVen1.User_IP;
objVendor.Site_Id = objVen1.Site_Id;
objList.Add(objVendor);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Vendor objEntity = Entity.ConvertVendor();
objDataContext.Vendor.Attach(objEntity);
objDataContext.Vendor.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

