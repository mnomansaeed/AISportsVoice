/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Region_Compliance
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Region_Compliance: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Compliance_Id=Entity[EntityMapper.Region_Compliance.COMPLIANCE_ID].ConvertInteger();
Location_ID=Entity[EntityMapper.Region_Compliance.LOCATION_ID].ConvertInteger();
Region_Name=Entity[EntityMapper.Region_Compliance.REGION_NAME].ConvertString();
Regulation_Name=Entity[EntityMapper.Region_Compliance.REGULATION_NAME].ConvertString();
Rule_Description=Entity[EntityMapper.Region_Compliance.RULE_DESCRIPTION].ConvertString();
Enforcement_Level=Entity[EntityMapper.Region_Compliance.ENFORCEMENT_LEVEL].ConvertString();
Applies_To=Entity[EntityMapper.Region_Compliance.APPLIES_TO].ConvertString();
Notes=Entity[EntityMapper.Region_Compliance.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Region_Compliance.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Region_Compliance.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Region_Compliance.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Region_Compliance.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Region_Compliance.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Region_Compliance.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Region_Compliance.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Region_Compliance.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Region_Compliance.Add(Entity.ConvertRegion_Compliance());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Region_Compliance objEntity = Entity.ConvertRegion_Compliance();
objDataContext.Region_Compliance.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_REGION_COMPLIANCES_DATA:
  var _Result2 = objDataContext.Region_Compliance.Select(j =>
new {Compliance_Id = j.Compliance_Id,
Location_ID = j.Location_ID,
Region_Name = j.Region_Name,
Regulation_Name = j.Regulation_Name,
Rule_Description = j.Rule_Description,
Enforcement_Level = j.Enforcement_Level,
Applies_To = j.Applies_To,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_REGION_COMPLIANCES:
  var _Result = objDataContext.Region_Compliance.Select(j =>
new POCO.Region_Compliance{Compliance_Id = j.Compliance_Id,
Location_ID = j.Location_ID,
Region_Name = j.Region_Name,
Regulation_Name = j.Regulation_Name,
Rule_Description = j.Rule_Description,
Enforcement_Level = j.Enforcement_Level,
Applies_To = j.Applies_To,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_REGION_COMPLIANCE_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Region_Compliance
where oD.Location_ID==Location_ID
orderby oD.Compliance_Id descending
select new POCO.Region_Compliance{Compliance_Id = oD.Compliance_Id,
Location_ID = oD.Location_ID,
Region_Name = oD.Region_Name,
Regulation_Name = oD.Regulation_Name,
Rule_Description = oD.Rule_Description,
Enforcement_Level = oD.Enforcement_Level,
Applies_To = oD.Applies_To,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_REGION_COMPLIANCE_BY_ID:
 var _Result1 = (from oD in objDataContext.Region_Compliance
where oD.Compliance_Id==Compliance_Id
orderby oD.Compliance_Id descending
select new POCO.Region_Compliance{Compliance_Id = oD.Compliance_Id,
Location_ID = oD.Location_ID,
Region_Name = oD.Region_Name,
Regulation_Name = oD.Regulation_Name,
Rule_Description = oD.Rule_Description,
Enforcement_Level = oD.Enforcement_Level,
Applies_To = oD.Applies_To,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_REGION_COMPLIANCE_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Region_Compliance
where oD.Compliance_Id==Compliance_Id
orderby oD.Compliance_Id descending
select new {oD.Compliance_Id,oD.Location_ID,oD.Region_Name,oD.Regulation_Name,oD.Rule_Description,oD.Enforcement_Level,oD.Applies_To,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Region_Compliance objRegion_Compliance;
foreach (var objReg1 in _Result3)
 {
objRegion_Compliance = new Region_Compliance();
objRegion_Compliance.Compliance_Id = objReg1.Compliance_Id;
objRegion_Compliance.Location_ID = objReg1.Location_ID;
objRegion_Compliance.Region_Name = objReg1.Region_Name;
objRegion_Compliance.Regulation_Name = objReg1.Regulation_Name;
objRegion_Compliance.Rule_Description = objReg1.Rule_Description;
objRegion_Compliance.Enforcement_Level = objReg1.Enforcement_Level;
objRegion_Compliance.Applies_To = objReg1.Applies_To;
objRegion_Compliance.Notes = objReg1.Notes;
objRegion_Compliance.Is_Active = objReg1.Is_Active;
objRegion_Compliance.Created_Date = objReg1.Created_Date;
objRegion_Compliance.Created_By = objReg1.Created_By;
objRegion_Compliance.Modified_Date = objReg1.Modified_Date;
objRegion_Compliance.Modified_By = objReg1.Modified_By;
objRegion_Compliance.Audit_Id = objReg1.Audit_Id;
objRegion_Compliance.User_IP = objReg1.User_IP;
objRegion_Compliance.Site_Id = objReg1.Site_Id;
objList.Add(objRegion_Compliance);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Region_Compliance objEntity = Entity.ConvertRegion_Compliance();
objDataContext.Region_Compliance.Attach(objEntity);
objDataContext.Region_Compliance.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

