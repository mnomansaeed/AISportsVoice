/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Feedback
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Feedback: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Feedback_Id=Entity[EntityMapper.Feedback.FEEDBACK_ID].ConvertLong();
Location_ID=Entity[EntityMapper.Feedback.LOCATION_ID].ConvertInteger();
User_Id=Entity[EntityMapper.Feedback.USER_ID].ConvertInteger();
Match_Id=Entity[EntityMapper.Feedback.MATCH_ID].ConvertInteger();
Feedback_Type=Entity[EntityMapper.Feedback.FEEDBACK_TYPE].ConvertString();
Rating=Entity[EntityMapper.Feedback.RATING].ConvertInteger();
Comments=Entity[EntityMapper.Feedback.COMMENTS].ConvertString();
Submitted_At=Entity[EntityMapper.Feedback.SUBMITTED_AT].ConvertDateTime();
Is_Active=Entity[EntityMapper.Feedback.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Feedback.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Feedback.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Feedback.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Feedback.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Feedback.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Feedback.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Feedback.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Feedback.Add(Entity.ConvertFeedback());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Feedback objEntity = Entity.ConvertFeedback();
objDataContext.Feedback.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_FEEDBACKS_DATA:
  var _Result2 = objDataContext.Feedback.Select(j =>
new {Feedback_Id = j.Feedback_Id,
Location_ID = j.Location_ID,
User_Id = j.User_Id,
Match_Id = j.Match_Id,
Feedback_Type = j.Feedback_Type,
Rating = j.Rating,
Comments = j.Comments,
Submitted_At = j.Submitted_At,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_FEEDBACKS:
  var _Result = objDataContext.Feedback.Select(j =>
new POCO.Feedback{Feedback_Id = j.Feedback_Id,
Location_ID = j.Location_ID,
User_Id = j.User_Id,
Match_Id = j.Match_Id,
Feedback_Type = j.Feedback_Type,
Rating = j.Rating,
Comments = j.Comments,
Submitted_At = j.Submitted_At,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_FEEDBACK_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Feedback
where oD.Location_ID==Location_ID
orderby oD.Feedback_Id descending
select new POCO.Feedback{Feedback_Id = oD.Feedback_Id,
Location_ID = oD.Location_ID,
User_Id = oD.User_Id,
Match_Id = oD.Match_Id,
Feedback_Type = oD.Feedback_Type,
Rating = oD.Rating,
Comments = oD.Comments,
Submitted_At = oD.Submitted_At,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_FEEDBACK_BY_ID:
 var _Result1 = (from oD in objDataContext.Feedback
where oD.Feedback_Id==Feedback_Id
orderby oD.Feedback_Id descending
select new POCO.Feedback{Feedback_Id = oD.Feedback_Id,
Location_ID = oD.Location_ID,
User_Id = oD.User_Id,
Match_Id = oD.Match_Id,
Feedback_Type = oD.Feedback_Type,
Rating = oD.Rating,
Comments = oD.Comments,
Submitted_At = oD.Submitted_At,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_FEEDBACK_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Feedback
where oD.Feedback_Id==Feedback_Id
orderby oD.Feedback_Id descending
select new {oD.Feedback_Id,oD.Location_ID,oD.User_Id,oD.Match_Id,oD.Feedback_Type,oD.Rating,oD.Comments,oD.Submitted_At,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Feedback objFeedback;
foreach (var objFee1 in _Result3)
 {
objFeedback = new Feedback();
objFeedback.Feedback_Id = objFee1.Feedback_Id;
objFeedback.Location_ID = objFee1.Location_ID;
objFeedback.User_Id = objFee1.User_Id;
objFeedback.Match_Id = objFee1.Match_Id;
objFeedback.Feedback_Type = objFee1.Feedback_Type;
objFeedback.Rating = objFee1.Rating;
objFeedback.Comments = objFee1.Comments;
objFeedback.Submitted_At = objFee1.Submitted_At;
objFeedback.Is_Active = objFee1.Is_Active;
objFeedback.Created_Date = objFee1.Created_Date;
objFeedback.Created_By = objFee1.Created_By;
objFeedback.Modified_Date = objFee1.Modified_Date;
objFeedback.Modified_By = objFee1.Modified_By;
objFeedback.Audit_Id = objFee1.Audit_Id;
objFeedback.User_IP = objFee1.User_IP;
objFeedback.Site_Id = objFee1.Site_Id;
objList.Add(objFeedback);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Feedback objEntity = Entity.ConvertFeedback();
objDataContext.Feedback.Attach(objEntity);
objDataContext.Feedback.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

