/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Localization_Token
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Localization_Token: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Token_Id=Entity[EntityMapper.Localization_Token.TOKEN_ID].ConvertInteger();
Location_ID=Entity[EntityMapper.Localization_Token.LOCATION_ID].ConvertInteger();
Key_Name=Entity[EntityMapper.Localization_Token.KEY_NAME].ConvertString();
Language_Code=Entity[EntityMapper.Localization_Token.LANGUAGE_CODE].ConvertString();
Localized_Value=Entity[EntityMapper.Localization_Token.LOCALIZED_VALUE].ConvertString();
Is_UI_Only=Entity[EntityMapper.Localization_Token.IS_UI_ONLY].ConvertBoolean();
Notes=Entity[EntityMapper.Localization_Token.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Localization_Token.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Localization_Token.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Localization_Token.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Localization_Token.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Localization_Token.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Localization_Token.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Localization_Token.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Localization_Token.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Localization_Token.Add(Entity.ConvertLocalization_Token());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Localization_Token objEntity = Entity.ConvertLocalization_Token();
objDataContext.Localization_Token.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_LOCALIZATION_TOKENS_DATA:
  var _Result2 = objDataContext.Localization_Token.Select(j =>
new {Token_Id = j.Token_Id,
Location_ID = j.Location_ID,
Key_Name = j.Key_Name,
Language_Code = j.Language_Code,
Localized_Value = j.Localized_Value,
Is_UI_Only = j.Is_UI_Only,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_LOCALIZATION_TOKENS:
  var _Result = objDataContext.Localization_Token.Select(j =>
new POCO.Localization_Token{Token_Id = j.Token_Id,
Location_ID = j.Location_ID,
Key_Name = j.Key_Name,
Language_Code = j.Language_Code,
Localized_Value = j.Localized_Value,
Is_UI_Only = j.Is_UI_Only,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_LOCALIZATION_TOKEN_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Localization_Token
where oD.Location_ID==Location_ID
orderby oD.Token_Id descending
select new POCO.Localization_Token{Token_Id = oD.Token_Id,
Location_ID = oD.Location_ID,
Key_Name = oD.Key_Name,
Language_Code = oD.Language_Code,
Localized_Value = oD.Localized_Value,
Is_UI_Only = oD.Is_UI_Only,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_LOCALIZATION_TOKEN_BY_ID:
 var _Result1 = (from oD in objDataContext.Localization_Token
where oD.Token_Id==Token_Id
orderby oD.Token_Id descending
select new POCO.Localization_Token{Token_Id = oD.Token_Id,
Location_ID = oD.Location_ID,
Key_Name = oD.Key_Name,
Language_Code = oD.Language_Code,
Localized_Value = oD.Localized_Value,
Is_UI_Only = oD.Is_UI_Only,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_LOCALIZATION_TOKEN_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Localization_Token
where oD.Token_Id==Token_Id
orderby oD.Token_Id descending
select new {oD.Token_Id,oD.Location_ID,oD.Key_Name,oD.Language_Code,oD.Localized_Value,oD.Is_UI_Only,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Localization_Token objLocalization_Token;
foreach (var objLoc1 in _Result3)
 {
objLocalization_Token = new Localization_Token();
objLocalization_Token.Token_Id = objLoc1.Token_Id;
objLocalization_Token.Location_ID = objLoc1.Location_ID;
objLocalization_Token.Key_Name = objLoc1.Key_Name;
objLocalization_Token.Language_Code = objLoc1.Language_Code;
objLocalization_Token.Localized_Value = objLoc1.Localized_Value;
objLocalization_Token.Is_UI_Only = objLoc1.Is_UI_Only;
objLocalization_Token.Notes = objLoc1.Notes;
objLocalization_Token.Is_Active = objLoc1.Is_Active;
objLocalization_Token.Created_Date = objLoc1.Created_Date;
objLocalization_Token.Created_By = objLoc1.Created_By;
objLocalization_Token.Modified_Date = objLoc1.Modified_Date;
objLocalization_Token.Modified_By = objLoc1.Modified_By;
objLocalization_Token.Audit_Id = objLoc1.Audit_Id;
objLocalization_Token.User_IP = objLoc1.User_IP;
objLocalization_Token.Site_Id = objLoc1.Site_Id;
objList.Add(objLocalization_Token);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Localization_Token objEntity = Entity.ConvertLocalization_Token();
objDataContext.Localization_Token.Attach(objEntity);
objDataContext.Localization_Token.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

