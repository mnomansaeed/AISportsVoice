/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Match_Stat
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Match_Stat: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Stat_Id=Entity[EntityMapper.Match_Stat.STAT_ID].ConvertLong();
Location_ID=Entity[EntityMapper.Match_Stat.LOCATION_ID].ConvertInteger();
Match_Id=Entity[EntityMapper.Match_Stat.MATCH_ID].ConvertInteger();
Player_Name=Entity[EntityMapper.Match_Stat.PLAYER_NAME].ConvertString();
Event_Type=Entity[EntityMapper.Match_Stat.EVENT_TYPE].ConvertString();
Event_Description=Entity[EntityMapper.Match_Stat.EVENT_DESCRIPTION].ConvertString();
Timestamp=Entity[EntityMapper.Match_Stat.TIMESTAMP].ConvertDateTime();
Notes=Entity[EntityMapper.Match_Stat.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Match_Stat.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Match_Stat.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Match_Stat.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Match_Stat.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Match_Stat.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Match_Stat.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Match_Stat.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Match_Stat.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Match_Stat.Add(Entity.ConvertMatch_Stat());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Match_Stat objEntity = Entity.ConvertMatch_Stat();
objDataContext.Match_Stat.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_MATCH_STATS_DATA:
  var _Result2 = objDataContext.Match_Stat.Select(j =>
new {Stat_Id = j.Stat_Id,
Location_ID = j.Location_ID,
Match_Id = j.Match_Id,
Player_Name = j.Player_Name,
Event_Type = j.Event_Type,
Event_Description = j.Event_Description,
Timestamp = j.Timestamp,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_MATCH_STATS:
  var _Result = objDataContext.Match_Stat.Select(j =>
new POCO.Match_Stat{Stat_Id = j.Stat_Id,
Location_ID = j.Location_ID,
Match_Id = j.Match_Id,
Player_Name = j.Player_Name,
Event_Type = j.Event_Type,
Event_Description = j.Event_Description,
Timestamp = j.Timestamp,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_MATCH_STAT_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Match_Stat
where oD.Location_ID==Location_ID
orderby oD.Stat_Id descending
select new POCO.Match_Stat{Stat_Id = oD.Stat_Id,
Location_ID = oD.Location_ID,
Match_Id = oD.Match_Id,
Player_Name = oD.Player_Name,
Event_Type = oD.Event_Type,
Event_Description = oD.Event_Description,
Timestamp = oD.Timestamp,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_MATCH_STAT_BY_ID:
 var _Result1 = (from oD in objDataContext.Match_Stat
where oD.Stat_Id==Stat_Id
orderby oD.Stat_Id descending
select new POCO.Match_Stat{Stat_Id = oD.Stat_Id,
Location_ID = oD.Location_ID,
Match_Id = oD.Match_Id,
Player_Name = oD.Player_Name,
Event_Type = oD.Event_Type,
Event_Description = oD.Event_Description,
Timestamp = oD.Timestamp,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_MATCH_STAT_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Match_Stat
where oD.Stat_Id==Stat_Id
orderby oD.Stat_Id descending
select new {oD.Stat_Id,oD.Location_ID,oD.Match_Id,oD.Player_Name,oD.Event_Type,oD.Event_Description,oD.Timestamp,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Match_Stat objMatch_Stat;
foreach (var objMat1 in _Result3)
 {
objMatch_Stat = new Match_Stat();
objMatch_Stat.Stat_Id = objMat1.Stat_Id;
objMatch_Stat.Location_ID = objMat1.Location_ID;
objMatch_Stat.Match_Id = objMat1.Match_Id;
objMatch_Stat.Player_Name = objMat1.Player_Name;
objMatch_Stat.Event_Type = objMat1.Event_Type;
objMatch_Stat.Event_Description = objMat1.Event_Description;
objMatch_Stat.Timestamp = objMat1.Timestamp;
objMatch_Stat.Notes = objMat1.Notes;
objMatch_Stat.Is_Active = objMat1.Is_Active;
objMatch_Stat.Created_Date = objMat1.Created_Date;
objMatch_Stat.Created_By = objMat1.Created_By;
objMatch_Stat.Modified_Date = objMat1.Modified_Date;
objMatch_Stat.Modified_By = objMat1.Modified_By;
objMatch_Stat.Audit_Id = objMat1.Audit_Id;
objMatch_Stat.User_IP = objMat1.User_IP;
objMatch_Stat.Site_Id = objMat1.Site_Id;
objList.Add(objMatch_Stat);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Match_Stat objEntity = Entity.ConvertMatch_Stat();
objDataContext.Match_Stat.Attach(objEntity);
objDataContext.Match_Stat.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

