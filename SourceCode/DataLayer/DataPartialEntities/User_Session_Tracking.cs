/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: User_Session_Tracking
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class User_Session_Tracking: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Session_Id=Entity[EntityMapper.User_Session_Tracking.SESSION_ID].ConvertLong();
Location_ID=Entity[EntityMapper.User_Session_Tracking.LOCATION_ID].ConvertInteger();
User_Id=Entity[EntityMapper.User_Session_Tracking.USER_ID].ConvertInteger();
Device_Type=Entity[EntityMapper.User_Session_Tracking.DEVICE_TYPE].ConvertString();
OS=Entity[EntityMapper.User_Session_Tracking.OS].ConvertString();
Browser=Entity[EntityMapper.User_Session_Tracking.BROWSER].ConvertString();
IP_Address=Entity[EntityMapper.User_Session_Tracking.IP_ADDRESS].ConvertString();
Start_Time=Entity[EntityMapper.User_Session_Tracking.START_TIME].ConvertDateTime();
End_Time=Entity[EntityMapper.User_Session_Tracking.END_TIME].ConvertDateTime();
Language_Selected=Entity[EntityMapper.User_Session_Tracking.LANGUAGE_SELECTED].ConvertString();
Voice_Selected=Entity[EntityMapper.User_Session_Tracking.VOICE_SELECTED].ConvertString();
Notes=Entity[EntityMapper.User_Session_Tracking.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.User_Session_Tracking.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.User_Session_Tracking.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.User_Session_Tracking.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.User_Session_Tracking.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.User_Session_Tracking.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.User_Session_Tracking.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.User_Session_Tracking.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.User_Session_Tracking.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.User_Session_Tracking.Add(Entity.ConvertUser_Session_Tracking());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
User_Session_Tracking objEntity = Entity.ConvertUser_Session_Tracking();
objDataContext.User_Session_Tracking.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_USER_SESSION_TRACKINGS_DATA:
  var _Result2 = objDataContext.User_Session_Tracking.Select(j =>
new {Session_Id = j.Session_Id,
Location_ID = j.Location_ID,
User_Id = j.User_Id,
Device_Type = j.Device_Type,
OS = j.OS,
Browser = j.Browser,
IP_Address = j.IP_Address,
Start_Time = j.Start_Time,
End_Time = j.End_Time,
Language_Selected = j.Language_Selected,
Voice_Selected = j.Voice_Selected,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_USER_SESSION_TRACKINGS:
  var _Result = objDataContext.User_Session_Tracking.Select(j =>
new POCO.User_Session_Tracking{Session_Id = j.Session_Id,
Location_ID = j.Location_ID,
User_Id = j.User_Id,
Device_Type = j.Device_Type,
OS = j.OS,
Browser = j.Browser,
IP_Address = j.IP_Address,
Start_Time = j.Start_Time,
End_Time = j.End_Time,
Language_Selected = j.Language_Selected,
Voice_Selected = j.Voice_Selected,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_USER_SESSION_TRACKING_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.User_Session_Tracking
where oD.Location_ID==Location_ID
orderby oD.Session_Id descending
select new POCO.User_Session_Tracking{Session_Id = oD.Session_Id,
Location_ID = oD.Location_ID,
User_Id = oD.User_Id,
Device_Type = oD.Device_Type,
OS = oD.OS,
Browser = oD.Browser,
IP_Address = oD.IP_Address,
Start_Time = oD.Start_Time,
End_Time = oD.End_Time,
Language_Selected = oD.Language_Selected,
Voice_Selected = oD.Voice_Selected,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_USER_SESSION_TRACKING_BY_ID:
 var _Result1 = (from oD in objDataContext.User_Session_Tracking
where oD.Session_Id==Session_Id
orderby oD.Session_Id descending
select new POCO.User_Session_Tracking{Session_Id = oD.Session_Id,
Location_ID = oD.Location_ID,
User_Id = oD.User_Id,
Device_Type = oD.Device_Type,
OS = oD.OS,
Browser = oD.Browser,
IP_Address = oD.IP_Address,
Start_Time = oD.Start_Time,
End_Time = oD.End_Time,
Language_Selected = oD.Language_Selected,
Voice_Selected = oD.Voice_Selected,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_USER_SESSION_TRACKING_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.User_Session_Tracking
where oD.Session_Id==Session_Id
orderby oD.Session_Id descending
select new {oD.Session_Id,oD.Location_ID,oD.User_Id,oD.Device_Type,oD.OS,oD.Browser,oD.IP_Address,oD.Start_Time,oD.End_Time,oD.Language_Selected,oD.Voice_Selected,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
User_Session_Tracking objUser_Session_Tracking;
foreach (var objUse1 in _Result3)
 {
objUser_Session_Tracking = new User_Session_Tracking();
objUser_Session_Tracking.Session_Id = objUse1.Session_Id;
objUser_Session_Tracking.Location_ID = objUse1.Location_ID;
objUser_Session_Tracking.User_Id = objUse1.User_Id;
objUser_Session_Tracking.Device_Type = objUse1.Device_Type;
objUser_Session_Tracking.OS = objUse1.OS;
objUser_Session_Tracking.Browser = objUse1.Browser;
objUser_Session_Tracking.IP_Address = objUse1.IP_Address;
objUser_Session_Tracking.Start_Time = objUse1.Start_Time;
objUser_Session_Tracking.End_Time = objUse1.End_Time;
objUser_Session_Tracking.Language_Selected = objUse1.Language_Selected;
objUser_Session_Tracking.Voice_Selected = objUse1.Voice_Selected;
objUser_Session_Tracking.Notes = objUse1.Notes;
objUser_Session_Tracking.Is_Active = objUse1.Is_Active;
objUser_Session_Tracking.Created_Date = objUse1.Created_Date;
objUser_Session_Tracking.Created_By = objUse1.Created_By;
objUser_Session_Tracking.Modified_Date = objUse1.Modified_Date;
objUser_Session_Tracking.Modified_By = objUse1.Modified_By;
objUser_Session_Tracking.Audit_Id = objUse1.Audit_Id;
objUser_Session_Tracking.User_IP = objUse1.User_IP;
objUser_Session_Tracking.Site_Id = objUse1.Site_Id;
objList.Add(objUser_Session_Tracking);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
User_Session_Tracking objEntity = Entity.ConvertUser_Session_Tracking();
objDataContext.User_Session_Tracking.Attach(objEntity);
objDataContext.User_Session_Tracking.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

