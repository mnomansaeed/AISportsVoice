/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: User
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class User: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
UserId=Entity[EntityMapper.User.USERID].ConvertInteger();
EmployeeId=Entity[EntityMapper.User.EMPLOYEEID].ConvertInteger();
UserGroupId=Entity[EntityMapper.User.USERGROUPID].ConvertInteger();
Location_Id=Entity[EntityMapper.User.LOCATION_ID].ConvertInteger();
UserName=Entity[EntityMapper.User.USERNAME].ConvertString();
Password=Entity[EntityMapper.User.PASSWORD].ConvertString();
Email=Entity[EntityMapper.User.EMAIL].ConvertString();
TempPassword=Entity[EntityMapper.User.TEMPPASSWORD].ConvertString();
DateRangeFrom=Entity[EntityMapper.User.DATERANGEFROM].ConvertDateTime();
DateRangeTo=Entity[EntityMapper.User.DATERANGETO].ConvertDateTime();
Is_Active=Entity[EntityMapper.User.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.User.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.User.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.User.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.User.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.User.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.User.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.User.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.User.Add(Entity.ConvertUser());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
User objEntity = Entity.ConvertUser();
objDataContext.User.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_USERS_DATA:
  var _Result2 = objDataContext.User.Select(j =>
new {UserId = j.UserId,
EmployeeId = j.EmployeeId,
UserGroupId = j.UserGroupId,
Location_Id = j.Location_Id,
UserName = j.UserName,
Password = j.Password,
Email = j.Email,
TempPassword = j.TempPassword,
DateRangeFrom = j.DateRangeFrom,
DateRangeTo = j.DateRangeTo,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_USERS:
  var _Result = objDataContext.User.Select(j =>
new POCO.User{UserId = j.UserId,
EmployeeId = j.EmployeeId,
UserGroupId = j.UserGroupId,
Location_Id = j.Location_Id,
UserName = j.UserName,
Password = j.Password,
Email = j.Email,
TempPassword = j.TempPassword,
DateRangeFrom = j.DateRangeFrom,
DateRangeTo = j.DateRangeTo,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_USER_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.User
where oD.Location_ID==Location_ID
orderby oD.UserId descending
select new POCO.User{UserId = oD.UserId,
EmployeeId = oD.EmployeeId,
UserGroupId = oD.UserGroupId,
Location_Id = oD.Location_Id,
UserName = oD.UserName,
Password = oD.Password,
Email = oD.Email,
TempPassword = oD.TempPassword,
DateRangeFrom = oD.DateRangeFrom,
DateRangeTo = oD.DateRangeTo,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_USER_BY_ID:
 var _Result1 = (from oD in objDataContext.User
where oD.UserId==UserId
orderby oD.UserId descending
select new POCO.User{UserId = oD.UserId,
EmployeeId = oD.EmployeeId,
UserGroupId = oD.UserGroupId,
Location_Id = oD.Location_Id,
UserName = oD.UserName,
Password = oD.Password,
Email = oD.Email,
TempPassword = oD.TempPassword,
DateRangeFrom = oD.DateRangeFrom,
DateRangeTo = oD.DateRangeTo,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_USER_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.User
where oD.UserId==UserId
orderby oD.UserId descending
select new {oD.UserId,oD.EmployeeId,oD.UserGroupId,oD.Location_Id,oD.UserName,oD.Password,oD.Email,oD.TempPassword,oD.DateRangeFrom,oD.DateRangeTo,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
User objUser;
foreach (var objUse1 in _Result3)
 {
objUser = new User();
objUser.UserId = objUse1.UserId;
objUser.EmployeeId = objUse1.EmployeeId;
objUser.UserGroupId = objUse1.UserGroupId;
objUser.Location_Id = objUse1.Location_Id;
objUser.UserName = objUse1.UserName;
objUser.Password = objUse1.Password;
objUser.Email = objUse1.Email;
objUser.TempPassword = objUse1.TempPassword;
objUser.DateRangeFrom = objUse1.DateRangeFrom;
objUser.DateRangeTo = objUse1.DateRangeTo;
objUser.Is_Active = objUse1.Is_Active;
objUser.Created_Date = objUse1.Created_Date;
objUser.Created_By = objUse1.Created_By;
objUser.Modified_Date = objUse1.Modified_Date;
objUser.Modified_By = objUse1.Modified_By;
objUser.Audit_Id = objUse1.Audit_Id;
objUser.User_IP = objUse1.User_IP;
objUser.Site_Id = objUse1.Site_Id;
objList.Add(objUser);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
User objEntity = Entity.ConvertUser();
objDataContext.User.Attach(objEntity);
objDataContext.User.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

