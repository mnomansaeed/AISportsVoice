/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: RealTime_Event_Queue
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class RealTime_Event_Queue: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Event_Id=Entity[EntityMapper.RealTime_Event_Queue.EVENT_ID].ConvertLong();
Location_ID=Entity[EntityMapper.RealTime_Event_Queue.LOCATION_ID].ConvertInteger();
Match_Id=Entity[EntityMapper.RealTime_Event_Queue.MATCH_ID].ConvertInteger();
Event_Type=Entity[EntityMapper.RealTime_Event_Queue.EVENT_TYPE].ConvertString();
Event_Data=Entity[EntityMapper.RealTime_Event_Queue.EVENT_DATA].ConvertString();
Processed=Entity[EntityMapper.RealTime_Event_Queue.PROCESSED].ConvertBoolean();
Event_Timestamp=Entity[EntityMapper.RealTime_Event_Queue.EVENT_TIMESTAMP].ConvertDateTime();
Notes=Entity[EntityMapper.RealTime_Event_Queue.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.RealTime_Event_Queue.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.RealTime_Event_Queue.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.RealTime_Event_Queue.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.RealTime_Event_Queue.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.RealTime_Event_Queue.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.RealTime_Event_Queue.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.RealTime_Event_Queue.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.RealTime_Event_Queue.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.RealTime_Event_Queue.Add(Entity.ConvertRealTime_Event_Queue());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
RealTime_Event_Queue objEntity = Entity.ConvertRealTime_Event_Queue();
objDataContext.RealTime_Event_Queue.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_REALTIME_EVENT_QUEUES_DATA:
  var _Result2 = objDataContext.RealTime_Event_Queue.Select(j =>
new {Event_Id = j.Event_Id,
Location_ID = j.Location_ID,
Match_Id = j.Match_Id,
Event_Type = j.Event_Type,
Event_Data = j.Event_Data,
Processed = j.Processed,
Event_Timestamp = j.Event_Timestamp,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_REALTIME_EVENT_QUEUES:
  var _Result = objDataContext.RealTime_Event_Queue.Select(j =>
new POCO.RealTime_Event_Queue{Event_Id = j.Event_Id,
Location_ID = j.Location_ID,
Match_Id = j.Match_Id,
Event_Type = j.Event_Type,
Event_Data = j.Event_Data,
Processed = j.Processed,
Event_Timestamp = j.Event_Timestamp,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_REALTIME_EVENT_QUEUE_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.RealTime_Event_Queue
where oD.Location_ID==Location_ID
orderby oD.Event_Id descending
select new POCO.RealTime_Event_Queue{Event_Id = oD.Event_Id,
Location_ID = oD.Location_ID,
Match_Id = oD.Match_Id,
Event_Type = oD.Event_Type,
Event_Data = oD.Event_Data,
Processed = oD.Processed,
Event_Timestamp = oD.Event_Timestamp,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_REALTIME_EVENT_QUEUE_BY_ID:
 var _Result1 = (from oD in objDataContext.RealTime_Event_Queue
where oD.Event_Id==Event_Id
orderby oD.Event_Id descending
select new POCO.RealTime_Event_Queue{Event_Id = oD.Event_Id,
Location_ID = oD.Location_ID,
Match_Id = oD.Match_Id,
Event_Type = oD.Event_Type,
Event_Data = oD.Event_Data,
Processed = oD.Processed,
Event_Timestamp = oD.Event_Timestamp,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_REALTIME_EVENT_QUEUE_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.RealTime_Event_Queue
where oD.Event_Id==Event_Id
orderby oD.Event_Id descending
select new {oD.Event_Id,oD.Location_ID,oD.Match_Id,oD.Event_Type,oD.Event_Data,oD.Processed,oD.Event_Timestamp,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
RealTime_Event_Queue objRealTime_Event_Queue;
foreach (var objRea1 in _Result3)
 {
objRealTime_Event_Queue = new RealTime_Event_Queue();
objRealTime_Event_Queue.Event_Id = objRea1.Event_Id;
objRealTime_Event_Queue.Location_ID = objRea1.Location_ID;
objRealTime_Event_Queue.Match_Id = objRea1.Match_Id;
objRealTime_Event_Queue.Event_Type = objRea1.Event_Type;
objRealTime_Event_Queue.Event_Data = objRea1.Event_Data;
objRealTime_Event_Queue.Processed = objRea1.Processed;
objRealTime_Event_Queue.Event_Timestamp = objRea1.Event_Timestamp;
objRealTime_Event_Queue.Notes = objRea1.Notes;
objRealTime_Event_Queue.Is_Active = objRea1.Is_Active;
objRealTime_Event_Queue.Created_Date = objRea1.Created_Date;
objRealTime_Event_Queue.Created_By = objRea1.Created_By;
objRealTime_Event_Queue.Modified_Date = objRea1.Modified_Date;
objRealTime_Event_Queue.Modified_By = objRea1.Modified_By;
objRealTime_Event_Queue.Audit_Id = objRea1.Audit_Id;
objRealTime_Event_Queue.User_IP = objRea1.User_IP;
objRealTime_Event_Queue.Site_Id = objRea1.Site_Id;
objList.Add(objRealTime_Event_Queue);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
RealTime_Event_Queue objEntity = Entity.ConvertRealTime_Event_Queue();
objDataContext.RealTime_Event_Queue.Attach(objEntity);
objDataContext.RealTime_Event_Queue.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

