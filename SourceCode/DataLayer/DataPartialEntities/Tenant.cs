/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Tenant
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Tenant: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
TenantId=Entity[EntityMapper.Tenant.TENANTID].ConvertInteger();
TenantSecret=Entity[EntityMapper.Tenant.TENANTSECRET].ConvertString();
TenantName=Entity[EntityMapper.Tenant.TENANTNAME].ConvertString();
ContactEmail=Entity[EntityMapper.Tenant.CONTACTEMAIL].ConvertString();
SubscriptionId=Entity[EntityMapper.Tenant.SUBSCRIPTIONID].ConvertInteger();
SubscriptionStartDate=Entity[EntityMapper.Tenant.SUBSCRIPTIONSTARTDATE].ConvertDateTime();
SubscriptionEndDate=Entity[EntityMapper.Tenant.SUBSCRIPTIONENDDATE].ConvertDateTime();
Is_Active=Entity[EntityMapper.Tenant.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Tenant.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Tenant.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Tenant.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Tenant.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Tenant.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Tenant.USER_IP].ConvertString();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Tenant.Add(Entity.ConvertTenant());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Tenant objEntity = Entity.ConvertTenant();
objDataContext.Tenant.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_TENANTS_DATA:
  var _Result2 = objDataContext.Tenant.Select(j =>
new {TenantId = j.TenantId,
TenantSecret = j.TenantSecret,
TenantName = j.TenantName,
ContactEmail = j.ContactEmail,
SubscriptionId = j.SubscriptionId,
SubscriptionStartDate = j.SubscriptionStartDate,
SubscriptionEndDate = j.SubscriptionEndDate,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_TENANTS:
  var _Result = objDataContext.Tenant.Select(j =>
new POCO.Tenant{TenantId = j.TenantId,
TenantSecret = j.TenantSecret,
TenantName = j.TenantName,
ContactEmail = j.ContactEmail,
SubscriptionId = j.SubscriptionId,
SubscriptionStartDate = j.SubscriptionStartDate,
SubscriptionEndDate = j.SubscriptionEndDate,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_TENANT_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Tenant
where oD.Location_ID==Location_ID
orderby oD.TenantId descending
select new POCO.Tenant{TenantId = oD.TenantId,
TenantSecret = oD.TenantSecret,
TenantName = oD.TenantName,
ContactEmail = oD.ContactEmail,
SubscriptionId = oD.SubscriptionId,
SubscriptionStartDate = oD.SubscriptionStartDate,
SubscriptionEndDate = oD.SubscriptionEndDate,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_TENANT_BY_ID:
 var _Result1 = (from oD in objDataContext.Tenant
where oD.TenantId==TenantId
orderby oD.TenantId descending
select new POCO.Tenant{TenantId = oD.TenantId,
TenantSecret = oD.TenantSecret,
TenantName = oD.TenantName,
ContactEmail = oD.ContactEmail,
SubscriptionId = oD.SubscriptionId,
SubscriptionStartDate = oD.SubscriptionStartDate,
SubscriptionEndDate = oD.SubscriptionEndDate,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP
}).ToList();
return _Result1;
case DomainMapper.GET_TENANT_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Tenant
where oD.TenantId==TenantId
orderby oD.TenantId descending
select new {oD.TenantId,oD.TenantSecret,oD.TenantName,oD.ContactEmail,oD.SubscriptionId,oD.SubscriptionStartDate,oD.SubscriptionEndDate,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP };
ArrayList objList = new ArrayList();
Tenant objTenant;
foreach (var objTen1 in _Result3)
 {
objTenant = new Tenant();
objTenant.TenantId = objTen1.TenantId;
objTenant.TenantSecret = objTen1.TenantSecret;
objTenant.TenantName = objTen1.TenantName;
objTenant.ContactEmail = objTen1.ContactEmail;
objTenant.SubscriptionId = objTen1.SubscriptionId;
objTenant.SubscriptionStartDate = objTen1.SubscriptionStartDate;
objTenant.SubscriptionEndDate = objTen1.SubscriptionEndDate;
objTenant.Is_Active = objTen1.Is_Active;
objTenant.Created_Date = objTen1.Created_Date;
objTenant.Created_By = objTen1.Created_By;
objTenant.Modified_Date = objTen1.Modified_Date;
objTenant.Modified_By = objTen1.Modified_By;
objTenant.Audit_Id = objTen1.Audit_Id;
objTenant.User_IP = objTen1.User_IP;
objList.Add(objTenant);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Tenant objEntity = Entity.ConvertTenant();
objDataContext.Tenant.Attach(objEntity);
objDataContext.Tenant.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

