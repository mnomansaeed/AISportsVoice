/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Commentary_Feed
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Commentary_Feed: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Feed_Id=Entity[EntityMapper.Commentary_Feed.FEED_ID].ConvertLong();
Location_ID=Entity[EntityMapper.Commentary_Feed.LOCATION_ID].ConvertInteger();
Match_Id=Entity[EntityMapper.Commentary_Feed.MATCH_ID].ConvertInteger();
Language_Code=Entity[EntityMapper.Commentary_Feed.LANGUAGE_CODE].ConvertString();
Commentary_Text=Entity[EntityMapper.Commentary_Feed.COMMENTARY_TEXT].ConvertString();
Voice_Profile=Entity[EntityMapper.Commentary_Feed.VOICE_PROFILE].ConvertString();
Timestamp=Entity[EntityMapper.Commentary_Feed.TIMESTAMP].ConvertDateTime();
Tone=Entity[EntityMapper.Commentary_Feed.TONE].ConvertString();
Notes=Entity[EntityMapper.Commentary_Feed.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Commentary_Feed.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Commentary_Feed.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Commentary_Feed.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Commentary_Feed.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Commentary_Feed.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Commentary_Feed.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Commentary_Feed.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Commentary_Feed.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Commentary_Feed.Add(Entity.ConvertCommentary_Feed());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Commentary_Feed objEntity = Entity.ConvertCommentary_Feed();
objDataContext.Commentary_Feed.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_COMMENTARY_FEEDS_DATA:
  var _Result2 = objDataContext.Commentary_Feed.Select(j =>
new {Feed_Id = j.Feed_Id,
Location_ID = j.Location_ID,
Match_Id = j.Match_Id,
Language_Code = j.Language_Code,
Commentary_Text = j.Commentary_Text,
Voice_Profile = j.Voice_Profile,
Timestamp = j.Timestamp,
Tone = j.Tone,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_COMMENTARY_FEEDS:
  var _Result = objDataContext.Commentary_Feed.Select(j =>
new POCO.Commentary_Feed{Feed_Id = j.Feed_Id,
Location_ID = j.Location_ID,
Match_Id = j.Match_Id,
Language_Code = j.Language_Code,
Commentary_Text = j.Commentary_Text,
Voice_Profile = j.Voice_Profile,
Timestamp = j.Timestamp,
Tone = j.Tone,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_COMMENTARY_FEED_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Commentary_Feed
where oD.Location_ID==Location_ID
orderby oD.Feed_Id descending
select new POCO.Commentary_Feed{Feed_Id = oD.Feed_Id,
Location_ID = oD.Location_ID,
Match_Id = oD.Match_Id,
Language_Code = oD.Language_Code,
Commentary_Text = oD.Commentary_Text,
Voice_Profile = oD.Voice_Profile,
Timestamp = oD.Timestamp,
Tone = oD.Tone,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_COMMENTARY_FEED_BY_ID:
 var _Result1 = (from oD in objDataContext.Commentary_Feed
where oD.Feed_Id==Feed_Id
orderby oD.Feed_Id descending
select new POCO.Commentary_Feed{Feed_Id = oD.Feed_Id,
Location_ID = oD.Location_ID,
Match_Id = oD.Match_Id,
Language_Code = oD.Language_Code,
Commentary_Text = oD.Commentary_Text,
Voice_Profile = oD.Voice_Profile,
Timestamp = oD.Timestamp,
Tone = oD.Tone,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_COMMENTARY_FEED_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Commentary_Feed
where oD.Feed_Id==Feed_Id
orderby oD.Feed_Id descending
select new {oD.Feed_Id,oD.Location_ID,oD.Match_Id,oD.Language_Code,oD.Commentary_Text,oD.Voice_Profile,oD.Timestamp,oD.Tone,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Commentary_Feed objCommentary_Feed;
foreach (var objCom1 in _Result3)
 {
objCommentary_Feed = new Commentary_Feed();
objCommentary_Feed.Feed_Id = objCom1.Feed_Id;
objCommentary_Feed.Location_ID = objCom1.Location_ID;
objCommentary_Feed.Match_Id = objCom1.Match_Id;
objCommentary_Feed.Language_Code = objCom1.Language_Code;
objCommentary_Feed.Commentary_Text = objCom1.Commentary_Text;
objCommentary_Feed.Voice_Profile = objCom1.Voice_Profile;
objCommentary_Feed.Timestamp = objCom1.Timestamp;
objCommentary_Feed.Tone = objCom1.Tone;
objCommentary_Feed.Notes = objCom1.Notes;
objCommentary_Feed.Is_Active = objCom1.Is_Active;
objCommentary_Feed.Created_Date = objCom1.Created_Date;
objCommentary_Feed.Created_By = objCom1.Created_By;
objCommentary_Feed.Modified_Date = objCom1.Modified_Date;
objCommentary_Feed.Modified_By = objCom1.Modified_By;
objCommentary_Feed.Audit_Id = objCom1.Audit_Id;
objCommentary_Feed.User_IP = objCom1.User_IP;
objCommentary_Feed.Site_Id = objCom1.Site_Id;
objList.Add(objCommentary_Feed);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Commentary_Feed objEntity = Entity.ConvertCommentary_Feed();
objDataContext.Commentary_Feed.Attach(objEntity);
objDataContext.Commentary_Feed.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

