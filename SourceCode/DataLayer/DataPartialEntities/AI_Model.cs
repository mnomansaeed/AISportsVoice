/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: AI_Model
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class AI_Model: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Model_Id=Entity[EntityMapper.AI_Model.MODEL_ID].ConvertInteger();
Location_ID=Entity[EntityMapper.AI_Model.LOCATION_ID].ConvertInteger();
Model_Type=Entity[EntityMapper.AI_Model.MODEL_TYPE].ConvertString();
Version=Entity[EntityMapper.AI_Model.VERSION].ConvertString();
Model_Source=Entity[EntityMapper.AI_Model.MODEL_SOURCE].ConvertString();
Status=Entity[EntityMapper.AI_Model.STATUS].ConvertString();
Trained_On=Entity[EntityMapper.AI_Model.TRAINED_ON].ConvertDateTime();
Notes=Entity[EntityMapper.AI_Model.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.AI_Model.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.AI_Model.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.AI_Model.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.AI_Model.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.AI_Model.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.AI_Model.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.AI_Model.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.AI_Model.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.AI_Model.Add(Entity.ConvertAI_Model());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
AI_Model objEntity = Entity.ConvertAI_Model();
objDataContext.AI_Model.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_AI_MODELS_DATA:
  var _Result2 = objDataContext.AI_Model.Select(j =>
new {Model_Id = j.Model_Id,
Location_ID = j.Location_ID,
Model_Type = j.Model_Type,
Version = j.Version,
Model_Source = j.Model_Source,
Status = j.Status,
Trained_On = j.Trained_On,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_AI_MODELS:
  var _Result = objDataContext.AI_Model.Select(j =>
new POCO.AI_Model{Model_Id = j.Model_Id,
Location_ID = j.Location_ID,
Model_Type = j.Model_Type,
Version = j.Version,
Model_Source = j.Model_Source,
Status = j.Status,
Trained_On = j.Trained_On,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_AI_MODEL_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.AI_Model
where oD.Location_ID==Location_ID
orderby oD.Model_Id descending
select new POCO.AI_Model{Model_Id = oD.Model_Id,
Location_ID = oD.Location_ID,
Model_Type = oD.Model_Type,
Version = oD.Version,
Model_Source = oD.Model_Source,
Status = oD.Status,
Trained_On = oD.Trained_On,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_AI_MODEL_BY_ID:
 var _Result1 = (from oD in objDataContext.AI_Model
where oD.Model_Id==Model_Id
orderby oD.Model_Id descending
select new POCO.AI_Model{Model_Id = oD.Model_Id,
Location_ID = oD.Location_ID,
Model_Type = oD.Model_Type,
Version = oD.Version,
Model_Source = oD.Model_Source,
Status = oD.Status,
Trained_On = oD.Trained_On,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_AI_MODEL_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.AI_Model
where oD.Model_Id==Model_Id
orderby oD.Model_Id descending
select new {oD.Model_Id,oD.Location_ID,oD.Model_Type,oD.Version,oD.Model_Source,oD.Status,oD.Trained_On,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
AI_Model objAI_Model;
foreach (var objAI_1 in _Result3)
 {
objAI_Model = new AI_Model();
objAI_Model.Model_Id = objAI_1.Model_Id;
objAI_Model.Location_ID = objAI_1.Location_ID;
objAI_Model.Model_Type = objAI_1.Model_Type;
objAI_Model.Version = objAI_1.Version;
objAI_Model.Model_Source = objAI_1.Model_Source;
objAI_Model.Status = objAI_1.Status;
objAI_Model.Trained_On = objAI_1.Trained_On;
objAI_Model.Notes = objAI_1.Notes;
objAI_Model.Is_Active = objAI_1.Is_Active;
objAI_Model.Created_Date = objAI_1.Created_Date;
objAI_Model.Created_By = objAI_1.Created_By;
objAI_Model.Modified_Date = objAI_1.Modified_Date;
objAI_Model.Modified_By = objAI_1.Modified_By;
objAI_Model.Audit_Id = objAI_1.Audit_Id;
objAI_Model.User_IP = objAI_1.User_IP;
objAI_Model.Site_Id = objAI_1.Site_Id;
objList.Add(objAI_Model);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
AI_Model objEntity = Entity.ConvertAI_Model();
objDataContext.AI_Model.Attach(objEntity);
objDataContext.AI_Model.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

