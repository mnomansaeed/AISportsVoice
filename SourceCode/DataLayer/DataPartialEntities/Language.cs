/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Language
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Language: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Language_Code=Entity[EntityMapper.Language.LANGUAGE_CODE].ConvertString();
Location_ID=Entity[EntityMapper.Language.LOCATION_ID].ConvertInteger();
Language_Name=Entity[EntityMapper.Language.LANGUAGE_NAME].ConvertString();
Region=Entity[EntityMapper.Language.REGION].ConvertString();
Is_Supported=Entity[EntityMapper.Language.IS_SUPPORTED].ConvertBoolean();
Notes=Entity[EntityMapper.Language.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Language.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Language.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Language.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Language.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Language.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Language.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Language.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Language.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Language.Add(Entity.ConvertLanguage());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Language objEntity = Entity.ConvertLanguage();
objDataContext.Language.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_LANGUAGES_DATA:
  var _Result2 = objDataContext.Language.Select(j =>
new {Language_Code = j.Language_Code,
Location_ID = j.Location_ID,
Language_Name = j.Language_Name,
Region = j.Region,
Is_Supported = j.Is_Supported,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_LANGUAGES:
  var _Result = objDataContext.Language.Select(j =>
new POCO.Language{Language_Code = j.Language_Code,
Location_ID = j.Location_ID,
Language_Name = j.Language_Name,
Region = j.Region,
Is_Supported = j.Is_Supported,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_LANGUAGE_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Language
where oD.Location_ID==Location_ID
orderby oD.Language_Code descending
select new POCO.Language{Language_Code = oD.Language_Code,
Location_ID = oD.Location_ID,
Language_Name = oD.Language_Name,
Region = oD.Region,
Is_Supported = oD.Is_Supported,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_LANGUAGE_BY_ID:
 var _Result1 = (from oD in objDataContext.Language
where oD.Language_Code==Language_Code
orderby oD.Language_Code descending
select new POCO.Language{Language_Code = oD.Language_Code,
Location_ID = oD.Location_ID,
Language_Name = oD.Language_Name,
Region = oD.Region,
Is_Supported = oD.Is_Supported,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_LANGUAGE_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Language
where oD.Language_Code==Language_Code
orderby oD.Language_Code descending
select new {oD.Language_Code,oD.Location_ID,oD.Language_Name,oD.Region,oD.Is_Supported,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Language objLanguage;
foreach (var objLan1 in _Result3)
 {
objLanguage = new Language();
objLanguage.Language_Code = objLan1.Language_Code;
objLanguage.Location_ID = objLan1.Location_ID;
objLanguage.Language_Name = objLan1.Language_Name;
objLanguage.Region = objLan1.Region;
objLanguage.Is_Supported = objLan1.Is_Supported;
objLanguage.Notes = objLan1.Notes;
objLanguage.Is_Active = objLan1.Is_Active;
objLanguage.Created_Date = objLan1.Created_Date;
objLanguage.Created_By = objLan1.Created_By;
objLanguage.Modified_Date = objLan1.Modified_Date;
objLanguage.Modified_By = objLan1.Modified_By;
objLanguage.Audit_Id = objLan1.Audit_Id;
objLanguage.User_IP = objLan1.User_IP;
objLanguage.Site_Id = objLan1.Site_Id;
objList.Add(objLanguage);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Language objEntity = Entity.ConvertLanguage();
objDataContext.Language.Attach(objEntity);
objDataContext.Language.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

