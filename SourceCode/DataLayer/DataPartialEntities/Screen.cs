/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Screen
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Screen: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
ScreenId=Entity[EntityMapper.Screen.SCREENID].ConvertInteger();
Location_ID=Entity[EntityMapper.Screen.LOCATION_ID].ConvertInteger();
ScreenName=Entity[EntityMapper.Screen.SCREENNAME].ConvertString();
Description=Entity[EntityMapper.Screen.DESCRIPTION].ConvertString();
Is_Active=Entity[EntityMapper.Screen.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Screen.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Screen.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Screen.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Screen.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Screen.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Screen.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Screen.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Screen.Add(Entity.ConvertScreen());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Screen objEntity = Entity.ConvertScreen();
objDataContext.Screen.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_SCREENS_DATA:
  var _Result2 = objDataContext.Screen.Select(j =>
new {ScreenId = j.ScreenId,
Location_ID = j.Location_ID,
ScreenName = j.ScreenName,
Description = j.Description,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_SCREENS:
  var _Result = objDataContext.Screen.Select(j =>
new POCO.Screen{ScreenId = j.ScreenId,
Location_ID = j.Location_ID,
ScreenName = j.ScreenName,
Description = j.Description,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_SCREEN_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Screen
where oD.Location_ID==Location_ID
orderby oD.ScreenId descending
select new POCO.Screen{ScreenId = oD.ScreenId,
Location_ID = oD.Location_ID,
ScreenName = oD.ScreenName,
Description = oD.Description,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_SCREEN_BY_ID:
 var _Result1 = (from oD in objDataContext.Screen
where oD.ScreenId==ScreenId
orderby oD.ScreenId descending
select new POCO.Screen{ScreenId = oD.ScreenId,
Location_ID = oD.Location_ID,
ScreenName = oD.ScreenName,
Description = oD.Description,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_SCREEN_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Screen
where oD.ScreenId==ScreenId
orderby oD.ScreenId descending
select new {oD.ScreenId,oD.Location_ID,oD.ScreenName,oD.Description,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Screen objScreen;
foreach (var objScr1 in _Result3)
 {
objScreen = new Screen();
objScreen.ScreenId = objScr1.ScreenId;
objScreen.Location_ID = objScr1.Location_ID;
objScreen.ScreenName = objScr1.ScreenName;
objScreen.Description = objScr1.Description;
objScreen.Is_Active = objScr1.Is_Active;
objScreen.Created_Date = objScr1.Created_Date;
objScreen.Created_By = objScr1.Created_By;
objScreen.Modified_Date = objScr1.Modified_Date;
objScreen.Modified_By = objScr1.Modified_By;
objScreen.Audit_Id = objScr1.Audit_Id;
objScreen.User_IP = objScr1.User_IP;
objScreen.Site_Id = objScr1.Site_Id;
objList.Add(objScreen);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Screen objEntity = Entity.ConvertScreen();
objDataContext.Screen.Attach(objEntity);
objDataContext.Screen.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

