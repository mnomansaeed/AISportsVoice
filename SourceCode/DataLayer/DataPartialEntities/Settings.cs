/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Settings
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
    public partial class Settings : DataBase, IData
    {
        #region IData Members
        string IData.InsertQuery()
        {
            throw new NotImplementedException();
        }
        string IData.UpdateQuery()
        {
            throw new NotImplementedException();
        }
        string IData.DeleteQuery()
        {
            throw new NotImplementedException();
        }
        string IData.SelectQuery()
        {
            throw new NotImplementedException();
        }
        string IData.SelectAllQuery()
        {
            throw new NotImplementedException();
        }
        IDbCommand IData.InsertSP()
        {
            throw new NotImplementedException();
        }
        IDbCommand IData.UpdateSP()
        {
            throw new NotImplementedException();
        }
        IDbCommand IData.DeleteSP()
        {
            throw new NotImplementedException();
        }
        IDbCommand IData.SelectSP()
        {
            throw new NotImplementedException();
        }
        IDbCommand IData.SelectAllSP()
        {
            throw new NotImplementedException();
        }
        void IData.Fill(Hashtable Entity)
        {
            SettingId = Entity[EntityMapper.Settings.SETTINGID].ConvertInteger();
            SettingKey = Entity[EntityMapper.Settings.SETTINGKEY].ConvertString();
            SettingValue = Entity[EntityMapper.Settings.SETTINGVALUE].ConvertString();
            Description = Entity[EntityMapper.Settings.DESCRIPTION].ConvertString();
            Module = Entity[EntityMapper.Settings.MODULE].ConvertString();
            DataType = Entity[EntityMapper.Settings.DATATYPE].ConvertString();
            Is_Active = Entity[EntityMapper.Settings.IS_ACTIVE].ConvertByte();
            Created_Date = Entity[EntityMapper.Settings.CREATED_DATE].ConvertDateTime();
            Created_By = Entity[EntityMapper.Settings.CREATED_BY].ConvertInteger();
            Modified_Date = Entity[EntityMapper.Settings.MODIFIED_DATE].ConvertDateTime();
            Modified_By = Entity[EntityMapper.Settings.MODIFIED_BY].ConvertInteger();
            Audit_Id = Entity[EntityMapper.Settings.AUDIT_ID].ConvertLong();
            User_IP = Entity[EntityMapper.Settings.USER_IP].ConvertString();
            Site_Id = Entity[EntityMapper.Settings.SITE_ID].ConvertInteger();
        }
        void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
        {
            objDataContext.Settings.Add(Entity.ConvertSetting());
        }
        void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
        {
            Settings objEntity = Entity.ConvertSetting();
            objDataContext.Settings.Attach(objEntity);
        }
        public IList SelectEntity(DALEntities objDataContext, string Behaviour)
        {
            try
            {
                switch (Behaviour.ToString())
                {
                    case DomainMapper.GET_SETTINGS_DATA:
                        var _Result2 = objDataContext.Settings.Select(j =>
                      new
                      {
                          SettingId = j.SettingId,
                          SettingKey = j.SettingKey,
                          SettingValue = j.SettingValue,
                          Description = j.Description,
                          Module = j.Module,
                          DataType = j.DataType,
                          Is_Active = j.Is_Active,
                          Created_Date = j.Created_Date,
                          Created_By = j.Created_By,
                          Modified_Date = j.Modified_Date,
                          Modified_By = j.Modified_By,
                          Audit_Id = j.Audit_Id,
                          User_IP = j.User_IP,
                          Site_Id = j.Site_Id
                      }).ToList();
                        return _Result2.ToList();
                    case DomainMapper.GET_SETTINGS:
                        var _Result = objDataContext.Settings.Select(j =>
                      new POCO.Settings
                      {
                          SettingId = j.SettingId,
                          SettingKey = j.SettingKey,
                          SettingValue = j.SettingValue,
                          Description = j.Description,
                          Module = j.Module,
                          DataType = j.DataType,
                          Is_Active = j.Is_Active,
                          Created_Date = j.Created_Date,
                          Created_By = j.Created_By,
                          Modified_Date = j.Modified_Date,
                          Modified_By = j.Modified_By,
                          Audit_Id = j.Audit_Id,
                          User_IP = j.User_IP,
                          Site_Id = j.Site_Id
                      }).ToList();
                        return _Result.ToList();
                    case DomainMapper.GET_SETTING_BY_LOCATION_ID:
                    /* var _Result4 = (from oD in objDataContext.Settings
                    where oD.Location_ID==Location_ID
                    orderby oD.SettingId descending
                    select new POCO.Settings{SettingId = oD.SettingId,
                    SettingKey = oD.SettingKey,
                    SettingValue = oD.SettingValue,
                    Description = oD.Description,
                    Module = oD.Module,
                    DataType = oD.DataType,
                    Is_Active = oD.Is_Active,
                    Created_Date = oD.Created_Date,
                    Created_By = oD.Created_By,
                    Modified_Date = oD.Modified_Date,
                    Modified_By = oD.Modified_By,
                    Audit_Id = oD.Audit_Id,
                    User_IP = oD.User_IP,
                    Site_Id = oD.Site_Id
                    }).ToList();
                    return _Result4.ToList();*/
                    case DomainMapper.GET_SETTING_BY_ID:
                        var _Result1 = (from oD in objDataContext.Settings
                                        where oD.SettingId == SettingId
                                        orderby oD.SettingId descending
                                        select new POCO.Settings
                                        {
                                            SettingId = oD.SettingId,
                                            SettingKey = oD.SettingKey,
                                            SettingValue = oD.SettingValue,
                                            Description = oD.Description,
                                            Module = oD.Module,
                                            DataType = oD.DataType,
                                            Is_Active = oD.Is_Active,
                                            Created_Date = oD.Created_Date,
                                            Created_By = oD.Created_By,
                                            Modified_Date = oD.Modified_Date,
                                            Modified_By = oD.Modified_By,
                                            Audit_Id = oD.Audit_Id,
                                            User_IP = oD.User_IP,
                                            Site_Id = oD.Site_Id
                                        }).ToList();
                        return _Result1;
                    case DomainMapper.GET_SETTING_BY_ID_DATA:
                        var _Result3 = from oD in objDataContext.Settings
                                       where oD.SettingId == SettingId
                                       orderby oD.SettingId descending
                                       select new { oD.SettingId, oD.SettingKey, oD.SettingValue, oD.Description, oD.Module, oD.DataType, oD.Is_Active, oD.Created_Date, oD.Created_By, oD.Modified_Date, oD.Modified_By, oD.Audit_Id, oD.User_IP, oD.Site_Id };
                        ArrayList objList = new ArrayList();
                        Settings objSettings;
                        foreach (var objSet1 in _Result3)
                        {
                            objSettings = new Settings();
                            objSettings.SettingId = objSet1.SettingId;
                            objSettings.SettingKey = objSet1.SettingKey;
                            objSettings.SettingValue = objSet1.SettingValue;
                            objSettings.Description = objSet1.Description;
                            objSettings.Module = objSet1.Module;
                            objSettings.DataType = objSet1.DataType;
                            objSettings.Is_Active = objSet1.Is_Active;
                            objSettings.Created_Date = objSet1.Created_Date;
                            objSettings.Created_By = objSet1.Created_By;
                            objSettings.Modified_Date = objSet1.Modified_Date;
                            objSettings.Modified_By = objSet1.Modified_By;
                            objSettings.Audit_Id = objSet1.Audit_Id;
                            objSettings.User_IP = objSet1.User_IP;
                            objSettings.Site_Id = objSet1.Site_Id;
                            objList.Add(objSettings);
                        }
                        return objList;
                    default:
                        return null;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        void IData.AddChild(IData childEntity)
        {
            //_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
            throw new NotImplementedException();
        }
        public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
        {
            //throw new NotImplementedException();
            Settings objEntity = Entity.ConvertSetting();
            objDataContext.Settings.Attach(objEntity);
            objDataContext.Settings.Remove(objEntity);
        }
        #endregion
    }
}
/*****************************************************************************************************************/

