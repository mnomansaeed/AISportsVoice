/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Employee
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Employee: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
EmployeeId=Entity[EntityMapper.Employee.EMPLOYEEID].ConvertInteger();
Location_ID=Entity[EntityMapper.Employee.LOCATION_ID].ConvertInteger();
EmployeeCode=Entity[EntityMapper.Employee.EMPLOYEECODE].ConvertString();
FirstName=Entity[EntityMapper.Employee.FIRSTNAME].ConvertString();
LastName=Entity[EntityMapper.Employee.LASTNAME].ConvertString();
MiddleName=Entity[EntityMapper.Employee.MIDDLENAME].ConvertString();
DateOfBirth=Entity[EntityMapper.Employee.DATEOFBIRTH].ConvertDateTime();
HireDate=Entity[EntityMapper.Employee.HIREDATE].ConvertDateTime();
JobTitle=Entity[EntityMapper.Employee.JOBTITLE].ConvertString();
DepartmentId=Entity[EntityMapper.Employee.DEPARTMENTID].ConvertInteger();
ManagerId=Entity[EntityMapper.Employee.MANAGERID].ConvertInteger();
Salary=Entity[EntityMapper.Employee.SALARY].ConvertDecimal();
Gender=Entity[EntityMapper.Employee.GENDER].ConvertString();
PhoneNumber=Entity[EntityMapper.Employee.PHONENUMBER].ConvertString();
Email=Entity[EntityMapper.Employee.EMAIL].ConvertString();
AddressLine1=Entity[EntityMapper.Employee.ADDRESSLINE1].ConvertString();
AddressLine2=Entity[EntityMapper.Employee.ADDRESSLINE2].ConvertString();
City=Entity[EntityMapper.Employee.CITY].ConvertString();
State=Entity[EntityMapper.Employee.STATE].ConvertString();
PostalCode=Entity[EntityMapper.Employee.POSTALCODE].ConvertString();
Country=Entity[EntityMapper.Employee.COUNTRY].ConvertString();
Notes=Entity[EntityMapper.Employee.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Employee.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Employee.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Employee.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Employee.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Employee.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Employee.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Employee.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Employee.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Employee.Add(Entity.ConvertEmployee());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Employee objEntity = Entity.ConvertEmployee();
objDataContext.Employee.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_EMPLOYEES_DATA:
  var _Result2 = objDataContext.Employee.Select(j =>
new {EmployeeId = j.EmployeeId,
Location_ID = j.Location_ID,
EmployeeCode = j.EmployeeCode,
FirstName = j.FirstName,
LastName = j.LastName,
MiddleName = j.MiddleName,
DateOfBirth = j.DateOfBirth,
HireDate = j.HireDate,
JobTitle = j.JobTitle,
DepartmentId = j.DepartmentId,
ManagerId = j.ManagerId,
Salary = j.Salary,
Gender = j.Gender,
PhoneNumber = j.PhoneNumber,
Email = j.Email,
AddressLine1 = j.AddressLine1,
AddressLine2 = j.AddressLine2,
City = j.City,
State = j.State,
PostalCode = j.PostalCode,
Country = j.Country,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_EMPLOYEES:
  var _Result = objDataContext.Employee.Select(j =>
new POCO.Employee{EmployeeId = j.EmployeeId,
Location_ID = j.Location_ID,
EmployeeCode = j.EmployeeCode,
FirstName = j.FirstName,
LastName = j.LastName,
MiddleName = j.MiddleName,
DateOfBirth = j.DateOfBirth,
HireDate = j.HireDate,
JobTitle = j.JobTitle,
DepartmentId = j.DepartmentId,
ManagerId = j.ManagerId,
Salary = j.Salary,
Gender = j.Gender,
PhoneNumber = j.PhoneNumber,
Email = j.Email,
AddressLine1 = j.AddressLine1,
AddressLine2 = j.AddressLine2,
City = j.City,
State = j.State,
PostalCode = j.PostalCode,
Country = j.Country,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_EMPLOYEE_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Employee
where oD.Location_ID==Location_ID
orderby oD.EmployeeId descending
select new POCO.Employee{EmployeeId = oD.EmployeeId,
Location_ID = oD.Location_ID,
EmployeeCode = oD.EmployeeCode,
FirstName = oD.FirstName,
LastName = oD.LastName,
MiddleName = oD.MiddleName,
DateOfBirth = oD.DateOfBirth,
HireDate = oD.HireDate,
JobTitle = oD.JobTitle,
DepartmentId = oD.DepartmentId,
ManagerId = oD.ManagerId,
Salary = oD.Salary,
Gender = oD.Gender,
PhoneNumber = oD.PhoneNumber,
Email = oD.Email,
AddressLine1 = oD.AddressLine1,
AddressLine2 = oD.AddressLine2,
City = oD.City,
State = oD.State,
PostalCode = oD.PostalCode,
Country = oD.Country,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_EMPLOYEE_BY_ID:
 var _Result1 = (from oD in objDataContext.Employee
where oD.EmployeeId==EmployeeId
orderby oD.EmployeeId descending
select new POCO.Employee{EmployeeId = oD.EmployeeId,
Location_ID = oD.Location_ID,
EmployeeCode = oD.EmployeeCode,
FirstName = oD.FirstName,
LastName = oD.LastName,
MiddleName = oD.MiddleName,
DateOfBirth = oD.DateOfBirth,
HireDate = oD.HireDate,
JobTitle = oD.JobTitle,
DepartmentId = oD.DepartmentId,
ManagerId = oD.ManagerId,
Salary = oD.Salary,
Gender = oD.Gender,
PhoneNumber = oD.PhoneNumber,
Email = oD.Email,
AddressLine1 = oD.AddressLine1,
AddressLine2 = oD.AddressLine2,
City = oD.City,
State = oD.State,
PostalCode = oD.PostalCode,
Country = oD.Country,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_EMPLOYEE_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Employee
where oD.EmployeeId==EmployeeId
orderby oD.EmployeeId descending
select new {oD.EmployeeId,oD.Location_ID,oD.EmployeeCode,oD.FirstName,oD.LastName,oD.MiddleName,oD.DateOfBirth,oD.HireDate,oD.JobTitle,oD.DepartmentId,oD.ManagerId,oD.Salary,oD.Gender,oD.PhoneNumber,oD.Email,oD.AddressLine1,oD.AddressLine2,oD.City,oD.State,oD.PostalCode,oD.Country,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Employee objEmployee;
foreach (var objEmp1 in _Result3)
 {
objEmployee = new Employee();
objEmployee.EmployeeId = objEmp1.EmployeeId;
objEmployee.Location_ID = objEmp1.Location_ID;
objEmployee.EmployeeCode = objEmp1.EmployeeCode;
objEmployee.FirstName = objEmp1.FirstName;
objEmployee.LastName = objEmp1.LastName;
objEmployee.MiddleName = objEmp1.MiddleName;
objEmployee.DateOfBirth = objEmp1.DateOfBirth;
objEmployee.HireDate = objEmp1.HireDate;
objEmployee.JobTitle = objEmp1.JobTitle;
objEmployee.DepartmentId = objEmp1.DepartmentId;
objEmployee.ManagerId = objEmp1.ManagerId;
objEmployee.Salary = objEmp1.Salary;
objEmployee.Gender = objEmp1.Gender;
objEmployee.PhoneNumber = objEmp1.PhoneNumber;
objEmployee.Email = objEmp1.Email;
objEmployee.AddressLine1 = objEmp1.AddressLine1;
objEmployee.AddressLine2 = objEmp1.AddressLine2;
objEmployee.City = objEmp1.City;
objEmployee.State = objEmp1.State;
objEmployee.PostalCode = objEmp1.PostalCode;
objEmployee.Country = objEmp1.Country;
objEmployee.Notes = objEmp1.Notes;
objEmployee.Is_Active = objEmp1.Is_Active;
objEmployee.Created_Date = objEmp1.Created_Date;
objEmployee.Created_By = objEmp1.Created_By;
objEmployee.Modified_Date = objEmp1.Modified_Date;
objEmployee.Modified_By = objEmp1.Modified_By;
objEmployee.Audit_Id = objEmp1.Audit_Id;
objEmployee.User_IP = objEmp1.User_IP;
objEmployee.Site_Id = objEmp1.Site_Id;
objList.Add(objEmployee);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Employee objEntity = Entity.ConvertEmployee();
objDataContext.Employee.Attach(objEntity);
objDataContext.Employee.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

