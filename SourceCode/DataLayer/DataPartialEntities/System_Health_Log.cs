/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: System_Health_Log
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class System_Health_Log: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Health_Log_Id=Entity[EntityMapper.System_Health_Log.HEALTH_LOG_ID].ConvertLong();
Location_ID=Entity[EntityMapper.System_Health_Log.LOCATION_ID].ConvertInteger();
Component_Name=Entity[EntityMapper.System_Health_Log.COMPONENT_NAME].ConvertString();
Metric_Name=Entity[EntityMapper.System_Health_Log.METRIC_NAME].ConvertString();
Metric_Value=Entity[EntityMapper.System_Health_Log.METRIC_VALUE].ConvertDecimal();
Recorded_At=Entity[EntityMapper.System_Health_Log.RECORDED_AT].ConvertDateTime();
Severity=Entity[EntityMapper.System_Health_Log.SEVERITY].ConvertString();
Notes=Entity[EntityMapper.System_Health_Log.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.System_Health_Log.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.System_Health_Log.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.System_Health_Log.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.System_Health_Log.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.System_Health_Log.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.System_Health_Log.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.System_Health_Log.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.System_Health_Log.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.System_Health_Log.Add(Entity.ConvertSystem_Health_Log());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
System_Health_Log objEntity = Entity.ConvertSystem_Health_Log();
objDataContext.System_Health_Log.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_SYSTEM_HEALTH_LOGS_DATA:
  var _Result2 = objDataContext.System_Health_Log.Select(j =>
new {Health_Log_Id = j.Health_Log_Id,
Location_ID = j.Location_ID,
Component_Name = j.Component_Name,
Metric_Name = j.Metric_Name,
Metric_Value = j.Metric_Value,
Recorded_At = j.Recorded_At,
Severity = j.Severity,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_SYSTEM_HEALTH_LOGS:
  var _Result = objDataContext.System_Health_Log.Select(j =>
new POCO.System_Health_Log{Health_Log_Id = j.Health_Log_Id,
Location_ID = j.Location_ID,
Component_Name = j.Component_Name,
Metric_Name = j.Metric_Name,
Metric_Value = j.Metric_Value,
Recorded_At = j.Recorded_At,
Severity = j.Severity,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_SYSTEM_HEALTH_LOG_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.System_Health_Log
where oD.Location_ID==Location_ID
orderby oD.Health_Log_Id descending
select new POCO.System_Health_Log{Health_Log_Id = oD.Health_Log_Id,
Location_ID = oD.Location_ID,
Component_Name = oD.Component_Name,
Metric_Name = oD.Metric_Name,
Metric_Value = oD.Metric_Value,
Recorded_At = oD.Recorded_At,
Severity = oD.Severity,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_SYSTEM_HEALTH_LOG_BY_ID:
 var _Result1 = (from oD in objDataContext.System_Health_Log
where oD.Health_Log_Id==Health_Log_Id
orderby oD.Health_Log_Id descending
select new POCO.System_Health_Log{Health_Log_Id = oD.Health_Log_Id,
Location_ID = oD.Location_ID,
Component_Name = oD.Component_Name,
Metric_Name = oD.Metric_Name,
Metric_Value = oD.Metric_Value,
Recorded_At = oD.Recorded_At,
Severity = oD.Severity,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_SYSTEM_HEALTH_LOG_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.System_Health_Log
where oD.Health_Log_Id==Health_Log_Id
orderby oD.Health_Log_Id descending
select new {oD.Health_Log_Id,oD.Location_ID,oD.Component_Name,oD.Metric_Name,oD.Metric_Value,oD.Recorded_At,oD.Severity,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
System_Health_Log objSystem_Health_Log;
foreach (var objSys1 in _Result3)
 {
objSystem_Health_Log = new System_Health_Log();
objSystem_Health_Log.Health_Log_Id = objSys1.Health_Log_Id;
objSystem_Health_Log.Location_ID = objSys1.Location_ID;
objSystem_Health_Log.Component_Name = objSys1.Component_Name;
objSystem_Health_Log.Metric_Name = objSys1.Metric_Name;
objSystem_Health_Log.Metric_Value = objSys1.Metric_Value;
objSystem_Health_Log.Recorded_At = objSys1.Recorded_At;
objSystem_Health_Log.Severity = objSys1.Severity;
objSystem_Health_Log.Notes = objSys1.Notes;
objSystem_Health_Log.Is_Active = objSys1.Is_Active;
objSystem_Health_Log.Created_Date = objSys1.Created_Date;
objSystem_Health_Log.Created_By = objSys1.Created_By;
objSystem_Health_Log.Modified_Date = objSys1.Modified_Date;
objSystem_Health_Log.Modified_By = objSys1.Modified_By;
objSystem_Health_Log.Audit_Id = objSys1.Audit_Id;
objSystem_Health_Log.User_IP = objSys1.User_IP;
objSystem_Health_Log.Site_Id = objSys1.Site_Id;
objList.Add(objSystem_Health_Log);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
System_Health_Log objEntity = Entity.ConvertSystem_Health_Log();
objDataContext.System_Health_Log.Attach(objEntity);
objDataContext.System_Health_Log.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

