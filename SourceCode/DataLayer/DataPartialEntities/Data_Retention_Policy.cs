/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Data_Retention_Policy
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Data_Retention_Policy: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Policy_Id=Entity[EntityMapper.Data_Retention_Policy.POLICY_ID].ConvertInteger();
Location_ID=Entity[EntityMapper.Data_Retention_Policy.LOCATION_ID].ConvertInteger();
Data_Type=Entity[EntityMapper.Data_Retention_Policy.DATA_TYPE].ConvertString();
Retention_Period_Days=Entity[EntityMapper.Data_Retention_Policy.RETENTION_PERIOD_DAYS].ConvertInteger();
Auto_Anonymize=Entity[EntityMapper.Data_Retention_Policy.AUTO_ANONYMIZE].ConvertBoolean();
Region_Lock=Entity[EntityMapper.Data_Retention_Policy.REGION_LOCK].ConvertBoolean();
Enforced_From=Entity[EntityMapper.Data_Retention_Policy.ENFORCED_FROM].ConvertDateTime();
Notes=Entity[EntityMapper.Data_Retention_Policy.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Data_Retention_Policy.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Data_Retention_Policy.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Data_Retention_Policy.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Data_Retention_Policy.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Data_Retention_Policy.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Data_Retention_Policy.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Data_Retention_Policy.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Data_Retention_Policy.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Data_Retention_Policy.Add(Entity.ConvertData_Retention_Policy());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Data_Retention_Policy objEntity = Entity.ConvertData_Retention_Policy();
objDataContext.Data_Retention_Policy.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_DATA_RETENTION_POLICIES_DATA:
  var _Result2 = objDataContext.Data_Retention_Policy.Select(j =>
new {Policy_Id = j.Policy_Id,
Location_ID = j.Location_ID,
Data_Type = j.Data_Type,
Retention_Period_Days = j.Retention_Period_Days,
Auto_Anonymize = j.Auto_Anonymize,
Region_Lock = j.Region_Lock,
Enforced_From = j.Enforced_From,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_DATA_RETENTION_POLICIES:
  var _Result = objDataContext.Data_Retention_Policy.Select(j =>
new POCO.Data_Retention_Policy{Policy_Id = j.Policy_Id,
Location_ID = j.Location_ID,
Data_Type = j.Data_Type,
Retention_Period_Days = j.Retention_Period_Days,
Auto_Anonymize = j.Auto_Anonymize,
Region_Lock = j.Region_Lock,
Enforced_From = j.Enforced_From,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_DATA_RETENTION_POLICY_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Data_Retention_Policy
where oD.Location_ID==Location_ID
orderby oD.Policy_Id descending
select new POCO.Data_Retention_Policy{Policy_Id = oD.Policy_Id,
Location_ID = oD.Location_ID,
Data_Type = oD.Data_Type,
Retention_Period_Days = oD.Retention_Period_Days,
Auto_Anonymize = oD.Auto_Anonymize,
Region_Lock = oD.Region_Lock,
Enforced_From = oD.Enforced_From,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_DATA_RETENTION_POLICY_BY_ID:
 var _Result1 = (from oD in objDataContext.Data_Retention_Policy
where oD.Policy_Id==Policy_Id
orderby oD.Policy_Id descending
select new POCO.Data_Retention_Policy{Policy_Id = oD.Policy_Id,
Location_ID = oD.Location_ID,
Data_Type = oD.Data_Type,
Retention_Period_Days = oD.Retention_Period_Days,
Auto_Anonymize = oD.Auto_Anonymize,
Region_Lock = oD.Region_Lock,
Enforced_From = oD.Enforced_From,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_DATA_RETENTION_POLICY_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Data_Retention_Policy
where oD.Policy_Id==Policy_Id
orderby oD.Policy_Id descending
select new {oD.Policy_Id,oD.Location_ID,oD.Data_Type,oD.Retention_Period_Days,oD.Auto_Anonymize,oD.Region_Lock,oD.Enforced_From,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Data_Retention_Policy objData_Retention_Policy;
foreach (var objDat1 in _Result3)
 {
objData_Retention_Policy = new Data_Retention_Policy();
objData_Retention_Policy.Policy_Id = objDat1.Policy_Id;
objData_Retention_Policy.Location_ID = objDat1.Location_ID;
objData_Retention_Policy.Data_Type = objDat1.Data_Type;
objData_Retention_Policy.Retention_Period_Days = objDat1.Retention_Period_Days;
objData_Retention_Policy.Auto_Anonymize = objDat1.Auto_Anonymize;
objData_Retention_Policy.Region_Lock = objDat1.Region_Lock;
objData_Retention_Policy.Enforced_From = objDat1.Enforced_From;
objData_Retention_Policy.Notes = objDat1.Notes;
objData_Retention_Policy.Is_Active = objDat1.Is_Active;
objData_Retention_Policy.Created_Date = objDat1.Created_Date;
objData_Retention_Policy.Created_By = objDat1.Created_By;
objData_Retention_Policy.Modified_Date = objDat1.Modified_Date;
objData_Retention_Policy.Modified_By = objDat1.Modified_By;
objData_Retention_Policy.Audit_Id = objDat1.Audit_Id;
objData_Retention_Policy.User_IP = objDat1.User_IP;
objData_Retention_Policy.Site_Id = objDat1.Site_Id;
objList.Add(objData_Retention_Policy);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Data_Retention_Policy objEntity = Entity.ConvertData_Retention_Policy();
objDataContext.Data_Retention_Policy.Attach(objEntity);
objDataContext.Data_Retention_Policy.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

