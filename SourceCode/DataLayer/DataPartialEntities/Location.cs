/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Location
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Location: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Location_ID=Entity[EntityMapper.Location.LOCATION_ID].ConvertInteger();
TenantId=Entity[EntityMapper.Location.TENANTID].ConvertInteger();
LocationName=Entity[EntityMapper.Location.LOCATIONNAME].ConvertString();
Short_Code=Entity[EntityMapper.Location.SHORT_CODE].ConvertString();
Long_Code=Entity[EntityMapper.Location.LONG_CODE].ConvertString();
Short_Name=Entity[EntityMapper.Location.SHORT_NAME].ConvertString();
Description=Entity[EntityMapper.Location.DESCRIPTION].ConvertString();
Parent_Location_ID=Entity[EntityMapper.Location.PARENT_LOCATION_ID].ConvertInteger();
Location_Type_Id=Entity[EntityMapper.Location.LOCATION_TYPE_ID].ConvertInteger();
Is_Active=Entity[EntityMapper.Location.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Location.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Location.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Location.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Location.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Location.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Location.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Location.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Location.Add(Entity.ConvertLocation());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Location objEntity = Entity.ConvertLocation();
objDataContext.Location.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_LOCATIONS_DATA:
  var _Result2 = objDataContext.Location.Select(j =>
new {Location_ID = j.Location_ID,
TenantId = j.TenantId,
LocationName = j.LocationName,
Short_Code = j.Short_Code,
Long_Code = j.Long_Code,
Short_Name = j.Short_Name,
Description = j.Description,
Parent_Location_ID = j.Parent_Location_ID,
Location_Type_Id = j.Location_Type_Id,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_LOCATIONS:
  var _Result = objDataContext.Location.Select(j =>
new POCO.Location{Location_ID = j.Location_ID,
TenantId = j.TenantId,
LocationName = j.LocationName,
Short_Code = j.Short_Code,
Long_Code = j.Long_Code,
Short_Name = j.Short_Name,
Description = j.Description,
Parent_Location_ID = j.Parent_Location_ID,
Location_Type_Id = j.Location_Type_Id,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_LOCATION_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Location
where oD.Location_ID==Location_ID
orderby oD.Location_ID descending
select new POCO.Location{Location_ID = oD.Location_ID,
TenantId = oD.TenantId,
LocationName = oD.LocationName,
Short_Code = oD.Short_Code,
Long_Code = oD.Long_Code,
Short_Name = oD.Short_Name,
Description = oD.Description,
Parent_Location_ID = oD.Parent_Location_ID,
Location_Type_Id = oD.Location_Type_Id,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_LOCATION_BY_ID:
 var _Result1 = (from oD in objDataContext.Location
where oD.Location_ID==Location_ID
orderby oD.Location_ID descending
select new POCO.Location{Location_ID = oD.Location_ID,
TenantId = oD.TenantId,
LocationName = oD.LocationName,
Short_Code = oD.Short_Code,
Long_Code = oD.Long_Code,
Short_Name = oD.Short_Name,
Description = oD.Description,
Parent_Location_ID = oD.Parent_Location_ID,
Location_Type_Id = oD.Location_Type_Id,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_LOCATION_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Location
where oD.Location_ID==Location_ID
orderby oD.Location_ID descending
select new {oD.Location_ID,oD.TenantId,oD.LocationName,oD.Short_Code,oD.Long_Code,oD.Short_Name,oD.Description,oD.Parent_Location_ID,oD.Location_Type_Id,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Location objLocation;
foreach (var objLoc1 in _Result3)
 {
objLocation = new Location();
objLocation.Location_ID = objLoc1.Location_ID;
objLocation.TenantId = objLoc1.TenantId;
objLocation.LocationName = objLoc1.LocationName;
objLocation.Short_Code = objLoc1.Short_Code;
objLocation.Long_Code = objLoc1.Long_Code;
objLocation.Short_Name = objLoc1.Short_Name;
objLocation.Description = objLoc1.Description;
objLocation.Parent_Location_ID = objLoc1.Parent_Location_ID;
objLocation.Location_Type_Id = objLoc1.Location_Type_Id;
objLocation.Is_Active = objLoc1.Is_Active;
objLocation.Created_Date = objLoc1.Created_Date;
objLocation.Created_By = objLoc1.Created_By;
objLocation.Modified_Date = objLoc1.Modified_Date;
objLocation.Modified_By = objLoc1.Modified_By;
objLocation.Audit_Id = objLoc1.Audit_Id;
objLocation.User_IP = objLoc1.User_IP;
objLocation.Site_Id = objLoc1.Site_Id;
objList.Add(objLocation);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Location objEntity = Entity.ConvertLocation();
objDataContext.Location.Attach(objEntity);
objDataContext.Location.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

