/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Voice_Preference
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Voice_Preference: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
Preference_Id=Entity[EntityMapper.Voice_Preference.PREFERENCE_ID].ConvertInteger();
Location_ID=Entity[EntityMapper.Voice_Preference.LOCATION_ID].ConvertInteger();
User_Id=Entity[EntityMapper.Voice_Preference.USER_ID].ConvertInteger();
Speed=Entity[EntityMapper.Voice_Preference.SPEED].ConvertDecimal();
Pitch=Entity[EntityMapper.Voice_Preference.PITCH].ConvertDecimal();
Emotion_Mode=Entity[EntityMapper.Voice_Preference.EMOTION_MODE].ConvertString();
Preferred_Voice=Entity[EntityMapper.Voice_Preference.PREFERRED_VOICE].ConvertInteger();
Notes=Entity[EntityMapper.Voice_Preference.NOTES].ConvertString();
Is_Active=Entity[EntityMapper.Voice_Preference.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Voice_Preference.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Voice_Preference.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Voice_Preference.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Voice_Preference.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Voice_Preference.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Voice_Preference.USER_IP].ConvertString();
Site_Id=Entity[EntityMapper.Voice_Preference.SITE_ID].ConvertInteger();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Voice_Preference.Add(Entity.ConvertVoice_Preference());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Voice_Preference objEntity = Entity.ConvertVoice_Preference();
objDataContext.Voice_Preference.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_VOICE_PREFERENCES_DATA:
  var _Result2 = objDataContext.Voice_Preference.Select(j =>
new {Preference_Id = j.Preference_Id,
Location_ID = j.Location_ID,
User_Id = j.User_Id,
Speed = j.Speed,
Pitch = j.Pitch,
Emotion_Mode = j.Emotion_Mode,
Preferred_Voice = j.Preferred_Voice,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_VOICE_PREFERENCES:
  var _Result = objDataContext.Voice_Preference.Select(j =>
new POCO.Voice_Preference{Preference_Id = j.Preference_Id,
Location_ID = j.Location_ID,
User_Id = j.User_Id,
Speed = j.Speed,
Pitch = j.Pitch,
Emotion_Mode = j.Emotion_Mode,
Preferred_Voice = j.Preferred_Voice,
Notes = j.Notes,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP,
Site_Id = j.Site_Id
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_VOICE_PREFERENCE_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Voice_Preference
where oD.Location_ID==Location_ID
orderby oD.Preference_Id descending
select new POCO.Voice_Preference{Preference_Id = oD.Preference_Id,
Location_ID = oD.Location_ID,
User_Id = oD.User_Id,
Speed = oD.Speed,
Pitch = oD.Pitch,
Emotion_Mode = oD.Emotion_Mode,
Preferred_Voice = oD.Preferred_Voice,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_VOICE_PREFERENCE_BY_ID:
 var _Result1 = (from oD in objDataContext.Voice_Preference
where oD.Preference_Id==Preference_Id
orderby oD.Preference_Id descending
select new POCO.Voice_Preference{Preference_Id = oD.Preference_Id,
Location_ID = oD.Location_ID,
User_Id = oD.User_Id,
Speed = oD.Speed,
Pitch = oD.Pitch,
Emotion_Mode = oD.Emotion_Mode,
Preferred_Voice = oD.Preferred_Voice,
Notes = oD.Notes,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP,
Site_Id = oD.Site_Id
}).ToList();
return _Result1;
case DomainMapper.GET_VOICE_PREFERENCE_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Voice_Preference
where oD.Preference_Id==Preference_Id
orderby oD.Preference_Id descending
select new {oD.Preference_Id,oD.Location_ID,oD.User_Id,oD.Speed,oD.Pitch,oD.Emotion_Mode,oD.Preferred_Voice,oD.Notes,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP,oD.Site_Id };
ArrayList objList = new ArrayList();
Voice_Preference objVoice_Preference;
foreach (var objVoi1 in _Result3)
 {
objVoice_Preference = new Voice_Preference();
objVoice_Preference.Preference_Id = objVoi1.Preference_Id;
objVoice_Preference.Location_ID = objVoi1.Location_ID;
objVoice_Preference.User_Id = objVoi1.User_Id;
objVoice_Preference.Speed = objVoi1.Speed;
objVoice_Preference.Pitch = objVoi1.Pitch;
objVoice_Preference.Emotion_Mode = objVoi1.Emotion_Mode;
objVoice_Preference.Preferred_Voice = objVoi1.Preferred_Voice;
objVoice_Preference.Notes = objVoi1.Notes;
objVoice_Preference.Is_Active = objVoi1.Is_Active;
objVoice_Preference.Created_Date = objVoi1.Created_Date;
objVoice_Preference.Created_By = objVoi1.Created_By;
objVoice_Preference.Modified_Date = objVoi1.Modified_Date;
objVoice_Preference.Modified_By = objVoi1.Modified_By;
objVoice_Preference.Audit_Id = objVoi1.Audit_Id;
objVoice_Preference.User_IP = objVoi1.User_IP;
objVoice_Preference.Site_Id = objVoi1.Site_Id;
objList.Add(objVoice_Preference);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Voice_Preference objEntity = Entity.ConvertVoice_Preference();
objDataContext.Voice_Preference.Attach(objEntity);
objDataContext.Voice_Preference.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

