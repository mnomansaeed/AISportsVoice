/*****************************************************************************************************************
Author: Code generated by Shinersoft Code Plumber 2008.
Date: Thursday, April 24, 2025
Time: 10:42:00 AM
TableName: Subscription
/*****************************************************************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;
using System.Collections;
using DataLayer;
using Utility;
namespace DataLayer
{
public partial class Subscription: DataBase,IData
{
#region IData Members
string IData.InsertQuery()
{
throw new NotImplementedException();
}
string IData.UpdateQuery()
{
throw new NotImplementedException();
}
string IData.DeleteQuery()
{
throw new NotImplementedException();
}
string IData.SelectQuery()
{
throw new NotImplementedException();
}
string IData.SelectAllQuery()
{
throw new NotImplementedException();
}
IDbCommand IData.InsertSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.UpdateSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.DeleteSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectSP()
{
 throw new NotImplementedException();
}
IDbCommand IData.SelectAllSP()
{
 throw new NotImplementedException();
}
void IData.Fill(Hashtable Entity)
{
SubscriptionId=Entity[EntityMapper.Subscription.SUBSCRIPTIONID].ConvertInteger();
PlanName=Entity[EntityMapper.Subscription.PLANNAME].ConvertString();
Status=Entity[EntityMapper.Subscription.STATUS].ConvertString();
Is_Active=Entity[EntityMapper.Subscription.IS_ACTIVE].ConvertByte();
Created_Date=Entity[EntityMapper.Subscription.CREATED_DATE].ConvertDateTime();
Created_By=Entity[EntityMapper.Subscription.CREATED_BY].ConvertInteger();
Modified_Date=Entity[EntityMapper.Subscription.MODIFIED_DATE].ConvertDateTime();
Modified_By=Entity[EntityMapper.Subscription.MODIFIED_BY].ConvertInteger();
Audit_Id=Entity[EntityMapper.Subscription.AUDIT_ID].ConvertLong();
User_IP=Entity[EntityMapper.Subscription.USER_IP].ConvertString();
}
void IData.InsertOnSubmit(DALEntities objDataContext, IData Entity)
{
objDataContext.Subscription.Add(Entity.ConvertSubscription());
}
void IData.UpdateOnSubmit(DALEntities objDataContext, IData Entity)
{
Subscription objEntity = Entity.ConvertSubscription();
objDataContext.Subscription.Attach(objEntity);
}
public IList SelectEntity(DALEntities objDataContext, string Behaviour)
{
try
 {
switch(Behaviour.ToString())
 {
 case DomainMapper.GET_SUBSCRIPTIONS_DATA:
  var _Result2 = objDataContext.Subscription.Select(j =>
new {SubscriptionId = j.SubscriptionId,
PlanName = j.PlanName,
Status = j.Status,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP
}).ToList();
 return _Result2.ToList();
 case DomainMapper.GET_SUBSCRIPTIONS:
  var _Result = objDataContext.Subscription.Select(j =>
new POCO.Subscription{SubscriptionId = j.SubscriptionId,
PlanName = j.PlanName,
Status = j.Status,
Is_Active = j.Is_Active,
Created_Date = j.Created_Date,
Created_By = j.Created_By,
Modified_Date = j.Modified_Date,
Modified_By = j.Modified_By,
Audit_Id = j.Audit_Id,
User_IP = j.User_IP
}).ToList();
 return _Result.ToList();
case DomainMapper.GET_SUBSCRIPTION_BY_LOCATION_ID:
/* var _Result4 = (from oD in objDataContext.Subscription
where oD.Location_ID==Location_ID
orderby oD.SubscriptionId descending
select new POCO.Subscription{SubscriptionId = oD.SubscriptionId,
PlanName = oD.PlanName,
Status = oD.Status,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP
}).ToList();
return _Result4.ToList();*/
case DomainMapper.GET_SUBSCRIPTION_BY_ID:
 var _Result1 = (from oD in objDataContext.Subscription
where oD.SubscriptionId==SubscriptionId
orderby oD.SubscriptionId descending
select new POCO.Subscription{SubscriptionId = oD.SubscriptionId,
PlanName = oD.PlanName,
Status = oD.Status,
Is_Active = oD.Is_Active,
Created_Date = oD.Created_Date,
Created_By = oD.Created_By,
Modified_Date = oD.Modified_Date,
Modified_By = oD.Modified_By,
Audit_Id = oD.Audit_Id,
User_IP = oD.User_IP
}).ToList();
return _Result1;
case DomainMapper.GET_SUBSCRIPTION_BY_ID_DATA:
 var _Result3 = from oD in objDataContext.Subscription
where oD.SubscriptionId==SubscriptionId
orderby oD.SubscriptionId descending
select new {oD.SubscriptionId,oD.PlanName,oD.Status,oD.Is_Active,oD.Created_Date,oD.Created_By,oD.Modified_Date,oD.Modified_By,oD.Audit_Id,oD.User_IP };
ArrayList objList = new ArrayList();
Subscription objSubscription;
foreach (var objSub1 in _Result3)
 {
objSubscription = new Subscription();
objSubscription.SubscriptionId = objSub1.SubscriptionId;
objSubscription.PlanName = objSub1.PlanName;
objSubscription.Status = objSub1.Status;
objSubscription.Is_Active = objSub1.Is_Active;
objSubscription.Created_Date = objSub1.Created_Date;
objSubscription.Created_By = objSub1.Created_By;
objSubscription.Modified_Date = objSub1.Modified_Date;
objSubscription.Modified_By = objSub1.Modified_By;
objSubscription.Audit_Id = objSub1.Audit_Id;
objSubscription.User_IP = objSub1.User_IP;
objList.Add(objSubscription);
}
return objList;
default:
return null;
}
}
catch (Exception ex)
{
throw ex;
}
}
void IData.AddChild(IData childEntity)
{
//_ProductDetails.Add((DataLayer.ProductDetail)childEntity);
 throw new NotImplementedException();
}
public void DeleteOnSubmit(DALEntities objDataContext, IData Entity)
{
 //throw new NotImplementedException();
Subscription objEntity = Entity.ConvertSubscription();
objDataContext.Subscription.Attach(objEntity);
objDataContext.Subscription.Remove(objEntity);
}
#endregion
}
}
/*****************************************************************************************************************/

